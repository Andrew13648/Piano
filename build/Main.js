/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _Piano = __webpack_require__(1);\n\nvar _Piano2 = _interopRequireDefault(_Piano);\n\nvar _Master = __webpack_require__(25);\n\nvar _Master2 = _interopRequireDefault(_Master);\n\nvar _Buffer = __webpack_require__(12);\n\nvar _Buffer2 = _interopRequireDefault(_Buffer);\n\nvar _midiconvert = __webpack_require__(32);\n\nvar _midiconvert2 = _interopRequireDefault(_midiconvert);\n\nvar _Part = __webpack_require__(33);\n\nvar _Part2 = _interopRequireDefault(_Part);\n\nvar _Transport = __webpack_require__(15);\n\nvar _Transport2 = _interopRequireDefault(_Transport);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar piano = new _Piano2.default().toMaster();\n\npiano.load('./Salamander/Salamander.mp3').then(function () {\n\t//make the button active on load\n\tvar button = document.querySelector('button');\n\tbutton.classList = 'active';\n});\n\n/**\n *  LOADING BAR\n */\n_Buffer2.default.on('progress', function (prog) {\n\tdocument.querySelector('#loading #fill').style.width = (prog * 100).toString() + '%';\n});\n\n_Buffer2.default.on('load', function (prog) {\n\tdocument.querySelector('#loading').remove();\n});\n\n/**\n *  MIDI FILE\n */\n_midiconvert2.default.load('clair_de_lune.mid', function (midi) {\n\n\tfunction playNote(time, event) {\n\t\tpiano.keyDown(event.note, event.velocity, time).keyUp(event.note, time + event.duration);\n\t}\n\n\t_Transport2.default.set(midi.transport);\n\n\t//schedule the pedal\n\tvar sustain = new _Part2.default(function (time, event) {\n\t\tif (event.value) {\n\t\t\tpiano.pedalDown(time);\n\t\t} else {\n\t\t\tpiano.pedalUp(time);\n\t\t}\n\t}, midi.tracks[0].sustain).start(0);\n\n\tvar noteOffEvents = new _Part2.default(function (time, event) {\n\t\tpiano.keyUp(event.midi, time);\n\t}, midi.tracks[0].noteOffs).start(0);\n\n\tvar noteOnEvents = new _Part2.default(function (time, event) {\n\t\tpiano.keyDown(event.midi, event.velocity, time);\n\t}, midi.tracks[0].notes).start(0);\n});\n\n/**\n *  VOLUME CONTROLS\n */\nwindow.addEventListener('DOMContentLoaded', function () {\n\tvar inputs = document.querySelectorAll('input');\n\tvar _iteratorNormalCompletion = true;\n\tvar _didIteratorError = false;\n\tvar _iteratorError = undefined;\n\n\ttry {\n\t\tfor (var _iterator = inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n\t\t\tvar input = _step.value;\n\n\t\t\tinput.addEventListener('input', function (e) {\n\t\t\t\tpiano.setVolume(e.target.name, e.target.value);\n\t\t\t});\n\t\t}\n\t} catch (err) {\n\t\t_didIteratorError = true;\n\t\t_iteratorError = err;\n\t} finally {\n\t\ttry {\n\t\t\tif (!_iteratorNormalCompletion && _iterator.return) {\n\t\t\t\t_iterator.return();\n\t\t\t}\n\t\t} finally {\n\t\t\tif (_didIteratorError) {\n\t\t\t\tthrow _iteratorError;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar button = document.querySelector('button');\n\tbutton.addEventListener('click', function (e) {\n\t\tif (_Transport2.default.state === 'started') {\n\t\t\t_Transport2.default.pause();\n\t\t\tbutton.textContent = 'START';\n\t\t} else {\n\t\t\t_Transport2.default.start();\n\t\t\tbutton.textContent = 'PAUSE';\n\t\t}\n\t});\n});\n\n/**\n *  MIDI INPUT\n */\nfunction parseInput(message) {\n\tvar note = void 0;\n\tif (message[0] === 176 && message[1] == 64) {\n\t\tif (message[2] > 0) {\n\t\t\tpiano.pedalDown();\n\t\t} else {\n\t\t\tpiano.pedalUp();\n\t\t}\n\t} else if (message[0] === 128) {\n\t\t//noteOff\n\t\tpiano.keyUp(message[1]);\n\t} else if (message[0] === 144) {\n\t\t//noteOn\n\t\tpiano.keyDown(message[1], message[2] / 127);\n\t}\n}\n\nif (navigator.requestMIDIAccess) {\n\tnavigator.requestMIDIAccess().then(function (midiAccess) {\n\t\tmidiAccess.inputs.forEach(function (input) {\n\t\t\tinput.addEventListener('midimessage', function (e) {\n\t\t\t\tparseInput(e.data);\n\t\t\t});\n\t\t});\n\t});\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTWFpbi5qcz85NDkyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFJLFFBQVEsc0JBQVksUUFBWixFQUFaOztBQUVBLE1BQU0sSUFBTixDQUFXLDZCQUFYLEVBQTBDLElBQTFDLENBQStDLFlBQUk7QUFDbEQ7QUFDQSxLQUFJLFNBQVMsU0FBUyxhQUFULENBQXVCLFFBQXZCLENBQWI7QUFDQSxRQUFPLFNBQVAsR0FBbUIsUUFBbkI7QUFDQSxDQUpEOztBQU1BOzs7QUFHQSxpQkFBTyxFQUFQLENBQVUsVUFBVixFQUFzQixVQUFDLElBQUQsRUFBVTtBQUMvQixVQUFTLGFBQVQsQ0FBdUIsZ0JBQXZCLEVBQXlDLEtBQXpDLENBQStDLEtBQS9DLEdBQXVELENBQUMsT0FBTyxHQUFSLEVBQWEsUUFBYixLQUEwQixHQUFqRjtBQUNBLENBRkQ7O0FBSUEsaUJBQU8sRUFBUCxDQUFVLE1BQVYsRUFBa0IsVUFBQyxJQUFELEVBQVU7QUFDM0IsVUFBUyxhQUFULENBQXVCLFVBQXZCLEVBQW1DLE1BQW5DO0FBQ0EsQ0FGRDs7QUFJQTs7O0FBR0Esc0JBQVksSUFBWixDQUFpQixtQkFBakIsRUFBc0MsVUFBQyxJQUFELEVBQVU7O0FBRS9DLFVBQVMsUUFBVCxDQUFrQixJQUFsQixFQUF3QixLQUF4QixFQUE4QjtBQUM3QixRQUFNLE9BQU4sQ0FBYyxNQUFNLElBQXBCLEVBQTBCLE1BQU0sUUFBaEMsRUFBMEMsSUFBMUMsRUFBZ0QsS0FBaEQsQ0FBc0QsTUFBTSxJQUE1RCxFQUFrRSxPQUFPLE1BQU0sUUFBL0U7QUFDQTs7QUFFRCxxQkFBVSxHQUFWLENBQWMsS0FBSyxTQUFuQjs7QUFFQTtBQUNBLEtBQUksVUFBVSxtQkFBUyxVQUFDLElBQUQsRUFBTyxLQUFQLEVBQWlCO0FBQ3ZDLE1BQUksTUFBTSxLQUFWLEVBQWdCO0FBQ2YsU0FB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ZXNDb250ZW50IjpbImltcG9ydCBQaWFubyBmcm9tICdQaWFubydcbmltcG9ydCBNYXN0ZXIgZnJvbSAnVG9uZS9jb3JlL01hc3RlcidcbmltcG9ydCBCdWZmZXIgZnJvbSAnVG9uZS9jb3JlL0J1ZmZlcidcbmltcG9ydCBNaWRpQ29udmVydCBmcm9tICdtaWRpY29udmVydCdcbmltcG9ydCBQYXJ0IGZyb20gJ1RvbmUvZXZlbnQvUGFydCdcbmltcG9ydCBUcmFuc3BvcnQgZnJvbSAnVG9uZS9jb3JlL1RyYW5zcG9ydCdcblxudmFyIHBpYW5vID0gbmV3IFBpYW5vKCkudG9NYXN0ZXIoKVxuXG5waWFuby5sb2FkKCcuL1NhbGFtYW5kZXIvU2FsYW1hbmRlci5tcDMnKS50aGVuKCgpPT57XG5cdC8vbWFrZSB0aGUgYnV0dG9uIGFjdGl2ZSBvbiBsb2FkXG5cdGxldCBidXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKVxuXHRidXR0b24uY2xhc3NMaXN0ID0gJ2FjdGl2ZSdcbn0pXG5cbi8qKlxuICogIExPQURJTkcgQkFSXG4gKi9cbkJ1ZmZlci5vbigncHJvZ3Jlc3MnLCAocHJvZykgPT4ge1xuXHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbG9hZGluZyAjZmlsbCcpLnN0eWxlLndpZHRoID0gKHByb2cgKiAxMDApLnRvU3RyaW5nKCkgKyAnJSdcbn0pXG5cbkJ1ZmZlci5vbignbG9hZCcsIChwcm9nKSA9PiB7XG5cdGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNsb2FkaW5nJykucmVtb3ZlKClcbn0pXG5cbi8qKlxuICogIE1JREkgRklMRVxuICovXG5NaWRpQ29udmVydC5sb2FkKCdjbGFpcl9kZV9sdW5lLm1pZCcsIChtaWRpKSA9PiB7XG5cblx0ZnVuY3Rpb24gcGxheU5vdGUodGltZSwgZXZlbnQpe1xuXHRcdHBpYW5vLmtleURvd24oZXZlbnQubm90ZSwgZXZlbnQudmVsb2NpdHksIHRpbWUpLmtleVVwKGV2ZW50Lm5vdGUsIHRpbWUgKyBldmVudC5kdXJhdGlvbilcblx0fVxuXG5cdFRyYW5zcG9ydC5zZXQobWlkaS50cmFuc3BvcnQpXG5cblx0Ly9zY2hlZHVsZSB0aGUgcGVkYWxcblx0bGV0IHN1c3RhaW4gPSBuZXcgUGFydCgodGltZSwgZXZlbnQpID0+IHtcblx0XHRpZiAoZXZlbnQudmFsdWUpe1xuXHRcdFx0cGlhbm8ucGVkYWxEb3duKHRpbWUpXG5cdFx0fSBlbHNlIHtcblx0XHRcdHBpYW5vLnBlZGFsVXAodGltZSlcblx0XHR9XG5cdH0sIG1pZGkudHJhY2tzWzBdLnN1c3RhaW4pLnN0YXJ0KDApXG5cblx0bGV0IG5vdGVPZmZFdmVudHMgPSBuZXcgUGFydCgodGltZSwgZXZlbnQpID0+IHtcblx0XHRwaWFuby5rZXlVcChldmVudC5taWRpLCB0aW1lKVxuXHR9LCBtaWRpLnRyYWNrc1swXS5ub3RlT2Zmcykuc3RhcnQoMClcblx0XG5cdGxldCBub3RlT25FdmVudHMgPSBuZXcgUGFydCgodGltZSwgZXZlbnQpID0+IHtcblx0XHRwaWFuby5rZXlEb3duKGV2ZW50Lm1pZGksIGV2ZW50LnZlbG9jaXR5LCB0aW1lKVxuXHR9LCBtaWRpLnRyYWNrc1swXS5ub3Rlcykuc3RhcnQoMClcblx0XG59KVxuXG4vKipcbiAqICBWT0xVTUUgQ09OVFJPTFNcbiAqL1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG5cdGxldCBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dCcpXG5cdGZvciAobGV0IGlucHV0IG9mIGlucHV0cyl7XG5cdFx0aW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoZSkgPT4ge1xuXHRcdFx0cGlhbm8uc2V0Vm9sdW1lKGUudGFyZ2V0Lm5hbWUsIGUudGFyZ2V0LnZhbHVlKVxuXHRcdH0pXG5cdH1cblxuXHRsZXQgYnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYnV0dG9uJylcblx0YnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcblx0XHRpZiAoVHJhbnNwb3J0LnN0YXRlID09PSAnc3RhcnRlZCcpe1xuXHRcdFx0VHJhbnNwb3J0LnBhdXNlKClcblx0XHRcdGJ1dHRvbi50ZXh0Q29udGVudCA9ICdTVEFSVCdcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHJhbnNwb3J0LnN0YXJ0KClcblx0XHRcdGJ1dHRvbi50ZXh0Q29udGVudCA9ICdQQVVTRSdcblx0XHR9XG5cdH0pXG59KVxuXG5cbi8qKlxuICogIE1JREkgSU5QVVRcbiAqL1xuZnVuY3Rpb24gcGFyc2VJbnB1dChtZXNzYWdlKXtcblx0bGV0IG5vdGU7XG5cdGlmIChtZXNzYWdlWzBdID09PSAxNzYgJiYgbWVzc2FnZVsxXSA9PSA2NCl7XG5cdFx0aWYgKG1lc3NhZ2VbMl0gPiAwKXtcblx0XHRcdHBpYW5vLnBlZGFsRG93bigpXG5cdFx0fSBlbHNlIHtcblx0XHRcdHBpYW5vLnBlZGFsVXAoKVxuXHRcdH1cblx0fSBlbHNlIGlmIChtZXNzYWdlWzBdID09PSAxMjgpeyAvL25vdGVPZmZcblx0XHRwaWFuby5rZXlVcChtZXNzYWdlWzFdKVxuXHR9IGVsc2UgaWYgKG1lc3NhZ2VbMF0gPT09IDE0NCl7IC8vbm90ZU9uXG5cdFx0cGlhbm8ua2V5RG93bihtZXNzYWdlWzFdLCBtZXNzYWdlWzJdIC8gMTI3KVxuXHR9XG59XG5cbmlmIChuYXZpZ2F0b3IucmVxdWVzdE1JRElBY2Nlc3MpIHtcbiAgICBuYXZpZ2F0b3IucmVxdWVzdE1JRElBY2Nlc3MoKS50aGVuKChtaWRpQWNjZXNzKSA9PiB7XG4gICAgXHRtaWRpQWNjZXNzLmlucHV0cy5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgIFx0XHRpbnB1dC5hZGRFdmVudExpc3RlbmVyKCdtaWRpbWVzc2FnZScsIChlKSA9PiB7XG4gICAgXHRcdFx0cGFyc2VJbnB1dChlLmRhdGEpXG4gICAgXHRcdH0pXG4gICAgXHR9KTtcbiAgICB9KTtcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9NYWluLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Gain = __webpack_require__(2);\n\nvar _Gain2 = _interopRequireDefault(_Gain);\n\nvar _Tone2 = __webpack_require__(3);\n\nvar _Tone3 = _interopRequireDefault(_Tone2);\n\nvar _Frequency = __webpack_require__(8);\n\nvar _Frequency2 = _interopRequireDefault(_Frequency);\n\nvar _Pedal = __webpack_require__(10);\n\nvar _Pedal2 = _interopRequireDefault(_Pedal);\n\nvar _Note = __webpack_require__(28);\n\nvar _Note2 = _interopRequireDefault(_Note);\n\nvar _Harmonics = __webpack_require__(35);\n\nvar _Harmonics2 = _interopRequireDefault(_Harmonics);\n\nvar _Release = __webpack_require__(36);\n\nvar _Release2 = _interopRequireDefault(_Release);\n\nvar _Salamander = __webpack_require__(27);\n\nvar _Salamander2 = _interopRequireDefault(_Salamander);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n *  @class Multisampled Grand Piano using [Salamander Piano Samples](https://archive.org/details/SalamanderGrandPianoV3)\n *  @extends {Tone}\n */\nvar Piano = function (_Tone) {\n\t_inherits(Piano, _Tone);\n\n\tfunction Piano() {\n\t\t_classCallCheck(this, Piano);\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Piano).call(this, 0, 1));\n\n\t\t_this._loaded = false;\n\n\t\t_this._heldNotes = new Map();\n\n\t\t_this._sustainedNotes = new Map();\n\n\t\t_this._pedal = new _Pedal2.default().connect(_this.output);\n\n\t\t_this._notes = new _Note2.default().connect(_this.output);\n\n\t\t_this._harmonics = new _Harmonics2.default().connect(_this.output);\n\n\t\t_this._release = new _Release2.default().connect(_this.output);\n\t\treturn _this;\n\t}\n\n\t/**\n  *  Load all the samples\n  *  @param  {String}  baseUrl  The url for the Salamander base folder\n  *  @return  {Promise}\n  */\n\n\n\t_createClass(Piano, [{\n\t\tkey: 'load',\n\t\tvalue: function load(url) {\n\t\t\tvar _this2 = this;\n\n\t\t\treturn _Salamander2.default.load(url).then(function () {\n\t\t\t\t_this2._loaded = true;\n\t\t\t});\n\t\t}\n\n\t\t/**\n   *  Put the pedal down at the given time. Causes subsequent\n   *  notes and currently held notes to sustain.\n   *  @param  {Time}  time  The time the pedal should go down\n   *  @returns {Piano} this\n   */\n\n\t}, {\n\t\tkey: 'pedalDown',\n\t\tvalue: function pedalDown(time) {\n\t\t\tif (this._loaded) {\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tif (!this._pedal.isDown(time)) {\n\t\t\t\t\tthis._pedal.down(time);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   *  Put the pedal up. Dampens sustained notes\n   *  @param  {Time}  time  The time the pedal should go up\n   *  @returns {Piano} this\n   */\n\n\t}, {\n\t\tkey: 'pedalUp',\n\t\tvalue: function pedalUp(time) {\n\t\t\tif (this._loaded) {\n\t\t\t\ttime = this.toSeconds(time);\n\t\t\t\tif (this._pedal.isDown(time)) {\n\t\t\t\t\tthis._pedal.up(time);\n\t\t\t\t\t// dampen each of the notes\n\t\t\t\t\tthis._sustainedNotes.forEach(function (notes) {\n\t\t\t\t\t\tnotes.forEach(function (note) {\n\t\t\t\t\t\t\tnote.stop(time);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tthis._sustainedNotes.clear();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   *  Play a note.\n   *  @param  {String}  note      The note to play\n   *  @param  {Number}  velocity  The velocity to play the note\n   *  @param  {Time}  time      The time of the event\n   *  @return  {Piano}  this\n   */\n\n\t}, {\n\t\tkey: 'keyDown',\n\t\tvalue: function keyDown(note, velocity, time) {\n\t\t\tif (this._loaded) {\n\t\t\t\ttime = this.toSeconds(time);\n\n\t\t\t\tif (this.isString(note)) {\n\t\t\t\t\tnote = (0, _Frequency2.default)(note).toMidi();\n\t\t\t\t}\n\n\t\t\t\tif (!this._heldNotes.has(note)) {\n\t\t\t\t\tvar key = this._notes.start(note, velocity, time);\n\t\t\t\t\tthis._heldNotes.set(note, key);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   *  Release a held note.\n   *  @param  {String}  note      The note to play\n   *  @param  {Time}  time      The time of the event\n   *  @return  {Piano}  this\n   */\n\n\t}, {\n\t\tkey: 'keyUp',\n\t\tvalue: function keyUp(note, time) {\n\t\t\tif (this._loaded) {\n\t\t\t\ttime = this.toSeconds(time);\n\n\t\t\t\tif (this.isString(note)) {\n\t\t\t\t\tnote = (0, _Frequency2.default)(note).toMidi();\n\t\t\t\t}\n\n\t\t\t\tif (this._heldNotes.has(note)) {\n\n\t\t\t\t\tvar key = this._heldNotes.get(note);\n\t\t\t\t\tthis._heldNotes.delete(note);\n\n\t\t\t\t\tthis._release.start(note, time);\n\n\t\t\t\t\tif (this._pedal.isDown(time)) {\n\t\t\t\t\t\tvar notes = [];\n\t\t\t\t\t\tif (this._sustainedNotes.has(note)) {\n\t\t\t\t\t\t\tnotes = this._sustainedNotes.get(note);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnotes.push(key);\n\t\t\t\t\t\tthis._sustainedNotes.set(note, notes);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar dampenGain = key.stop(time);\n\t\t\t\t\t\tthis._harmonics.start(note, dampenGain, time);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n   *  Set the volumes of each of the components\n   *  @param {String} param\n   *  @param {Decibels} vol\n   *  @return {Piano} this\n   *  @example\n   * //either as an string\n   * piano.setVolume('keybed', -10)\n   */\n\n\t}, {\n\t\tkey: 'setVolume',\n\t\tvalue: function setVolume(param, vol) {\n\t\t\tswitch (param) {\n\t\t\t\tcase 'note':\n\t\t\t\t\tthis._notes.volume = vol;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'pedal':\n\t\t\t\t\tthis._pedal.volume = vol;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'release':\n\t\t\t\t\tthis._release.volume = vol;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'harmonics':\n\t\t\t\t\tthis._harmonics.volume = vol;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn Piano;\n}(_Tone3.default);\n\nexports.default = Piano;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t *         The GainNode is a basic building block of the Web Audio\n\t *         API and is useful for routing audio and adjusting gains. \n\t *  @extends {Tone}\n\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t *  @param {Tone.Type=} units The units of the gain parameter. \n\t */\n\tTone.Gain = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"gain\", \"units\"], Tone.Gain.defaults);\n\n\t\t/**\n\t\t *  The GainNode\n\t\t *  @type  {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis.input = this.output = this._gainNode = this.context.createGain();\n\n\t\t/**\n\t\t *  The gain parameter of the gain node.\n\t\t *  @type {AudioParam}\n\t\t *  @signal\n\t\t */\n\t\tthis.gain = new Tone.Param({\n\t\t\t\"param\" : this._gainNode.gain, \n\t\t\t\"units\" : options.units,\n\t\t\t\"value\" : options.gain,\n\t\t\t\"convert\" : options.convert\n\t\t});\n\t\tthis._readOnly(\"gain\");\n\t};\n\n\tTone.extend(Tone.Gain);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.Gain.defaults = {\n\t\t\"gain\" : 1,\n\t\t\"convert\" : true,\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Gain}  this\n\t */\n\tTone.Gain.prototype.dispose = function(){\n\t\tTone.Param.prototype.dispose.call(this);\n\t\tthis._gainNode.disconnect();\n\t\tthis._gainNode = null;\n\t\tthis._writable(\"gain\");\n\t\tthis.gain.dispose();\n\t\tthis.gain = null;\n\t};\n\n\treturn Tone.Gain;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9jb3JlL0dhaW4uanM/OGE5YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiZ0VBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsY0FBYyxRQUFRO0FBQ3RCLGFBQWEsV0FBVztBQUN4QjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXCJUb25lL2NvcmUvVG9uZVwiLCBcIlRvbmUvY29yZS9QYXJhbVwiLCBcIlRvbmUvdHlwZS9UeXBlXCJdLCBmdW5jdGlvbiAoVG9uZSkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiAgQGNsYXNzIEEgdGhpbiB3cmFwcGVyIGFyb3VuZCB0aGUgTmF0aXZlIFdlYiBBdWRpbyBHYWluTm9kZS5cblx0ICogICAgICAgICBUaGUgR2Fpbk5vZGUgaXMgYSBiYXNpYyBidWlsZGluZyBibG9jayBvZiB0aGUgV2ViIEF1ZGlvXG5cdCAqICAgICAgICAgQVBJIGFuZCBpcyB1c2VmdWwgZm9yIHJvdXRpbmcgYXVkaW8gYW5kIGFkanVzdGluZyBnYWlucy4gXG5cdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0ICogIEBwYXJhbSAge051bWJlcj19ICBnYWluICBUaGUgaW5pdGlhbCBnYWluIG9mIHRoZSBHYWluTm9kZVxuXHQgKiAgQHBhcmFtIHtUb25lLlR5cGU9fSB1bml0cyBUaGUgdW5pdHMgb2YgdGhlIGdhaW4gcGFyYW1ldGVyLiBcblx0ICovXG5cdFRvbmUuR2FpbiA9IGZ1bmN0aW9uKCl7XG5cblx0XHR2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9uc09iamVjdChhcmd1bWVudHMsIFtcImdhaW5cIiwgXCJ1bml0c1wiXSwgVG9uZS5HYWluLmRlZmF1bHRzKTtcblxuXHRcdC8qKlxuXHRcdCAqICBUaGUgR2Fpbk5vZGVcblx0XHQgKiAgQHR5cGUgIHtHYWluTm9kZX1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0XHR0aGlzLmlucHV0ID0gdGhpcy5vdXRwdXQgPSB0aGlzLl9nYWluTm9kZSA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cblx0XHQvKipcblx0XHQgKiAgVGhlIGdhaW4gcGFyYW1ldGVyIG9mIHRoZSBnYWluIG5vZGUuXG5cdFx0ICogIEB0eXBlIHtBdWRpb1BhcmFtfVxuXHRcdCAqICBAc2lnbmFsXG5cdFx0ICovXG5cdFx0dGhpcy5nYWluID0gbmV3IFRvbmUuUGFyYW0oe1xuXHRcdFx0XCJwYXJhbVwiIDogdGhpcy5fZ2Fpbk5vZGUuZ2FpbiwgXG5cdFx0XHRcInVuaXRzXCIgOiBvcHRpb25zLnVuaXRzLFxuXHRcdFx0XCJ2YWx1ZVwiIDogb3B0aW9ucy5nYWluLFxuXHRcdFx0XCJjb252ZXJ0XCIgOiBvcHRpb25zLmNvbnZlcnRcblx0XHR9KTtcblx0XHR0aGlzLl9yZWFkT25seShcImdhaW5cIik7XG5cdH07XG5cblx0VG9uZS5leHRlbmQoVG9uZS5HYWluKTtcblxuXHQvKipcblx0ICogIFRoZSBkZWZhdWx0c1xuXHQgKiAgQGNvbnN0XG5cdCAqICBAdHlwZSAge09iamVjdH1cblx0ICovXG5cdFRvbmUuR2Fpbi5kZWZhdWx0cyA9IHtcblx0XHRcImdhaW5cIiA6IDEsXG5cdFx0XCJjb252ZXJ0XCIgOiB0cnVlLFxuXHR9O1xuXG5cdC8qKlxuXHQgKiAgQ2xlYW4gdXAuXG5cdCAqICBAcmV0dXJuICB7VG9uZS5HYWlufSAgdGhpc1xuXHQgKi9cblx0VG9uZS5HYWluLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24oKXtcblx0XHRUb25lLlBhcmFtLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdFx0dGhpcy5fZ2Fpbk5vZGUuZGlzY29ubmVjdCgpO1xuXHRcdHRoaXMuX2dhaW5Ob2RlID0gbnVsbDtcblx0XHR0aGlzLl93cml0YWJsZShcImdhaW5cIik7XG5cdFx0dGhpcy5nYWluLmRpc3Bvc2UoKTtcblx0XHR0aGlzLmdhaW4gPSBudWxsO1xuXHR9O1xuXG5cdHJldHVybiBUb25lLkdhaW47XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL1RvbmVqcy9Ub25lLmpzL1RvbmUvY29yZS9HYWluLmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\n *  Tone.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2014-2016 Yotam Mann\n */\n!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){\n\n\t\"use strict\";\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\tWEB AUDIO CONTEXT\n\t///////////////////////////////////////////////////////////////////////////\n\n\t//borrowed from underscore.js\n\tfunction isUndef(val){\n\t\treturn val === void 0;\n\t}\n\n\t//borrowed from underscore.js\n\tfunction isFunction(val){\n\t\treturn typeof val === \"function\";\n\t}\n\n\tvar audioContext;\n\n\t//polyfill for AudioContext and OfflineAudioContext\n\tif (isUndef(window.AudioContext)){\n\t\twindow.AudioContext = window.webkitAudioContext;\n\t} \n\tif (isUndef(window.OfflineAudioContext)){\n\t\twindow.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t} \n\n\tif (!isUndef(AudioContext)){\n\t\taudioContext = new AudioContext();\n\t} else {\n\t\tthrow new Error(\"Web Audio is not supported in this browser\");\n\t}\n\n\t//SHIMS////////////////////////////////////////////////////////////////////\n\n\tif (!isFunction(AudioContext.prototype.createGain)){\n\t\tAudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t}\n\tif (!isFunction(AudioContext.prototype.createDelay)){\n\t\tAudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t}\n\tif (!isFunction(AudioContext.prototype.createPeriodicWave)){\n\t\tAudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t}\n\tif (!isFunction(AudioBufferSourceNode.prototype.start)){\n\t\tAudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t}\n\tif (!isFunction(AudioBufferSourceNode.prototype.stop)){\n\t\tAudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t}\n\tif (!isFunction(OscillatorNode.prototype.start)){\n\t\tOscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t}\n\tif (!isFunction(OscillatorNode.prototype.stop)){\n\t\tOscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\t\n\t}\n\tif (!isFunction(OscillatorNode.prototype.setPeriodicWave)){\n\t\tOscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\t\n\t}\n\n\t//extend the connect function to include Tones\n\tif (isUndef(AudioNode.prototype._nativeConnect)){\n\t\tAudioNode.prototype._nativeConnect = AudioNode.prototype.connect;\n\t\tAudioNode.prototype.connect = function(B, outNum, inNum){\n\t\t\tif (B.input){\n\t\t\t\tif (Array.isArray(B.input)){\n\t\t\t\t\tif (isUndef(inNum)){\n\t\t\t\t\t\tinNum = 0;\n\t\t\t\t\t}\n\t\t\t\t\tthis.connect(B.input[inNum]);\n\t\t\t\t} else {\n\t\t\t\t\tthis.connect(B.input, outNum, inNum);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif (B instanceof AudioNode){\n\t\t\t\t\t\tthis._nativeConnect(B, outNum, inNum);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._nativeConnect(B, outNum);\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(\"error connecting to node: \"+B);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTONE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  @class  Tone is the base class of all other classes. It provides \n\t *          a lot of methods and functionality to all classes that extend\n\t *          it. \n\t *  \n\t *  @constructor\n\t *  @alias Tone\n\t *  @param {number} [inputs=1] the number of input nodes\n\t *  @param {number} [outputs=1] the number of output nodes\n\t */\n\tvar Tone = function(inputs, outputs){\n\n\t\t/**\n\t\t *  the input node(s)\n\t\t *  @type {GainNode|Array}\n\t\t */\n\t\tif (isUndef(inputs) || inputs === 1){\n\t\t\tthis.input = this.context.createGain();\n\t\t} else if (inputs > 1){\n\t\t\tthis.input = new Array(inputs);\n\t\t}\n\n\t\t/**\n\t\t *  the output node(s)\n\t\t *  @type {GainNode|Array}\n\t\t */\n\t\tif (isUndef(outputs) || outputs === 1){\n\t\t\tthis.output = this.context.createGain();\n\t\t} else if (outputs > 1){\n\t\t\tthis.output = new Array(inputs);\n\t\t}\n\t};\n\n\t/**\n\t *  Set the parameters at once. Either pass in an\n\t *  object mapping parameters to values, or to set a\n\t *  single parameter, by passing in a string and value.\n\t *  The last argument is an optional ramp time which \n\t *  will ramp any signal values to their destination value\n\t *  over the duration of the rampTime.\n\t *  @param {Object|string} params\n\t *  @param {number=} value\n\t *  @param {Time=} rampTime\n\t *  @returns {Tone} this\n\t *  @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : highpass\n\t * });\n\t *  @example\n\t * filter.set(\"type\", \"highpass\");\n\t *  @example\n\t * //ramp to the value 220 over 3 seconds. \n\t * oscillator.set({\n\t * \t\"frequency\" : 220\n\t * }, 3);\n\t */\n\tTone.prototype.set = function(params, value, rampTime){\n\t\tif (this.isObject(params)){\n\t\t\trampTime = value;\n\t\t} else if (this.isString(params)){\n\t\t\tvar tmpObj = {};\n\t\t\ttmpObj[params] = value;\n\t\t\tparams = tmpObj;\n\t\t}\n\t\tfor (var attr in params){\n\t\t\tvalue = params[attr];\n\t\t\tvar parent = this;\n\t\t\tif (attr.indexOf(\".\") !== -1){\n\t\t\t\tvar attrSplit = attr.split(\".\");\n\t\t\t\tfor (var i = 0; i < attrSplit.length - 1; i++){\n\t\t\t\t\tparent = parent[attrSplit[i]];\n\t\t\t\t}\n\t\t\t\tattr = attrSplit[attrSplit.length - 1];\n\t\t\t}\n\t\t\tvar param = parent[attr];\n\t\t\tif (isUndef(param)){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ((Tone.Signal && param instanceof Tone.Signal) || \n\t\t\t\t\t(Tone.Param && param instanceof Tone.Param)){\n\t\t\t\tif (param.value !== value){\n\t\t\t\t\tif (isUndef(rampTime)){\n\t\t\t\t\t\tparam.value = value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tparam.rampTo(value, rampTime);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (param instanceof AudioParam){\n\t\t\t\tif (param.value !== value){\n\t\t\t\t\tparam.value = value;\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (param instanceof Tone){\n\t\t\t\tparam.set(value);\n\t\t\t} else if (param !== value){\n\t\t\t\tparent[attr] = value;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. Pass in a single attribute to retrieve or an array\n\t *  of attributes. The attribute strings can also include a \".\"\n\t *  to access deeper properties.\n\t *  @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t *  @example\n\t * osc.get(\"type\");\n\t * //returns { \"type\" : \"sine\"}\n\t * @example\n\t * //use dot notation to access deep properties\n\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return \n\t *  \t\t\t\t\t                  all available.\n\t *  @returns {Object}\n\t */\n\tTone.prototype.get = function(params){\n\t\tif (isUndef(params)){\n\t\t\tparams = this._collectDefaults(this.constructor);\n\t\t} else if (this.isString(params)){\n\t\t\tparams = [params];\n\t\t} \n\t\tvar ret = {};\n\t\tfor (var i = 0; i < params.length; i++){\n\t\t\tvar attr = params[i];\n\t\t\tvar parent = this;\n\t\t\tvar subRet = ret;\n\t\t\tif (attr.indexOf(\".\") !== -1){\n\t\t\t\tvar attrSplit = attr.split(\".\");\n\t\t\t\tfor (var j = 0; j < attrSplit.length - 1; j++){\n\t\t\t\t\tvar subAttr = attrSplit[j];\n\t\t\t\t\tsubRet[subAttr] = subRet[subAttr] || {};\n\t\t\t\t\tsubRet = subRet[subAttr];\n\t\t\t\t\tparent = parent[subAttr];\n\t\t\t\t}\n\t\t\t\tattr = attrSplit[attrSplit.length - 1];\n\t\t\t}\n\t\t\tvar param = parent[attr];\n\t\t\tif (this.isObject(params[attr])){\n\t\t\t\tsubRet[attr] = param.get();\n\t\t\t} else if (Tone.Signal && param instanceof Tone.Signal){\n\t\t\t\tsubRet[attr] = param.value;\n\t\t\t} else if (Tone.Param && param instanceof Tone.Param){\n\t\t\t\tsubRet[attr] = param.value;\n\t\t\t} else if (param instanceof AudioParam){\n\t\t\t\tsubRet[attr] = param.value;\n\t\t\t} else if (param instanceof Tone){\n\t\t\t\tsubRet[attr] = param.get();\n\t\t\t} else if (!isFunction(param) && !isUndef(param)){\n\t\t\t\tsubRet[attr] = param;\n\t\t\t} \n\t\t}\n\t\treturn ret;\n\t};\n\n\t/**\n\t *  collect all of the default attributes in one\n\t *  @private\n\t *  @param {function} constr the constructor to find the defaults from\n\t *  @return {Array} all of the attributes which belong to the class\n\t */\n\tTone.prototype._collectDefaults = function(constr){\n\t\tvar ret = [];\n\t\tif (!isUndef(constr.defaults)){\n\t\t\tret = Object.keys(constr.defaults);\n\t\t}\n\t\tif (!isUndef(constr._super)){\n\t\t\tvar superDefs = this._collectDefaults(constr._super);\n\t\t\t//filter out repeats\n\t\t\tfor (var i = 0; i < superDefs.length; i++){\n\t\t\t\tif (ret.indexOf(superDefs[i]) === -1){\n\t\t\t\t\tret.push(superDefs[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t};\n\n\t/**\n\t *  @returns {string} returns the name of the class as a string\n\t */\n\tTone.prototype.toString = function(){\n\t\tfor (var className in Tone){\n\t\t\tvar isLetter = className[0].match(/^[A-Z]$/);\n\t\t\tvar sameConstructor =  Tone[className] === this.constructor;\n\t\t\tif (isFunction(Tone[className]) && isLetter && sameConstructor){\n\t\t\t\treturn className;\n\t\t\t}\n\t\t}\n\t\treturn \"Tone\";\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tCLASS VARS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  A static pointer to the audio context accessible as Tone.context. \n\t *  @type {AudioContext}\n\t */\n\tTone.context = audioContext;\n\n\t/**\n\t *  The audio context.\n\t *  @type {AudioContext}\n\t */\n\tTone.prototype.context = Tone.context;\n\n\t/**\n\t *  the default buffer size\n\t *  @type {number}\n\t *  @static\n\t *  @const\n\t */\n\tTone.prototype.bufferSize = 2048;\n\n\t/**\n\t *  The delay time of a single frame (128 samples according to the spec). \n\t *  @type {number}\n\t *  @static\n\t *  @const\n\t */\n\tTone.prototype.blockTime = 128 / Tone.context.sampleRate;\n\n\t/**\n\t *  The time of a single sample\n\t *  @type {number}\n\t *  @static\n\t *  @const\n\t */\n\tTone.prototype.sampleTime = 1 / Tone.context.sampleRate;\n\t\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tCONNECTIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  disconnect and dispose\n\t *  @returns {Tone} this\n\t */\n\tTone.prototype.dispose = function(){\n\t\tif (!this.isUndef(this.input)){\n\t\t\tif (this.input instanceof AudioNode){\n\t\t\t\tthis.input.disconnect();\n\t\t\t} \n\t\t\tthis.input = null;\n\t\t}\n\t\tif (!this.isUndef(this.output)){\n\t\t\tif (this.output instanceof AudioNode){\n\t\t\t\tthis.output.disconnect();\n\t\t\t} \n\t\t\tthis.output = null;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  a silent connection to the DesinationNode\n\t *  which will ensure that anything connected to it\n\t *  will not be garbage collected\n\t *  \n\t *  @private\n\t */\n\tvar _silentNode = null;\n\n\t/**\n\t *  makes a connection to ensure that the node will not be garbage collected\n\t *  until 'dispose' is explicitly called\n\t *\n\t *  use carefully. circumvents JS and WebAudio's normal Garbage Collection behavior\n\t *  @returns {Tone} this\n\t */\n\tTone.prototype.noGC = function(){\n\t\tthis.output.connect(_silentNode);\n\t\treturn this;\n\t};\n\n\tAudioNode.prototype.noGC = function(){\n\t\tthis.connect(_silentNode);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t *  @param  {Tone | AudioParam | AudioNode} unit \n\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t *  @returns {Tone} this\n\t */\n\tTone.prototype.connect = function(unit, outputNum, inputNum){\n\t\tif (Array.isArray(this.output)){\n\t\t\toutputNum = this.defaultArg(outputNum, 0);\n\t\t\tthis.output[outputNum].connect(unit, 0, inputNum);\n\t\t} else {\n\t\t\tthis.output.connect(unit, outputNum, inputNum);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  disconnect the output\n\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t *                                   if the output is an array, or the\n\t *                                   node to disconnect from.\n\t *  @returns {Tone} this\n\t */\n\tTone.prototype.disconnect = function(output){\n\t\tif (Array.isArray(this.output)){\n\t\t\toutput = this.defaultArg(output, 0);\n\t\t\tthis.output[output].disconnect();\n\t\t} else if (!this.isUndef(output)){\n\t\t\tthis.output.disconnect(output);\n\t\t} else {\n\t\t\tthis.output.disconnect();\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  connect together all of the arguments in series\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone} this\n\t */\n\tTone.prototype.connectSeries = function(){\n\t\tif (arguments.length > 1){\n\t\t\tvar currentUnit = arguments[0];\n\t\t\tfor (var i = 1; i < arguments.length; i++){\n\t\t\t\tvar toUnit = arguments[i];\n\t\t\t\tcurrentUnit.connect(toUnit);\n\t\t\t\tcurrentUnit = toUnit;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Master);\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone} this\n\t */\n\tTone.prototype.chain = function(){\n\t\tif (arguments.length > 0){\n\t\t\tvar currentUnit = this;\n\t\t\tfor (var i = 0; i < arguments.length; i++){\n\t\t\t\tvar toUnit = arguments[i];\n\t\t\t\tcurrentUnit.connect(toUnit);\n\t\t\t\tcurrentUnit = toUnit;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone} this\n\t */\n\tTone.prototype.fan = function(){\n\t\tif (arguments.length > 0){\n\t\t\tfor (var i = 0; i < arguments.length; i++){\n\t\t\t\tthis.connect(arguments[i]);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t//give native nodes chain and fan methods\n\tAudioNode.prototype.chain = Tone.prototype.chain;\n\tAudioNode.prototype.fan = Tone.prototype.fan;\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUTILITIES / HELPERS / MATHS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  If the `given` parameter is undefined, use the `fallback`. \n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both \n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property. \n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an \n\t *  infinite recursive loop.\n\t *  \n\t *  @param  {*} given    \n\t *  @param  {*} fallback \n\t *  @return {*}          \n\t */\n\tTone.prototype.defaultArg = function(given, fallback){\n\t\tif (this.isObject(given) && this.isObject(fallback)){\n\t\t\tvar ret = {};\n\t\t\t//make a deep copy of the given object\n\t\t\tfor (var givenProp in given) {\n\t\t\t\tret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);\n\t\t\t}\n\t\t\tfor (var fallbackProp in fallback) {\n\t\t\t\tret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t} else {\n\t\t\treturn isUndef(given) ? fallback : given;\n\t\t}\n\t};\n\n\t/**\n\t *  returns the args as an options object with given arguments\n\t *  mapped to the names provided. \n\t *\n\t *  if the args given is an array containing only one object, it is assumed\n\t *  that that's already the options object and will just return it. \n\t *  \n\t *  @param  {Array} values  the 'arguments' object of the function\n\t *  @param  {Array} keys the names of the arguments as they\n\t *                                 should appear in the options object\n\t *  @param {Object=} defaults optional defaults to mixin to the returned \n\t *                            options object                              \n\t *  @return {Object}       the options object with the names mapped to the arguments\n\t */\n\tTone.prototype.optionsObject = function(values, keys, defaults){\n\t\tvar options = {};\n\t\tif (values.length === 1 && this.isObject(values[0])){\n\t\t\toptions = values[0];\n\t\t} else {\n\t\t\tfor (var i = 0; i < keys.length; i++){\n\t\t\t\toptions[keys[i]] = values[i];\n\t\t\t}\n\t\t}\n\t\tif (!this.isUndef(defaults)){\n\t\t\treturn this.defaultArg(options, defaults);\n\t\t} else {\n\t\t\treturn options;\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// TYPE CHECKING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  test if the arg is undefined\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is undefined\n\t *  @function\n\t */\n\tTone.prototype.isUndef = isUndef;\n\n\t/**\n\t *  test if the arg is a function\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is a function\n\t *  @function\n\t */\n\tTone.prototype.isFunction = isFunction;\n\n\t/**\n\t *  Test if the argument is a number.\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is a number\n\t */\n\tTone.prototype.isNumber = function(arg){\n\t\treturn (typeof arg === \"number\");\n\t};\n\n\t/**\n\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is an object literal.\n\t */\n\tTone.prototype.isObject = function(arg){\n\t\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n\t};\n\n\t/**\n\t *  Test if the argument is a boolean.\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is a boolean\n\t */\n\tTone.prototype.isBoolean = function(arg){\n\t\treturn (typeof arg === \"boolean\");\n\t};\n\n\t/**\n\t *  Test if the argument is an Array\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is an array\n\t */\n\tTone.prototype.isArray = function(arg){\n\t\treturn (Array.isArray(arg));\n\t};\n\n\t/**\n\t *  Test if the argument is a string.\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is a string\n\t */\n\tTone.prototype.isString = function(arg){\n\t\treturn (typeof arg === \"string\");\n\t};\n\n \t/**\n\t *  An empty function.\n\t *  @static\n\t */\n\tTone.noOp = function(){};\n\n\t/**\n\t *  Make the property not writable. Internal use only. \n\t *  @private\n\t *  @param  {string}  property  the property to make not writable\n\t */\n\tTone.prototype._readOnly = function(property){\n\t\tif (Array.isArray(property)){\n\t\t\tfor (var i = 0; i < property.length; i++){\n\t\t\t\tthis._readOnly(property[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tObject.defineProperty(this, property, { \n\t\t\t\twritable: false,\n\t\t\t\tenumerable : true,\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t *  Make an attribute writeable. Interal use only. \n\t *  @private\n\t *  @param  {string}  property  the property to make writable\n\t */\n\tTone.prototype._writable = function(property){\n\t\tif (Array.isArray(property)){\n\t\t\tfor (var i = 0; i < property.length; i++){\n\t\t\t\tthis._writable(property[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tObject.defineProperty(this, property, { \n\t\t\t\twritable: true,\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * Possible play states. \n\t * @enum {string}\n\t */\n\tTone.State = {\n\t\tStarted : \"started\",\n\t\tStopped : \"stopped\",\n\t\tPaused : \"paused\",\n \t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// GAIN CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Equal power gain scale. Good for cross-fading.\n\t *  @param  {NormalRange} percent (0-1)\n\t *  @return {Number}         output gain (0-1)\n\t */\n\tTone.prototype.equalPowerScale = function(percent){\n\t\tvar piFactor = 0.5 * Math.PI;\n\t\treturn Math.sin(percent * piFactor);\n\t};\n\n\t/**\n\t *  Convert decibels into gain.\n\t *  @param  {Decibels} db\n\t *  @return {Number}   \n\t */\n\tTone.prototype.dbToGain = function(db) {\n\t\treturn Math.pow(2, db / 6);\n\t};\n\n\t/**\n\t *  Convert gain to decibels.\n\t *  @param  {Number} gain (0-1)\n\t *  @return {Decibels}   \n\t */\n\tTone.prototype.gainToDb = function(gain) {\n\t\treturn  20 * (Math.log(gain) / Math.LN10);\n\t};\n\n\t/**\n\t *  Convert an interval (in semitones) to a frequency ratio.\n\t *  @param  {Interval} interval the number of semitones above the base note\n\t *  @return {number}          the frequency ratio\n\t *  @example\n\t * tone.intervalToFrequencyRatio(0); // 1\n\t * tone.intervalToFrequencyRatio(12); // 2\n\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t */\n\tTone.prototype.intervalToFrequencyRatio = function(interval){\n\t\treturn Math.pow(2,(interval/12));\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTIMING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the current time of the AudioContext clock.\n\t *  @return {Number} the currentTime from the AudioContext\n\t */\n\tTone.prototype.now = function(){\n\t\treturn this.context.currentTime;\n\t};\n\n\t/**\n\t *  Return the current time of the AudioContext clock.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @static\n\t */\n\tTone.now = function(){\n\t\treturn Tone.context.currentTime;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tINHERITANCE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t *  to inherit the parent's properties, make sure to call \n\t *  Parent.call(this) in the child's constructor\n\t *\n\t *  based on closure library's inherit function\n\t *\n\t *  @static\n\t *  @param  {function} \tchild  \n\t *  @param  {function=} parent (optional) parent to inherit from\n\t *                             if no parent is supplied, the child\n\t *                             will inherit from Tone\n\t */\n\tTone.extend = function(child, parent){\n\t\tif (isUndef(parent)){\n\t\t\tparent = Tone;\n\t\t}\n\t\tfunction TempConstructor(){}\n\t\tTempConstructor.prototype = parent.prototype;\n\t\tchild.prototype = new TempConstructor();\n\t\t/** @override */\n\t\tchild.prototype.constructor = child;\n\t\tchild._super = parent;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tCONTEXT\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  array of callbacks to be invoked when a new context is added\n\t *  @private \n\t *  @private\n\t */\n\tvar newContextCallbacks = [];\n\n\t/**\n\t *  invoke this callback when a new context is added\n\t *  will be invoked initially with the first context\n\t *  @private \n\t *  @static\n\t *  @param {function(AudioContext)} callback the callback to be invoked\n\t *                                           with the audio context\n\t */\n\tTone._initAudioContext = function(callback){\n\t\t//invoke the callback with the existing AudioContext\n\t\tcallback(Tone.context);\n\t\t//add it to the array\n\t\tnewContextCallbacks.push(callback);\n\t};\n\n\t/**\n\t *  Tone automatically creates a context on init, but if you are working\n\t *  with other libraries which also create an AudioContext, it can be\n\t *  useful to set your own. If you are going to set your own context, \n\t *  be sure to do it at the start of your code, before creating any objects.\n\t *  @static\n\t *  @param {AudioContext} ctx The new audio context to set\n\t */\n\tTone.setContext = function(ctx){\n\t\t//set the prototypes\n\t\tTone.prototype.context = ctx;\n\t\tTone.context = ctx;\n\t\t//invoke all the callbacks\n\t\tfor (var i = 0; i < newContextCallbacks.length; i++){\n\t\t\tnewContextCallbacks[i](ctx);\n\t\t}\n\t};\n\n\t//setup the context\n\tTone._initAudioContext(function(audioContext){\n\t\t//set the blockTime\n\t\tTone.prototype.blockTime = 128 / audioContext.sampleRate;\n\t\tTone.prototype.sampleTime = 1 / audioContext.sampleRate;\n\t\t_silentNode = audioContext.createGain();\n\t\t_silentNode.gain.value = 0;\n\t\t_silentNode.connect(audioContext.destination);\n\t});\n\n\tTone.version = \"r8-dev\";\n\n\tconsole.log(\"%c * Tone.js \" + Tone.version + \" * \", \"background: #000; color: #fff\");\n\n\treturn Tone;\n}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t *         additional unit conversion functionality. It also\n\t *         serves as a base-class for classes which have a single,\n\t *         automatable parameter. \n\t *  @extends {Tone}\n\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t *  @param  {Tone.Type} units The units of the audio param.\n\t *  @param  {Boolean} convert If the param should be converted.\n\t */\n\tTone.Param = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"param\", \"units\", \"convert\"], Tone.Param.defaults);\n\n\t\t/**\n\t\t *  The native parameter to control\n\t\t *  @type  {AudioParam}\n\t\t *  @private\n\t\t */\n\t\tthis._param = this.input = options.param;\n\n\t\t/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */\n\t\tthis.units = options.units;\n\n\t\t/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */\n\t\tthis.convert = options.convert;\n\n\t\t/**\n\t\t *  True if the signal value is being overridden by \n\t\t *  a connected signal.\n\t\t *  @readOnly\n\t\t *  @type  {boolean}\n\t\t *  @private\n\t\t */\n\t\tthis.overridden = false;\n\n\t\tif (!this.isUndef(options.value)){\n\t\t\tthis.value = options.value;\n\t\t}\n\t};\n\n\tTone.extend(Tone.Param);\n\t\n\t/**\n\t *  Defaults\n\t *  @type  {Object}\n\t *  @const\n\t */\n\tTone.Param.defaults = {\n\t\t\"units\" : Tone.Type.Default,\n\t\t\"convert\" : true,\n\t\t\"param\" : undefined\n\t};\n\n\t/**\n\t * The current value of the parameter. \n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.Param.prototype, \"value\", {\n\t\tget : function(){\n\t\t\treturn this._toUnits(this._param.value);\n\t\t},\n\t\tset : function(value){\n\t\t\tvar convertedVal = this._fromUnits(value);\n\t\t\tthis._param.cancelScheduledValues(0);\n\t\t\tthis._param.value = convertedVal;\n\t\t}\n\t});\n\n\t/**\n\t *  Convert the given value from the type specified by Tone.Param.units\n\t *  into the destination value (such as Gain or Frequency).\n\t *  @private\n\t *  @param  {*} val the value to convert\n\t *  @return {number}     the number which the value should be set to\n\t */\n\tTone.Param.prototype._fromUnits = function(val){\n\t\tif (this.convert || this.isUndef(this.convert)){\n\t\t\tswitch(this.units){\n\t\t\t\tcase Tone.Type.Time: \n\t\t\t\t\treturn this.toSeconds(val);\n\t\t\t\tcase Tone.Type.Frequency: \n\t\t\t\t\treturn this.toFrequency(val);\n\t\t\t\tcase Tone.Type.Decibels: \n\t\t\t\t\treturn this.dbToGain(val);\n\t\t\t\tcase Tone.Type.NormalRange: \n\t\t\t\t\treturn Math.min(Math.max(val, 0), 1);\n\t\t\t\tcase Tone.Type.AudioRange: \n\t\t\t\t\treturn Math.min(Math.max(val, -1), 1);\n\t\t\t\tcase Tone.Type.Positive: \n\t\t\t\t\treturn Math.max(val, 0);\n\t\t\t\tdefault:\n\t\t\t\t\treturn val;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t};\n\n\t/**\n\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t * @private\n\t * @param  {number} val the value to convert\n\t * @return {number}\n\t */\n\tTone.Param.prototype._toUnits = function(val){\n\t\tif (this.convert || this.isUndef(this.convert)){\n\t\t\tswitch(this.units){\n\t\t\t\tcase Tone.Type.Decibels: \n\t\t\t\t\treturn this.gainToDb(val);\n\t\t\t\tdefault:\n\t\t\t\t\treturn val;\n\t\t\t}\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t};\n\n\t/**\n\t *  the minimum output value\n\t *  @type {Number}\n\t *  @private\n\t */\n\tTone.Param.prototype._minOutput = 0.00001;\n\n\t/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */\n\tTone.Param.prototype.setValueAtTime = function(value, time){\n\t\tvalue = this._fromUnits(value);\n\t\tthis._param.setValueAtTime(value, this.toSeconds(time));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Creates a schedule point with the current value at the current time.\n\t *  This is useful for creating an automation anchor point in order to \n\t *  schedule changes from the current value. \n\t *\n\t *  @param {number=} now (Optionally) pass the now value in. \n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.setRampPoint = function(now){\n\t\tnow = this.defaultArg(now, this.now());\n\t\tvar currentVal = this._param.value;\n\t\t// exponentialRampToValueAt cannot ever ramp from or to 0\n\t\t// More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2\n\t\tif (currentVal === 0){\n\t\t\tcurrentVal = this._minOutput;\n\t\t}\n\t\tthis._param.setValueAtTime(currentVal, now);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.linearRampToValueAtTime = function(value, endTime){\n\t\tvalue = this._fromUnits(value);\n\t\tthis._param.linearRampToValueAtTime(value, this.toSeconds(endTime));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.exponentialRampToValueAtTime = function(value, endTime){\n\t\tvalue = this._fromUnits(value);\n\t\tvalue = Math.max(this._minOutput, value);\n\t\tthis._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds. \n\t * signal.exponentialRampToValue(2, 4);\n\t */\n\tTone.Param.prototype.exponentialRampToValue = function(value, rampTime, startTime){\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an linear continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds. \n\t * signal.linearRampToValue(4, 3);\n\t */\n\tTone.Param.prototype.linearRampToValue = function(value, rampTime, startTime){\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis.setRampPoint(startTime);\n\t\tthis.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.Param} this \n\t */\n\tTone.Param.prototype.setTargetAtTime = function(value, startTime, timeConstant){\n\t\tvalue = this._fromUnits(value);\n\t\t// The value will never be able to approach without timeConstant > 0.\n\t\t// http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t\t// is described. 0 results in a division by 0.\n\t\tvalue = Math.max(this._minOutput, value);\n\t\ttimeConstant = Math.max(this._minOutput, timeConstant);\n\t\tthis._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Sets an array of arbitrary parameter values starting at the given time\n\t *  for the given duration.\n\t *  \t\n\t *  @param {Array} values    \n\t *  @param {Time} startTime \n\t *  @param {Time} duration  \n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.setValueCurveAtTime = function(values, startTime, duration){\n\t\tfor (var i = 0; i < values.length; i++){\n\t\t\tvalues[i] = this._fromUnits(values[i]);\n\t\t}\n\t\tthis._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.cancelScheduledValues = function(startTime){\n\t\tthis._param.cancelScheduledValues(this.toSeconds(startTime));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Ramps to the given value over the duration of the rampTime. \n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} rampTime \tThe time that it takes the \n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially \n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */\n\tTone.Param.prototype.rampTo = function(value, rampTime, startTime){\n\t\trampTime = this.defaultArg(rampTime, 0);\n\t\tif (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels){\n\t\t\tthis.exponentialRampToValue(value, rampTime, startTime);\n\t\t} else {\n\t\t\tthis.linearRampToValue(value, rampTime, startTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @returns {Tone.Param} this\n\t */\n\tTone.Param.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._param = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Param;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(6), __webpack_require__(8), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\t\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tTYPES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t * Units which a value can take on.\n\t * @enum {String}\n\t */\n\tTone.Type = {\n\t\t/** \n\t\t *  Default units\n\t\t *  @typedef {Default}\n\t\t */\n\t\tDefault : \"number\",\n\t\t/**\n\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t *\n\t\t *  <ul>\n\t\t *  <li>Numbers, which will be taken literally as the time (in seconds).</li>\n\t\t *  <li>Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.</li>\n\t\t *  <li>TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times \n\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.</li>\n\t\t *  <li>Frequency, (\"8hz\") is converted to the length of the cycle in seconds.</li>\n\t\t *  <li>Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \n\t\t *  \"the current time plus whatever expression follows\".</li>\n\t\t *  <li>Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined \n\t\t *  into a mathematical expression which will be evaluated to compute the desired time.</li>\n\t\t *  <li>No Argument, for methods which accept time, no argument will be interpreted as \n\t\t *  \"now\" (i.e. the currentTime).</li>\n\t\t *  </ul>\n\t\t *  \n\t\t *  @typedef {Time}\n\t\t */\n\t\tTime : \"time\",\n\t\t/**\n\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t *  values are converted to frequency instead of seconds. A number\n\t\t *  is taken literally as the value in hertz. Additionally any of the \n\t\t *  Time encodings can be used. Note names in the form\n\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t *  frequency value. \n\t\t *  @typedef {Frequency}\n\t\t */\n\t\tFrequency : \"frequency\",\n\t\t/**\n\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. \n\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t *  @typedef {TransportTime}\n\t\t */\n\t\tTransportTime : \"transportTime\",\n\t\t/** \n\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t *  the smallest unit of time that the Transport supports.\n\t\t *  @typedef {Ticks}\n\t\t */\n\t\tTicks : \"ticks\",\n\t\t/** \n\t\t *  Normal values are within the range [0, 1].\n\t\t *  @typedef {NormalRange}\n\t\t */\n\t\tNormalRange : \"normalRange\",\n\t\t/** \n\t\t *  AudioRange values are between [-1, 1].\n\t\t *  @typedef {AudioRange}\n\t\t */\n\t\tAudioRange : \"audioRange\",\n\t\t/** \n\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels \n\t\t *  means no change in volume. -10db is approximately half as loud and 10db \n\t\t *  is twice is loud. \n\t\t *  @typedef {Decibels}\n\t\t */\n\t\tDecibels : \"db\",\n\t\t/** \n\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t *  @typedef {Interval}\n\t\t */\n\t\tInterval : \"interval\",\n\t\t/** \n\t\t *  Beats per minute. \n\t\t *  @typedef {BPM}\n\t\t */\n\t\tBPM : \"bpm\",\n\t\t/** \n\t\t *  The value must be greater than or equal to 0.\n\t\t *  @typedef {Positive}\n\t\t */\n\t\tPositive : \"positive\",\n\t\t/** \n\t\t *  A cent is a hundredth of a semitone. \n\t\t *  @typedef {Cents}\n\t\t */\n\t\tCents : \"cents\",\n\t\t/** \n\t\t *  Angle between 0 and 360. \n\t\t *  @typedef {Degrees}\n\t\t */\n\t\tDegrees : \"degrees\",\n\t\t/** \n\t\t *  A number representing a midi note.\n\t\t *  @typedef {MIDI}\n\t\t */\n\t\tMIDI : \"midi\",\n\t\t/** \n\t\t *  A colon-separated representation of time in the form of\n\t\t *  Bars:Beats:Sixteenths. \n\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t */\n\t\tBarsBeatsSixteenths : \"barsBeatsSixteenths\",\n\t\t/** \n\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t *  Audio is typically sampled 44100 times per second. \n\t\t *  @typedef {Samples}\n\t\t */\n\t\tSamples : \"samples\",\n\t\t/** \n\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t *  @typedef {Hertz}\n\t\t */\n\t\tHertz : \"hertz\",\n\t\t/** \n\t\t *  A frequency represented by a letter name, \n\t\t *  accidental and octave. This system is known as\n\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t *  @typedef {Note}\n\t\t */\n\t\tNote : \"note\",\n\t\t/** \n\t\t *  One millisecond is a thousandth of a second. \n\t\t *  @typedef {Milliseconds}\n\t\t */\n\t\tMilliseconds : \"milliseconds\",\n\t\t/** \n\t\t *  Seconds are the time unit of the AudioContext. In the end, \n\t\t *  all values need to be evaluated to seconds. \n\t\t *  @typedef {Seconds}\n\t\t */\n\t\tSeconds : \"seconds\",\n\t\t/** \n\t\t *  A string representing a duration relative to a measure. \n\t\t *  <ul>\n\t\t *  \t<li>\"4n\" = quarter note</li>\n\t\t *   \t<li>\"2m\" = two measures</li>\n\t\t *    \t<li>\"8t\" = eighth-note triplet</li>\n\t\t *  </ul>\n\t\t *  @typedef {Notation}\n\t\t */\n\t\tNotation : \"notation\",\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// AUGMENT TONE's PROTOTYPE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Convert Time into seconds.\n\t *  \n\t *  Unlike the method which it overrides, this takes into account \n\t *  transporttime and musical notation.\n\t *\n\t *  Time : 1.40\n\t *  Notation: 4n|1m|2t\n\t *  Now Relative: +3n\n\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t *\n\t *  @param  {Time} time \n\t *  @return {Seconds} \n\t */\n\tTone.prototype.toSeconds = function(time){\n\t\tif (this.isNumber(time)){\n\t\t\treturn time;\n\t\t} else if (this.isString(time) || this.isUndef(time)){\n\t\t\treturn (new Tone.Time(time)).eval();\n\t\t} else if (time instanceof Tone.TransportTime){\n\t\t\treturn time.toSeconds();\n\t\t} else if (time instanceof Tone.Time){\n\t\t\treturn time.eval();\n\t\t} else if (time instanceof Tone.Frequency){\n\t\t\treturn time.toSeconds();\n\t\t}\n\t};\n\n\t/**\n\t *  Convert a frequency representation into a number.\n\t *  @param  {Frequency} freq \n\t *  @return {Hertz}      the frequency in hertz\n\t */\n\tTone.prototype.toFrequency = function(freq){\n\t\tif (this.isNumber(freq)){\n\t\t\treturn freq;\n\t\t} else if (this.isString(freq) || this.isUndef(freq)){\n\t\t\treturn (new Tone.Frequency(freq)).eval();\n\t\t} else if (freq instanceof Tone.Frequency){\n\t\t\treturn freq.eval();\n\t\t} else if (freq instanceof Tone.Time){\n\t\t\treturn freq.toFrequency();\n\t\t}\n\t};\n\n\t/**\n\t *  Convert a time representation into ticks.\n\t *  @param  {Time} time\n\t *  @return {Ticks}  the time in ticks\n\t */\n\tTone.prototype.toTicks = function(time){\n\t\tif (this.isNumber(time) || this.isString(time) || this.isUndef(time)){\n\t\t\treturn (new Tone.TransportTime(time)).eval();\n\t\t} else if (time instanceof Tone.Frequency){\n\t\t\treturn time.toTicks();\n\t\t} else if (time instanceof Tone.TransportTime){\n\t\t\treturn time.eval();\n\t\t} else if (time instanceof Tone.Time){\n\t\t\treturn time.toTicks();\n\t\t}\n\t};\n\n\treturn Tone;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t/**\n\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t *         Eventually all time values are evaluated to seconds\n\t *         using the `eval` method. Tone.Time can be constructed\n\t *         with or without the `new` keyword. Tone.Time can be passed\n\t *         into the parameter of any method which takes time as an argument. \n\t *  @constructor\n\t *  @extends {Tone.TimeBase}\n\t *  @param  {String|Number}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t * t.mult(4); // multiply that value by 4\n\t * t.toNotation(); //returns \"1m\"\n\t */\n\tTone.Time = function(val, units){\n\t\tif (this instanceof Tone.Time){\n\n\t\t\t/**\n\t\t\t *  If the current clock time should\n\t\t\t *  be added to the output\n\t\t\t *  @type  {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._plusNow = false;\n\t\t\t\n\t\t\tTone.TimeBase.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.Time(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Time, Tone.TimeBase);\n\n\t//clone the expressions so that \n\t//we can add more without modifying the original\n\tTone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\n\t/*\n\t *  Adds an additional unary expression\n\t *  which quantizes values to the next subdivision\n\t *  @type {Object}\n\t *  @private\n\t */\n\tTone.Time.prototype._unaryExpressions.quantize = {\n\t\tregexp : /^@/,\n\t\tmethod : function(rh){\n\t\t\treturn Tone.Transport.nextSubdivision(rh());\n\t\t}\n\t};\n\n\t/*\n\t *  Adds an additional unary expression\n\t *  which adds the current clock time.\n\t *  @type {Object}\n\t *  @private\n\t */\n\tTone.Time.prototype._unaryExpressions.now = {\n\t\tregexp : /^\\+/,\n\t\tmethod : function(lh){\n\t\t\tthis._plusNow = true;\n\t\t\treturn lh();\n\t\t}\n\t};\n\n\t/**\n\t *  Quantize the time by the given subdivision. Optionally add a\n\t *  percentage which will move the time value towards the ideal\n\t *  quantized value by that percentage. \n\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t *                                   towards the quantized value by\n\t *                                   a percentage.\n\t *  @return  {Tone.Time}  this\n\t *  @example\n\t * Tone.Time(21).quantize(2).eval() //returns 22\n\t * Tone.Time(0.6).quantize(\"4n\", 0.5).eval() //returns 0.55\n\t */\n\tTone.Time.prototype.quantize = function(subdiv, percent){\n\t\tpercent = this.defaultArg(percent, 1);\n\t\tthis._expr = function(expr, subdivision, percent){\n\t\t\texpr = expr();\n\t\t\tsubdivision = subdivision.toSeconds();\n\t\t\tvar multiple = Math.round(expr / subdivision);\n\t\t\tvar ideal = multiple * subdivision;\n\t\t\tvar diff = ideal - expr;\n\t\t\treturn expr + diff * percent;\n\t\t}.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Adds the clock time to the time expression at the \n\t *  moment of evaluation. \n\t *  @return  {Tone.Time}  this\n\t */\n\tTone.Time.prototype.addNow = function(){\n\t\tthis._plusNow = true;\n\t\treturn this;\n\t};\n\n\t/**\n\t *  @override\n\t *  Override the default value return when no arguments are passed in.\n\t *  The default value is 'now'\n\t *  @private\n\t */\n\tTone.Time.prototype._defaultExpr = function(){\n\t\tthis._plusNow = true;\n\t\treturn this._noOp;\n\t};\n\n\n\t//CONVERSIONS//////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t *  @return {Notation} \n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t */\n\tTone.Time.prototype.toNotation = function(){\n\t\tvar time = this.toSeconds();\n\t\tvar testNotations = [\"1m\", \"2n\", \"4n\", \"8n\", \"16n\", \"32n\", \"64n\", \"128n\"];\n\t\tvar retNotation = this._toNotationHelper(time, testNotations);\n\t\t//try the same thing but with tripelets\n\t\tvar testTripletNotations = [\"1m\", \"2n\", \"2t\", \"4n\", \"4t\", \"8n\", \"8t\", \"16n\", \"16t\", \"32n\", \"32t\", \"64n\", \"64t\", \"128n\"];\n\t\tvar retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t\t//choose the simpler expression of the two\n\t\tif (retTripletNotation.split(\"+\").length < retNotation.split(\"+\").length){\n\t\t\treturn retTripletNotation;\n\t\t} else {\n\t\t\treturn retNotation;\n\t\t}\n\t};\n\n\t/**\n\t *  Helper method for Tone.toNotation\n\t *  @param {Number} units \n\t *  @param {Array} testNotations\n\t *  @return {String}\n\t *  @private\n\t */\n\tTone.Time.prototype._toNotationHelper = function(units, testNotations){\n\t\t//the threshold is the last value in the array\n\t\tvar threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t\tvar retNotation = \"\";\n\t\tfor (var i = 0; i < testNotations.length; i++){\n\t\t\tvar notationTime = this._notationToUnits(testNotations[i]);\n\t\t\t//account for floating point errors (i.e. round up if the value is 0.999999)\n\t\t\tvar multiple = units / notationTime;\n\t\t\tvar floatingPointError = 0.000001;\n\t\t\tif (1 - multiple % 1 < floatingPointError){\n\t\t\t\tmultiple += floatingPointError;\n\t\t\t}\n\t\t\tmultiple = Math.floor(multiple);\n\t\t\tif (multiple > 0){\n\t\t\t\tif (multiple === 1){\n\t\t\t\t\tretNotation += testNotations[i];\n\t\t\t\t} else {\n\t\t\t\t\tretNotation += multiple.toString() + \"*\" + testNotations[i];\n\t\t\t\t}\n\t\t\t\tunits -= multiple * notationTime;\n\t\t\t\tif (units < threshold){\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tretNotation += \" + \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (retNotation === \"\"){\n\t\t\tretNotation = \"0\";\n\t\t}\n\t\treturn retNotation;\n\t};\n\n\t/**\n\t *  Convert a notation value to the current units\n\t *  @param  {Notation}  notation \n\t *  @return  {Number} \n\t *  @private\n\t */\n\tTone.Time.prototype._notationToUnits = function(notation){\n\t\tvar primaryExprs = this._primaryExpressions;\n\t\tvar notationExprs = [primaryExprs.n, primaryExprs.t, primaryExprs.m];\n\t\tfor (var i = 0; i < notationExprs.length; i++){\n\t\t\tvar expr = notationExprs[i];\n\t\t\tvar match = notation.match(expr.regexp);\n\t\t\tif (match){\n\t\t\t\treturn expr.method.call(this, match[1]);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t *  @return  {BarsBeatsSixteenths}\n\t */\n\tTone.Time.prototype.toBarsBeatsSixteenths = function(){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = this.toSeconds() / quarterTime;\n\t\tvar measures = Math.floor(quarters / this._timeSignature());\n\t\tvar sixteenths = (quarters % 1) * 4;\n\t\tquarters = Math.floor(quarters) % this._timeSignature();\n\t\tsixteenths = sixteenths.toString();\n\t\tif (sixteenths.length > 3){\n\t\t\tsixteenths = parseFloat(sixteenths).toFixed(3);\n\t\t}\n\t\tvar progress = [measures, quarters, sixteenths];\n\t\treturn progress.join(\":\");\n\t};\n\n\t/**\n\t *  Return the time in ticks.\n\t *  @return  {Ticks}\n\t */\n\tTone.Time.prototype.toTicks = function(){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = this.eval() / quarterTime;\n\t\treturn Math.floor(quarters * Tone.Transport.PPQ);\n\t};\n\n\t/**\n\t *  Return the time in samples\n\t *  @return  {Samples}  \n\t */\n\tTone.Time.prototype.toSamples = function(){\n\t\treturn this.toSeconds() * this.context.sampleRate;\n\t};\n\n\t/**\n\t *  Return the time as a frequency value\n\t *  @return  {Frequency} \n\t *  @example\n\t * Tone.Time(2).toFrequency(); //0.5\n\t */\n\tTone.Time.prototype.toFrequency = function(){\n\t\treturn 1/this.eval();\n\t};\n\n\t/**\n\t *  Return the time in seconds.\n\t *  @return  {Seconds} \n\t */\n\tTone.Time.prototype.toSeconds = function(){\n\t\treturn this._expr();\n\t};\n\n\t/**\n\t *  Return the time in seconds.\n\t *  @return  {Seconds} \n\t */\n\tTone.Time.prototype.eval = function(){\n\t\tvar val = this._expr();\n\t\treturn val + (this._plusNow?this.now():0);\n\t};\n\n\treturn Tone.Time;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t/**\n\t *  @class Tone.TimeBase is a flexible encoding of time\n\t *         which can be evaluated to and from a string.\n\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t *  @extends {Tone}\n\t *  @param  {Time}  val    The time value as a number or string\n\t *  @param  {String=}  units  Unit values\n\t *  @example\n\t * Tone.TimeBase(4, \"n\")\n\t * Tone.TimeBase(2, \"t\")\n\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t * Tone.TimeBase(\"2t + 1m\");\n\t */\n\tTone.TimeBase = function(val, units){\n\n\t\t//allows it to be constructed with or without 'new'\n\t\tif (this instanceof Tone.TimeBase) {\n\n\t\t\t/**\n\t\t\t *  Any expressions parsed from the Time\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t\t\tthis._expr = this._noOp;\n\n\t\t\t//default units\n\t\t\tunits = this.defaultArg(units, this._defaultUnits);\n\n\t\t\t//get the value from the given time\n\t\t\tif (this.isString(val)){\n\t\t\t\tthis._expr = this._parseExprString(val);\n\t\t\t} else if (this.isNumber(val)){\n\t\t\t\tvar method = this._primaryExpressions[units].method;\n\t\t\t\tthis._expr = method.bind(this, val);\n\t\t\t} else if (this.isUndef(val)){\n\t\t\t\t//default expression\n\t\t\t\tthis._expr = this._defaultExpr();\n\t\t\t} else if (val instanceof Tone.TimeBase){\n\t\t\t\tthis._expr = val._expr;\n\t\t\t}\n\t\t} else {\n\n\t\t\treturn new Tone.TimeBase(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.TimeBase);\n\n\t/**\n\t *  Repalce the current time value with the value\n\t *  given by the expression string.\n\t *  @param  {String}  exprString\n\t *  @return {Tone.TimeBase} this\n\t */\n\tTone.TimeBase.prototype.set = function(exprString){\n\t\tthis._expr = this._parseExprString(exprString);\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tABSTRACT SYNTAX TREE PARSER\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  All the primary expressions.\n\t *  @private\n\t *  @type  {Object}\n\t */\n\tTone.TimeBase.prototype._primaryExpressions = {\n\t\t\"n\" : {\n\t\t\tregexp : /^(\\d+)n/i,\n\t\t\tmethod : function(value){\n\t\t\t\tvalue = parseInt(value);\n\t\t\t\tif (value === 1){\n\t\t\t\t\treturn this._beatsToUnits(this._timeSignature());\n\t\t\t\t} else {\n\t\t\t\t\treturn this._beatsToUnits(4 / value);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"t\" : {\n\t\t\tregexp : /^(\\d+)t/i,\n\t\t\tmethod : function(value){\n\t\t\t\tvalue = parseInt(value);\n\t\t\t\treturn this._beatsToUnits(8 / (parseInt(value) * 3));\n\t\t\t}\n\t\t},\n\t\t\"m\" : {\n\t\t\tregexp : /^(\\d+)m/i,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t\t\t}\n\t\t},\n\t\t\"i\" : {\n\t\t\tregexp : /^(\\d+)i/i,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._ticksToUnits(parseInt(value));\n\t\t\t}\n\t\t},\n\t\t\"hz\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?)hz/i,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._frequencyToUnits(parseFloat(value));\n\t\t\t}\n\t\t},\n\t\t\"tr\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\tmethod : function(m, q, s){\n\t\t\t\tvar total = 0;\n\t\t\t\tif (m && m !== \"0\"){\n\t\t\t\t\ttotal += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t\t\t\t}\n\t\t\t\tif (q && q !== \"0\"){\n\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(q));\n\t\t\t\t}\n\t\t\t\tif (s && s !== \"0\"){\n\t\t\t\t\ttotal += this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t\t}\n\t\t\t\treturn total;\n\t\t\t}\n\t\t},\n\t\t\"s\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?s)/,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._secondsToUnits(parseFloat(value));\n\t\t\t}\n\t\t},\n\t\t\"samples\" : {\n\t\t\tregexp : /^(\\d+)samples/,\n\t\t\tmethod : function(value){\n\t\t\t\treturn parseInt(value) / this.context.sampleRate;\n\t\t\t}\n\t\t},\n\t\t\"default\" : {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?)/,\n\t\t\tmethod : function(value){\n\t\t\t\treturn this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  All the binary expressions that TimeBase can accept.\n\t *  @private\n\t *  @type  {Object}\n\t */\n\tTone.TimeBase.prototype._binaryExpressions = {\n\t\t\"+\" : {\n\t\t\tregexp : /^\\+/,\n\t\t\tprecedence : 2,\n\t\t\tmethod : function(lh, rh){\n\t\t\t\treturn lh() + rh();\n\t\t\t}\n\t\t},\n\t\t\"-\" : {\n\t\t\tregexp : /^\\-/,\n\t\t\tprecedence : 2,\n\t\t\tmethod : function(lh, rh){\n\t\t\t\treturn lh() - rh();\n\t\t\t}\n\t\t},\n\t\t\"*\" : {\n\t\t\tregexp : /^\\*/,\n\t\t\tprecedence : 1,\n\t\t\tmethod : function(lh, rh){\n\t\t\t\treturn lh() * rh();\n\t\t\t}\n\t\t},\n\t\t\"/\" : {\n\t\t\tregexp : /^\\//,\n\t\t\tprecedence : 1,\n\t\t\tmethod : function(lh, rh){\n\t\t\t\treturn lh() / rh();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  All the unary expressions.\n\t *  @private\n\t *  @type  {Object}\n\t */\n\tTone.TimeBase.prototype._unaryExpressions = {\n\t\t\"neg\" : {\n\t\t\tregexp : /^\\-/,\n\t\t\tmethod : function(lh){\n\t\t\t\treturn -lh();\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  Syntactic glue which holds expressions together\n\t *  @private\n\t *  @type  {Object}\n\t */\n\tTone.TimeBase.prototype._syntaxGlue = {\n\t\t\"(\" : {\n\t\t\tregexp : /^\\(/\n\t\t},\n\t\t\")\" : {\n\t\t\tregexp : /^\\)/\n\t\t}\n\t};\n\n\t/**\n\t *  tokenize the expression based on the Expressions object\n\t *  @param   {string} expr \n\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._tokenize = function(expr){\n\t\tvar position = -1;\n\t\tvar tokens = [];\n\n\t\twhile(expr.length > 0){\n\t\t\texpr = expr.trim();\n\t\t\tvar token = getNextToken(expr, this);\n\t\t\ttokens.push(token);\n\t\t\texpr = expr.substr(token.value.length);\n\t\t}\n\n\t\tfunction getNextToken(expr, context){\n\t\t\tvar expressions = [\"_binaryExpressions\", \"_unaryExpressions\", \"_primaryExpressions\", \"_syntaxGlue\"];\n\t\t\tfor (var i = 0; i < expressions.length; i++){\n\t\t\t\tvar group = context[expressions[i]];\n\t\t\t\tfor (var opName in group){\n\t\t\t\t\tvar op = group[opName];\n\t\t\t\t\tvar reg = op.regexp;\n\t\t\t\t\tvar match = expr.match(reg);\n\t\t\t\t\tif (match !== null){\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tmethod : op.method,\n\t\t\t\t\t\t\tprecedence : op.precedence,\n\t\t\t\t\t\t\tregexp : op.regexp,\n\t\t\t\t\t\t\tvalue : match[0],\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new SyntaxError(\"Tone.TimeBase: Unexpected token \"+expr);\n\t\t}\n\n\t\treturn {\n\t\t\tnext : function(){\n\t\t\t\treturn tokens[++position];\n\t\t\t},\n\t\t\tpeek : function(){\n\t\t\t\treturn tokens[position + 1];\n\t\t\t}\n\t\t};\n\t};\n\n\t/**\n\t *  Given a token, find the value within the groupName\n\t *  @param {Object} token\n\t *  @param {String} groupName\n\t *  @param {Number} precedence\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._matchGroup = function(token, group, prec) {\n\t\tvar ret = false;\n\t\tif (!this.isUndef(token)){\n\t\t\tfor (var opName in group){\n\t\t\t\tvar op = group[opName];\n\t\t\t\tif (op.regexp.test(token.value)){\n\t\t\t\t\tif (!this.isUndef(prec)){\n\t\t\t\t\t\tif(op.precedence === prec){\t\n\t\t\t\t\t\t\treturn op;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn op;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t};\n\n\t/**\n\t *  Match a binary expression given the token and the precedence\n\t *  @param {Lexer} lexer\n\t *  @param {Number} precedence\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._parseBinary = function(lexer, precedence){\n\t\tif (this.isUndef(precedence)){\n\t\t\tprecedence = 2;\n\t\t}\n\t\tvar expr;\n\t\tif (precedence < 0){\n\t\t\texpr = this._parseUnary(lexer);\n\t\t} else {\n\t\t\texpr = this._parseBinary(lexer, precedence - 1);\n\t\t}\n\t\tvar token = lexer.peek();\n\t\twhile (token && this._matchGroup(token, this._binaryExpressions, precedence)){\n\t\t\ttoken = lexer.next();\n\t\t\texpr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t\t\ttoken = lexer.peek();\n\t\t}\n\t\treturn expr;\n\t};\n\n\t/**\n\t *  Match a unary expression.\n\t *  @param {Lexer} lexer\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._parseUnary = function(lexer){\n\t\tvar token, expr;\n\t\ttoken = lexer.peek();\n\t\tvar op = this._matchGroup(token, this._unaryExpressions);\n\t\tif (op) {\n\t\t\ttoken = lexer.next();\n\t\t\texpr = this._parseUnary(lexer);\n\t\t\treturn op.method.bind(this, expr);\n\t\t}\n\t\treturn this._parsePrimary(lexer);\n\t};\n\n\t/**\n\t *  Match a primary expression (a value).\n\t *  @param {Lexer} lexer\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._parsePrimary = function(lexer){\n\t\tvar token, expr;\n\t\ttoken = lexer.peek();\n\t\tif (this.isUndef(token)) {\n\t\t\tthrow new SyntaxError(\"Tone.TimeBase: Unexpected end of expression\");\n\t\t}\n\t\tif (this._matchGroup(token, this._primaryExpressions)) {\n\t\t\ttoken = lexer.next();\n\t\t\tvar matching = token.value.match(token.regexp);\n\t\t\treturn token.method.bind(this, matching[1], matching[2], matching[3]);\n\t\t}\n\t\tif (token && token.value === \"(\"){\n\t\t\tlexer.next();\n\t\t\texpr = this._parseBinary(lexer);\n\t\t\ttoken = lexer.next();\n\t\t\tif (!(token && token.value === \")\")) {\n\t\t\t\tthrow new SyntaxError(\"Expected )\");\n\t\t\t}\n\t\t\treturn expr;\n\t\t}\n\t\tthrow new SyntaxError(\"Tone.TimeBase: Cannot process token \" + token.value);\n\t};\n\n\t/**\n\t *  Recursively parse the string expression into a syntax tree.\n\t *  @param   {string} expr \n\t *  @return  {Function} the bound method to be evaluated later\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._parseExprString = function(exprString){\n\t\tvar lexer = this._tokenize(exprString);\n\t\tvar tree = this._parseBinary(lexer);\n\t\treturn tree;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tDEFAULTS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The initial expression value\n\t *  @return  {Number}  The initial value 0\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._noOp = function(){\n\t\treturn 0;\n\t};\n\n\t/**\n\t *  The default expression value if no arguments are given\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._defaultExpr = function(){\n\t\treturn this._noOp;\n\t};\n\n\t/**\n\t *  The default units if none are given.\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._defaultUnits = \"s\";\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t *  @param {Frequency} freq\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._frequencyToUnits = function(freq){\n\t\treturn 1/freq;\n\t};\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t *  @param {Number} beats\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._beatsToUnits = function(beats){\n\t\treturn (60 / Tone.Transport.bpm.value) * beats;\n\t};\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t *  @param {Seconds} seconds\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._secondsToUnits = function(seconds){\n\t\treturn seconds;\n\t};\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @param {Ticks} ticks\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._ticksToUnits = function(ticks){\n\t\treturn ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t};\n\n\t/**\n\t *  Return the time signature.\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.TimeBase.prototype._timeSignature = function(){\n\t\treturn Tone.Transport.timeSignature;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Push an expression onto the expression list\n\t *  @param  {Time}  val\n\t *  @param  {String}  type\n\t *  @param  {String}  units\n\t *  @return  {Tone.TimeBase} \n\t *  @private\n\t */\n\tTone.TimeBase.prototype._pushExpr = function(val, name, units){\n\t\t//create the expression\n\t\tif (!(val instanceof Tone.TimeBase)){\n\t\t\tval = new Tone.TimeBase(val, units);\n\t\t}\n\t\tthis._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Add to the current value.\n\t *  @param  {Time}  val    The value to add\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t */\n\tTone.TimeBase.prototype.add = function(val, units){\n\t\treturn this._pushExpr(val, \"+\", units);\n\t};\n\n\t/**\n\t *  Subtract the value from the current time.\n\t *  @param  {Time}  val    The value to subtract\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t */\n\tTone.TimeBase.prototype.sub = function(val, units){\n\t\treturn this._pushExpr(val, \"-\", units);\n\t};\n\n\t/**\n\t *  Multiply the current value by the given time.\n\t *  @param  {Time}  val    The value to multiply\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t */\n\tTone.TimeBase.prototype.mult = function(val, units){\n\t\treturn this._pushExpr(val, \"*\", units);\n\t};\n\n\t/**\n\t *  Divide the current value by the given time.\n\t *  @param  {Time}  val    The value to divide by\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t */\n\tTone.TimeBase.prototype.div = function(val, units){\n\t\treturn this._pushExpr(val, \"/\", units);\n\t};\n\n\t/**\n\t *  Evaluate the time value. Returns the time\n\t *  in seconds.\n\t *  @return  {Seconds} \n\t */\n\tTone.TimeBase.prototype.eval = function(){\n\t\treturn this._expr();\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return {Tone.TimeBase} this\n\t */\n\tTone.TimeBase.prototype.dispose = function(){\n\t\tthis._expr = null;\n\t};\n\n\treturn Tone.TimeBase;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t/**\n\t *  @class Tone.Frequency is a primitive type for encoding Frequency values. \n\t *         Eventually all time values are evaluated to hertz\n\t *         using the `eval` method. \n\t *  @constructor\n\t *  @extends {Tone.TimeBase}\n\t *  @param  {String|Number}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * Tone.Frequency(\"C3\").eval() // 261\n\t * Tone.Frequency(38, \"midi\").eval() //\n\t * Tone.Frequency(\"C3\").transpose(4).eval();\n\t */\n\tTone.Frequency = function(val, units){\n\t\tif (this instanceof Tone.Frequency){\n\t\t\t\n\t\t\tTone.TimeBase.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.Frequency(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Frequency, Tone.TimeBase);\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tAUGMENT BASE EXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t//clone the expressions so that \n\t//we can add more without modifying the original\n\tTone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\n\t/*\n\t *  midi type primary expression\n\t *  @type {Object}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._primaryExpressions.midi = {\n\t\tregexp : /^(\\d+(?:\\.\\d+)?midi)/,\n\t\tmethod : function(value){\n\t\t\treturn this.midiToFrequency(value);\n\t\t}\t\n\t};\n\n\t/*\n\t *  note type primary expression\n\t *  @type {Object}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._primaryExpressions.note = {\n\t\tregexp : /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t\tmethod : function(pitch, octave){\n\t\t\tvar index = noteToScaleIndex[pitch.toLowerCase()];\n\t\t\tvar noteNumber = index + (parseInt(octave) + 1) * 12;\n\t\t\treturn this.midiToFrequency(noteNumber);\n\t\t}\t\n\t};\n\n\t/*\n\t *  BeatsBarsSixteenths type primary expression\n\t *  @type {Object}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._primaryExpressions.tr = {\n\t\t\tregexp : /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t\t\tmethod : function(m, q, s){\n\t\t\tvar total = 1;\n\t\t\tif (m && m !== \"0\"){\n\t\t\t\ttotal *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t\t\t}\n\t\t\tif (q && q !== \"0\"){\n\t\t\t\ttotal *= this._beatsToUnits(parseFloat(q));\n\t\t\t}\n\t\t\tif (s && s !== \"0\"){\n\t\t\t\ttotal *= this._beatsToUnits(parseFloat(s) / 4);\n\t\t\t}\n\t\t\treturn total;\n\t\t}\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tEXPRESSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @param  {Interval}  interval\n\t *  @return  {Tone.Frequency} this\n\t *  @example\n\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t */\n\tTone.Frequency.prototype.transpose = function(interval){\n\t\tthis._expr = function(expr, interval){\n\t\t\tvar val = expr();\n\t\t\treturn val * this.intervalToFrequencyRatio(interval);\n\t\t}.bind(this, this._expr, interval);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @param  {Array}  intervals\n\t *  @return  {Tone.Frequency} this\n\t *  @example\n\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */\n\tTone.Frequency.prototype.harmonize = function(intervals){\n\t\tthis._expr = function(expr, intervals){\n\t\t\tvar val = expr();\n\t\t\tvar ret = [];\n\t\t\tfor (var i = 0; i < intervals.length; i++){\n\t\t\t\tret[i] = val * this.intervalToFrequencyRatio(intervals[i]);\n\t\t\t}\n\t\t\treturn ret;\n\t\t}.bind(this, this._expr, intervals);\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUNIT CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t */\n\tTone.Frequency.prototype.toMidi = function(){\n\t\treturn this.frequencyToMidi(this.eval());\n\t};\n\n\t/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */\n\tTone.Frequency.prototype.toNote = function(){\n\t\tvar freq = this.eval();\n\t\tvar log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t\tvar noteNumber = Math.round(12 * log) + 57;\n\t\tvar octave = Math.floor(noteNumber/12);\n\t\tif(octave < 0){\n\t\t\tnoteNumber += -12 * octave;\n\t\t}\n\t\tvar noteName = scaleIndexToNote[noteNumber % 12];\n\t\treturn noteName + octave.toString();\n\t};\n\n\t/**\n\t *  Return the duration of one cycle in seconds.\n\t *  @return  {Seconds}\n\t */\n\tTone.Frequency.prototype.toSeconds = function(){\n\t\treturn 1 / this.eval();\n\t};\n\n\t/**\n\t *  Return the duration of one cycle in ticks\n\t *  @return  {Ticks}\n\t */\n\tTone.Frequency.prototype.toTicks = function(){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = this.eval() / quarterTime;\n\t\treturn Math.floor(quarters * Tone.Transport.PPQ);\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tUNIT CONVERSIONS HELPERS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value of a frequency in the current units\n\t *  @param {Frequency} freq\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._frequencyToUnits = function(freq){\n\t\treturn freq;\n\t};\n\n\t/**\n\t *  Returns the value of a tick in the current time units\n\t *  @param {Ticks} ticks\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._ticksToUnits = function(ticks){\n\t\treturn 1 / ((ticks * 60) / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t};\n\n\t/**\n\t *  Return the value of the beats in the current units\n\t *  @param {Number} beats\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._beatsToUnits = function(beats){\n\t\treturn 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t};\n\n\t/**\n\t *  Returns the value of a second in the current units\n\t *  @param {Seconds} seconds\n\t *  @return  {Number}\n\t *  @private\n\t */\n\tTone.Frequency.prototype._secondsToUnits = function(seconds){\n\t\treturn 1 / seconds;\n\t};\n\n\t/**\n\t *  The default units if none are given.\n\t *  @private\n\t */\n\tTone.Frequency.prototype._defaultUnits = \"hz\";\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tFREQUENCY CONVERSIONS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Note to scale index\n\t *  @type  {Object}\n\t */\n\tvar noteToScaleIndex = {\n\t\t\"cbb\" : -2, \"cb\" : -1, \"c\" : 0,  \"c#\" : 1,  \"cx\" : 2, \n\t\t\"dbb\" : 0,  \"db\" : 1,  \"d\" : 2,  \"d#\" : 3,  \"dx\" : 4,\n\t\t\"ebb\" : 2,  \"eb\" : 3,  \"e\" : 4,  \"e#\" : 5,  \"ex\" : 6, \n\t\t\"fbb\" : 3,  \"fb\" : 4,  \"f\" : 5,  \"f#\" : 6,  \"fx\" : 7,\n\t\t\"gbb\" : 5,  \"gb\" : 6,  \"g\" : 7,  \"g#\" : 8,  \"gx\" : 9,\n\t\t\"abb\" : 7,  \"ab\" : 8,  \"a\" : 9,  \"a#\" : 10, \"ax\" : 11,\n\t\t\"bbb\" : 9,  \"bb\" : 10, \"b\" : 11, \"b#\" : 12, \"bx\" : 13,\n\t};\n\n\t/**\n\t *  scale index to note (sharps)\n\t *  @type  {Array}\n\t */\n\tvar scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n\n\t/**\n\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t *  A4's values in Hertz. \n\t *  @type {Frequency}\n\t *  @static\n\t */\n\tTone.Frequency.A4 = 440;\n\n\t/**\n\t *  Convert a MIDI note to frequency value. \n\t *  @param  {MIDI} midi The midi number to convert.\n\t *  @return {Frequency} the corresponding frequency value\n\t *  @example\n\t * tone.midiToFrequency(69); // returns 440\n\t */\n\tTone.Frequency.prototype.midiToFrequency = function(midi){\n\t\treturn Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t};\n\n\t/**\n\t *  Convert a frequency value to a MIDI note.\n\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t *  @returns  {MIDI}\n\t *  @example\n\t * tone.midiToFrequency(440); // returns 69\n\t */\n\tTone.Frequency.prototype.frequencyToMidi = function(frequency){\n\t\treturn 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;\n\t};\n\n\treturn Tone.Frequency;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(6)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t/**\n\t *  @class Tone.TransportTime is a the time along the Transport's\n\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t *         against the AudioContext's clock, it is evaluated against\n\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t *  @constructor\n\t *  @param  {Time}  val    The time value as a number or string\n\t *  @param  {String=}  units  Unit values\n\t *  @extends {Tone.Time}\n\t */\n\tTone.TransportTime = function(val, units){\n\t\tif (this instanceof Tone.TransportTime){\n\t\t\t\n\t\t\tTone.Time.call(this, val, units);\n\n\t\t} else {\n\t\t\treturn new Tone.TransportTime(val, units);\n\t\t}\n\t};\n\n\tTone.extend(Tone.TransportTime, Tone.Time);\n\n\t//clone the expressions so that \n\t//we can add more without modifying the original\n\tTone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\n\t/**\n\t *  Adds an additional unary expression\n\t *  which quantizes values to the next subdivision\n\t *  @type {Object}\n\t *  @private\n\t */\n\tTone.TransportTime.prototype._unaryExpressions.quantize = {\n\t\tregexp : /^@/,\n\t\tmethod : function(rh){\n\t\t\tvar subdivision = this._secondsToTicks(rh());\n\t\t\tvar multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t\t\treturn this._ticksToUnits(multiple * subdivision);\n\t\t}\n\t};\n\n\t/**\n\t *  Convert seconds into ticks\n\t *  @param {Seconds} seconds\n\t *  @return  {Ticks}\n\t *  @private\n\t */\n\tTone.TransportTime.prototype._secondsToTicks = function(seconds){\n\t\tvar quarterTime = this._beatsToUnits(1);\n\t\tvar quarters = seconds / quarterTime;\n\t\treturn Math.round(quarters * Tone.Transport.PPQ);\n\t};\n\n\t/**\n\t *  Evaluate the time expression. Returns values in ticks\n\t *  @return {Ticks}\n\t */\n\tTone.TransportTime.prototype.eval = function(){\n\t\tvar val = this._secondsToTicks(this._expr());\n\t\treturn val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t};\n\n\t/**\n\t *  Return the time in ticks.\n\t *  @return  {Ticks}\n\t */\n\tTone.TransportTime.prototype.toTicks = function(){\n\t\treturn this.eval();\n\t};\n\n\t/**\n\t *  Return the time as a frequency value\n\t *  @return  {Frequency} \n\t */\n\tTone.TransportTime.prototype.toFrequency = function(){\n\t\treturn 1/this.toSeconds();\n\t};\n\n\treturn Tone.TransportTime;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS90eXBlL1RyYW5zcG9ydFRpbWUuanM/MTMwYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiZ0VBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxLQUFLO0FBQ25CLGNBQWMsUUFBUTtBQUN0QixlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxVO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDIiwiZmlsZSI6IjkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1wiVG9uZS9jb3JlL1RvbmVcIiwgXCJUb25lL3R5cGUvVGltZVwiXSwgZnVuY3Rpb24gKFRvbmUpIHtcblxuXHQvKipcblx0ICogIEBjbGFzcyBUb25lLlRyYW5zcG9ydFRpbWUgaXMgYSB0aGUgdGltZSBhbG9uZyB0aGUgVHJhbnNwb3J0J3Ncblx0ICogICAgICAgICB0aW1lbGluZS4gSXQgaXMgc2ltaWxhciB0byBUb25lLlRpbWUsIGJ1dCBpbnN0ZWFkIG9mIGV2YWx1YXRpbmdcblx0ICogICAgICAgICBhZ2FpbnN0IHRoZSBBdWRpb0NvbnRleHQncyBjbG9jaywgaXQgaXMgZXZhbHVhdGVkIGFnYWluc3Rcblx0ICogICAgICAgICB0aGUgVHJhbnNwb3J0J3MgcG9zaXRpb24uIFNlZSBbVHJhbnNwb3J0VGltZSB3aWtpXShodHRwczovL2dpdGh1Yi5jb20vVG9uZWpzL1RvbmUuanMvd2lraS9UcmFuc3BvcnRUaW1lKS5cblx0ICogIEBjb25zdHJ1Y3RvclxuXHQgKiAgQHBhcmFtICB7VGltZX0gIHZhbCAgICBUaGUgdGltZSB2YWx1ZSBhcyBhIG51bWJlciBvciBzdHJpbmdcblx0ICogIEBwYXJhbSAge1N0cmluZz19ICB1bml0cyAgVW5pdCB2YWx1ZXNcblx0ICogIEBleHRlbmRzIHtUb25lLlRpbWV9XG5cdCAqL1xuXHRUb25lLlRyYW5zcG9ydFRpbWUgPSBmdW5jdGlvbih2YWwsIHVuaXRzKXtcblx0XHRpZiAodGhpcyBpbnN0YW5jZW9mIFRvbmUuVHJhbnNwb3J0VGltZSl7XG5cdFx0XHRcblx0XHRcdFRvbmUuVGltZS5jYWxsKHRoaXMsIHZhbCwgdW5pdHMpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBuZXcgVG9uZS5UcmFuc3BvcnRUaW1lKHZhbCwgdW5pdHMpO1xuXHRcdH1cblx0fTtcblxuXHRUb25lLmV4dGVuZChUb25lLlRyYW5zcG9ydFRpbWUsIFRvbmUuVGltZSk7XG5cblx0Ly9jbG9uZSB0aGUgZXhwcmVzc2lvbnMgc28gdGhhdCBcblx0Ly93ZSBjYW4gYWRkIG1vcmUgd2l0aG91dCBtb2RpZnlpbmcgdGhlIG9yaWdpbmFsXG5cdFRvbmUuVHJhbnNwb3J0VGltZS5wcm90b3R5cGUuX3VuYXJ5RXhwcmVzc2lvbnMgPSBPYmplY3QuY3JlYXRlKFRvbmUuVGltZS5wcm90b3R5cGUuX3VuYXJ5RXhwcmVzc2lvbnMpO1xuXG5cdC8qKlxuXHQgKiAgQWRkcyBhbiBhZGRpdGlvbmFsIHVuYXJ5IGV4cHJlc3Npb25cblx0ICogIHdoaWNoIHF1YW50aXplcyB2YWx1ZXMgdG8gdGhlIG5leHQgc3ViZGl2aXNpb25cblx0ICogIEB0eXBlIHtPYmplY3R9XG5cdCAqICBAcHJpdmF0ZVxuXHQgKi9cblx0VG9uZS5UcmFuc3BvcnRUaW1lLnByb3RvdHlwZS5fdW5hcnlFeHByZXNzaW9ucy5xdWFudGl6ZSA9IHtcblx0XHRyZWdleHAgOiAvXkAvLFxuXHRcdG1ldGhvZCA6IGZ1bmN0aW9uKHJoKXtcblx0XHRcdHZhciBzdWJkaXZpc2lvbiA9IHRoaXMuX3NlY29uZHNUb1RpY2tzKHJoKCkpO1xuXHRcdFx0dmFyIG11bHRpcGxlID0gTWF0aC5jZWlsKFRvbmUuVHJhbnNwb3J0LnRpY2tzIC8gc3ViZGl2aXNpb24pO1xuXHRcdFx0cmV0dXJuIHRoaXMuX3RpY2tzVG9Vbml0cyhtdWx0aXBsZSAqIHN1YmRpdmlzaW9uKTtcblx0XHR9XG5cdH07XG5cblx0LyoqXG5cdCAqICBDb252ZXJ0IHNlY29uZHMgaW50byB0aWNrc1xuXHQgKiAgQHBhcmFtIHtTZWNvbmRzfSBzZWNvbmRzXG5cdCAqICBAcmV0dXJuICB7VGlja3N9XG5cdCAqICBAcHJpdmF0ZVxuXHQgKi9cblx0VG9uZS5UcmFuc3BvcnRUaW1lLnByb3RvdHlwZS5fc2Vjb25kc1RvVGlja3MgPSBmdW5jdGlvbihzZWNvbmRzKXtcblx0XHR2YXIgcXVhcnRlclRpbWUgPSB0aGlzLl9iZWF0c1RvVW5pdHMoMSk7XG5cdFx0dmFyIHF1YXJ0ZXJzID0gc2Vjb25kcyAvIHF1YXJ0ZXJUaW1lO1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKHF1YXJ0ZXJzICogVG9uZS5UcmFuc3BvcnQuUFBRKTtcblx0fTtcblxuXHQvKipcblx0ICogIEV2YWx1YXRlIHRoZSB0aW1lIGV4cHJlc3Npb24uIFJldHVybnMgdmFsdWVzIGluIHRpY2tzXG5cdCAqICBAcmV0dXJuIHtUaWNrc31cblx0ICovXG5cdFRvbmUuVHJhbnNwb3J0VGltZS5wcm90b3R5cGUuZXZhbCA9IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIHZhbCA9IHRoaXMuX3NlY29uZHNUb1RpY2tzKHRoaXMuX2V4cHIoKSk7XG5cdFx0cmV0dXJuIHZhbCArICh0aGlzLl9wbHVzTm93ID8gVG9uZS5UcmFuc3BvcnQudGlja3MgOiAwKTtcblx0fTtcblxuXHQvKipcblx0ICogIFJldHVybiB0aGUgdGltZSBpbiB0aWNrcy5cblx0ICogIEByZXR1cm4gIHtUaWNrc31cblx0ICovXG5cdFRvbmUuVHJhbnNwb3J0VGltZS5wcm90b3R5cGUudG9UaWNrcyA9IGZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuIHRoaXMuZXZhbCgpO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiAgUmV0dXJuIHRoZSB0aW1lIGFzIGEgZnJlcXVlbmN5IHZhbHVlXG5cdCAqICBAcmV0dXJuICB7RnJlcXVlbmN5fSBcblx0ICovXG5cdFRvbmUuVHJhbnNwb3J0VGltZS5wcm90b3R5cGUudG9GcmVxdWVuY3kgPSBmdW5jdGlvbigpe1xuXHRcdHJldHVybiAxL3RoaXMudG9TZWNvbmRzKCk7XG5cdH07XG5cblx0cmV0dXJuIFRvbmUuVHJhbnNwb3J0VGltZTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vVG9uZWpzL1RvbmUuanMvVG9uZS90eXBlL1RyYW5zcG9ydFRpbWUuanNcbiAqKiBtb2R1bGUgaWQgPSA5XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _PianoBase2 = __webpack_require__(26);\n\nvar _PianoBase3 = _interopRequireDefault(_PianoBase2);\n\nvar _Salamander = __webpack_require__(27);\n\nvar _Salamander2 = _interopRequireDefault(_Salamander);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Pedal = function (_PianoBase) {\n\t_inherits(Pedal, _PianoBase);\n\n\tfunction Pedal() {\n\t\t_classCallCheck(this, Pedal);\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Pedal).call(this));\n\n\t\t_this._downTime = Infinity;\n\n\t\t_this._currentSound = null;\n\t\treturn _this;\n\t}\n\n\t/**\n  *  Squash the current playing sound\n  */\n\n\n\t_createClass(Pedal, [{\n\t\tkey: '_squash',\n\t\tvalue: function _squash(time) {\n\t\t\tif (this._currentSound) {\n\t\t\t\tthis._currentSound.stop(time, 0.1);\n\t\t\t}\n\t\t\tthis._currentSound = null;\n\t\t}\n\t}, {\n\t\tkey: '_randomRate',\n\t\tvalue: function _randomRate() {\n\t\t\tvar ratePermutation = 0.01;\n\t\t\treturn Math.random() * ratePermutation * 2 - ratePermutation + 1;\n\t\t}\n\t}, {\n\t\tkey: '_playSample',\n\t\tvalue: function _playSample(time, dir) {\n\t\t\tvar timing = _Salamander2.default.getPedal(dir);\n\t\t\tthis._currentSound = _Salamander2.default.newSource();\n\t\t\tthis._currentSound.playbackRate.value = this._randomRate();\n\t\t\tthis._currentSound.connect(this.output).start(time, timing.start, timing.duration, 0.2);\n\t\t}\n\t}, {\n\t\tkey: 'down',\n\t\tvalue: function down(time) {\n\t\t\tthis._squash(time);\n\t\t\tthis._downTime = time;\n\t\t\tthis._playSample(time, 'down');\n\t\t}\n\t}, {\n\t\tkey: 'up',\n\t\tvalue: function up(time) {\n\t\t\tthis._squash(time);\n\t\t\tthis._downTime = Infinity;\n\t\t\tthis._playSample(time, 'up');\n\t\t}\n\t}, {\n\t\tkey: 'isDown',\n\t\tvalue: function isDown(time) {\n\t\t\treturn time > this._downTime;\n\t\t}\n\t}]);\n\n\treturn Pedal;\n}(_PianoBase3.default);\n\nexports.default = Pedal;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvUGVkYWwuanM/NDVmNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7Ozs7Ozs7OztJQUVxQixLOzs7QUFDcEIsa0JBQWE7QUFBQTs7QUFBQTs7QUFHWixRQUFLLFNBQUwsR0FBaUIsUUFBakI7O0FBRUEsUUFBSyxhQUFMLEdBQXFCLElBQXJCO0FBTFk7QUFNWjs7QUFFRDs7Ozs7OzswQkFHUSxJLEVBQUs7QUFDWixPQUFJLEtBQUssYUFBVCxFQUF1QjtBQUN0QixTQUFLLGFBQUwsQ0FBbUIsSUFBbkIsQ0FBd0IsSUFBeEIsRUFBOEIsR0FBOUI7QUFDQTtBQUNELFFBQUssYUFBTCxHQUFxQixJQUFyQjtBQUNBOzs7Z0NBRVk7QUFDWixPQUFJLGtCQUFrQixJQUF0QjtBQUNBLFVBQU8sS0FBSyxNQUFMLEtBQWdCLGVBQWhCLEdBQWtDLENBQWxDLEdBQXNDLGVBQXRDLEdBQXdELENBQS9EO0FBQ0E7Ozs4QkFFVyxJLEVBQU0sRyxFQUFJO0FBQ3JCLE9BQUksU0FBUyxxQkFBVyxRQUFYLENBQW9CLEdBQXBCLENBQWI7QUFDQSxRQUFLLGFBQUwsR0FBcUIscUJBQVcsU0FBWCxFQUFyQjtBQUNBLFFBQUssYUFBTCxDQUFtQixZQUFuQixDQUFnQyxLQUFoQyxHQUF3QyxLQUFLLFdBQUwsRUFBeEM7QUFDQSxRQUFLLGFBQUwsQ0FBbUIsT0FBbkIsQ0FBMkIsS0FBSyxNQUFoQyxFQUF3QyxLQUF4QyxDQUE4QyxJQUE5QyxFQUFvRCxPQUFPLEtBQTNELEVBQWtFLE9BQU8sUUFBekUsRUFBbUYsR0FBbkY7QUFDQTs7O3VCQUVJLEksRUFBSztBQUNULFFBQUssT0FBTCxDQUFhLElBQWI7QUFDQSxRQUFLLFNBQUwsR0FBaUIsSUFBakI7QUFDQSxRQUFLLFdBQUwsQ0FBaUIsSUFBakIsRUFBdUIsTUFBdkI7QUFDQTs7O3FCQUVFLEksRUFBSztBQUNQLFFBQUssT0FBTCxDQUFhLElBQWI7QUFDQSxRQUFLLFNBQUwsR0FBaUIsUUFBakI7QUFDQSxRQUFLLFdBQUwsQ0FBaUIsSUFBakIsRUFBdUIsSUFBdkI7QUFDQTs7O3lCQUVNLEksRUFBSztBQUNYLFVBQU8sT0FBTyxLQUFLLFNBQW5CO0FBQ0E7Ozs7OztrQkE3Q21CLEsiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGlhbm9CYXNlIGZyb20gJy4vUGlhbm9CYXNlJ1xuaW1wb3J0IFNhbGFtYW5kZXIgZnJvbSAnLi9TYWxhbWFuZGVyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQZWRhbCBleHRlbmRzIFBpYW5vQmFzZSB7XG5cdGNvbnN0cnVjdG9yKCl7XG5cdFx0c3VwZXIoKVxuXG5cdFx0dGhpcy5fZG93blRpbWUgPSBJbmZpbml0eVxuXG5cdFx0dGhpcy5fY3VycmVudFNvdW5kID0gbnVsbFxuXHR9XG5cblx0LyoqXG5cdCAqICBTcXVhc2ggdGhlIGN1cnJlbnQgcGxheWluZyBzb3VuZFxuXHQgKi9cblx0X3NxdWFzaCh0aW1lKXtcblx0XHRpZiAodGhpcy5fY3VycmVudFNvdW5kKXtcblx0XHRcdHRoaXMuX2N1cnJlbnRTb3VuZC5zdG9wKHRpbWUsIDAuMSlcblx0XHR9XG5cdFx0dGhpcy5fY3VycmVudFNvdW5kID0gbnVsbFxuXHR9XG5cblx0X3JhbmRvbVJhdGUoKXtcblx0XHRsZXQgcmF0ZVBlcm11dGF0aW9uID0gMC4wMVxuXHRcdHJldHVybiBNYXRoLnJhbmRvbSgpICogcmF0ZVBlcm11dGF0aW9uICogMiAtIHJhdGVQZXJtdXRhdGlvbiArIDFcblx0fVxuXG5cdF9wbGF5U2FtcGxlKHRpbWUsIGRpcil7XG5cdFx0bGV0IHRpbWluZyA9IFNhbGFtYW5kZXIuZ2V0UGVkYWwoZGlyKVxuXHRcdHRoaXMuX2N1cnJlbnRTb3VuZCA9IFNhbGFtYW5kZXIubmV3U291cmNlKClcblx0XHR0aGlzLl9jdXJyZW50U291bmQucGxheWJhY2tSYXRlLnZhbHVlID0gdGhpcy5fcmFuZG9tUmF0ZSgpXG5cdFx0dGhpcy5fY3VycmVudFNvdW5kLmNvbm5lY3QodGhpcy5vdXRwdXQpLnN0YXJ0KHRpbWUsIHRpbWluZy5zdGFydCwgdGltaW5nLmR1cmF0aW9uLCAwLjIpXG5cdH1cblxuXHRkb3duKHRpbWUpe1xuXHRcdHRoaXMuX3NxdWFzaCh0aW1lKVxuXHRcdHRoaXMuX2Rvd25UaW1lID0gdGltZVxuXHRcdHRoaXMuX3BsYXlTYW1wbGUodGltZSwgJ2Rvd24nKVxuXHR9XG5cblx0dXAodGltZSl7XG5cdFx0dGhpcy5fc3F1YXNoKHRpbWUpXG5cdFx0dGhpcy5fZG93blRpbWUgPSBJbmZpbml0eVxuXHRcdHRoaXMuX3BsYXlTYW1wbGUodGltZSwgJ3VwJylcblx0fVxuXG5cdGlzRG93bih0aW1lKXtcblx0XHRyZXR1cm4gdGltZSA+IHRoaXMuX2Rvd25UaW1lXG5cdH1cbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9QZWRhbC5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(12), __webpack_require__(14)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t/**\n\t *  @class Wrapper around the native BufferSourceNode.\n\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t *  @param  {Function}  onended  The callback to invoke when the \n\t *                               buffer is done playing.\n\t */\n\tTone.BufferSource = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"buffer\", \"onended\"], Tone.BufferSource.defaults);\n\n\t\t/**\n\t\t *  The callback to invoke after the \n\t\t *  buffer source is done playing. \n\t\t *  @type  {Function}\n\t\t */\n\t\tthis.onended = options.onended;\n\n\t\t/**\n\t\t *  The time that the buffer was started.\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._startTime = -1;\n\n\t\t/**\n\t\t *  The gain node which envelopes the BufferSource\n\t\t *  @type  {GainNode}\n\t\t *  @private\n\t\t */\n\t\tthis._gainNode = this.output = this.context.createGain();\n\n\t\t/**\n\t\t *  The buffer source\n\t\t *  @type  {AudioBufferSourceNode}\n\t\t *  @private\n\t\t */\n\t\tthis._source = this.context.createBufferSource();\n\t\tthis._source.connect(this._gainNode);\n\t\tthis._source.onended = this._onended.bind(this);\n\t\n\t\t/**\n\t\t *  The playbackRate of the buffer\n\t\t *  @type {AudioParam}\n\t\t */\n\t\tthis.playbackRate = this._source.playbackRate;\n\n\t\t/**\n\t\t *  The fadeIn time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.fadeIn = options.fadeIn;\n\n\t\t/**\n\t\t *  The fadeOut time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */\n\t\tthis.fadeOut = options.fadeOut;\n\n\t\t/**\n\t\t *  The value that the buffer ramps to\n\t\t *  @type {Gain}\n\t\t *  @private\n\t\t */\n\t\tthis._gain = 1;\n\n\t\t//set the buffer initially\n\t\tif (!this.isUndef(options.buffer)){\n\t\t\tthis.buffer = options.buffer;\n\t\t}\n\n\t\tthis.loop = options.loop;\n\t};\n\n\tTone.extend(Tone.BufferSource);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.BufferSource.defaults = {\n\t\t\"onended\" : Tone.noOp,\n\t\t\"fadeIn\" : 0,\n\t\t\"fadeOut\" : 0\n\t};\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.BufferSource#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"state\", {\n\t\tget : function(){\n\t\t\tvar now = this.now();\n\t\t\tif (this._startTime !== -1 && now > this._startTime){\n\t\t\t\treturn Tone.State.Started;\n\t\t\t} else {\n\t\t\t\treturn Tone.State.Stopped;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Start the buffer\n\t *  @param  {Time} [startTime=now] When the player should start.\n\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t *                                 to start at. \n\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t *                                is given, it will default to the full length \n\t *                                of the sample (minus any offset)\n\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t *  @return  {Tone.BufferSource}  this\n\t */\n\tTone.BufferSource.prototype.start = function(time, offset, duration, gain, fadeInTime){\n\t\tif (this._startTime !== -1){\n\t\t\tthrow new Error(\"Tone.BufferSource: can only be started once.\");\n\t\t}\n\n\t\tif (this.buffer){\n\t\t\ttime = this.toSeconds(time);\n\t\t\t//if it's a loop the default offset is the loopstart point\n\t\t\tif (this.loop){\n\t\t\t\toffset = this.defaultArg(offset, this.loopStart);\n\t\t\t} else {\n\t\t\t\t//otherwise the default offset is 0\n\t\t\t\toffset = this.defaultArg(offset, 0);\n\t\t\t}\n\t\t\toffset = this.toSeconds(offset);\n\t\t\t//the values in seconds\n\t\t\ttime = this.toSeconds(time);\n\n\t\t\tthis._source.start(time, offset);\n\n\t\t\tgain = this.defaultArg(gain, 1);\n\t\t\tthis._gain = gain;\n\n\t\t\t//the fadeIn time\n\t\t\tif (this.isUndef(fadeInTime)){\n\t\t\t\tfadeInTime = this.toSeconds(this.fadeIn);\n\t\t\t} else {\n\t\t\t\tfadeInTime = this.toSeconds(fadeInTime);\n\t\t\t}\n\n\t\t\tif (fadeInTime > 0){\n\t\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t\t}\n\n\t\t\tthis._startTime = time + fadeInTime;\n\n\t\t\tif (!this.isUndef(duration)){\n\t\t\t\tduration = this.defaultArg(duration, this.buffer.duration - offset);\n\t\t\t\tduration = this.toSeconds(duration);\n\t\t\t\tthis.stop(time + duration + fadeInTime, fadeInTime);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the buffer. Optionally add a ramp time to fade the \n\t *  buffer out. \n\t *  @param  {Time=}  time         The time the buffer should stop.\n\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t *  @return  {Tone.BufferSource}  this\n\t */\n\tTone.BufferSource.prototype.stop = function(time, fadeOutTime){\n\t\tif (this.buffer){\n\n\t\t\ttime = this.toSeconds(time);\n\t\t\t\n\t\t\t//the fadeOut time\n\t\t\tif (this.isUndef(fadeOutTime)){\n\t\t\t\tfadeOutTime = this.toSeconds(this.fadeOut);\n\t\t\t} else {\n\t\t\t\tfadeOutTime = this.toSeconds(fadeOutTime);\n\t\t\t}\n\n\t\t\t//cancel the end curve\n\t\t\tthis._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\n\t\t\t//set a new one\n\t\t\tif (fadeOutTime > 0){\n\t\t\t\tthis._gainNode.gain.setValueAtTime(this._gain, time);\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);\n\t\t\t\ttime += fadeOutTime;\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\t}\n\t\t\tthis._source.stop(time);\n\t\t}\n\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Internal callback when the buffer is ended. \n\t *  Invokes `onended` and disposes the node.\n\t *  @private\n\t */\n\tTone.BufferSource.prototype._onended = function(){\n\t\tthis.onended(this);\n\t\tthis.dispose();\n\t};\n\n\t/**\n\t * If loop is true, the loop will start at this position. \n\t * @memberOf Tone.BufferSource#\n\t * @type {Time}\n\t * @name loopStart\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn this._source.loopStart;\n\t\t}, \n\t\tset : function(loopStart){\n\t\t\tthis._source.loopStart = this.toSeconds(loopStart);\n\t\t}\n\t});\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t * @memberOf Tone.BufferSource#\n\t * @type {Time}\n\t * @name loopEnd\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn this._source.loopEnd;\n\t\t}, \n\t\tset : function(loopEnd){\n\t\t\tthis._source.loopEnd = this.toSeconds(loopEnd);\n\t\t}\n\t});\n\n\t/**\n\t * The audio buffer belonging to the player. \n\t * @memberOf Tone.BufferSource#\n\t * @type {AudioBuffer}\n\t * @name buffer\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"buffer\", {\n\t\tget : function(){\n\t\t\tif (this._source){\n\t\t\t\treturn this._source.buffer;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}, \n\t\tset : function(buffer){\n\t\t\tif (buffer instanceof Tone.Buffer){\n\t\t\t\tthis._source.buffer = buffer.get();\n\t\t\t} else {\n\t\t\t\tthis._source.buffer = buffer;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * If the buffer should loop once it's over. \n\t * @memberOf Tone.BufferSource#\n\t * @type {boolean}\n\t * @name loop\n\t */\n\tObject.defineProperty(Tone.BufferSource.prototype, \"loop\", {\n\t\tget : function(){\n\t\t\treturn this._source.loop;\n\t\t}, \n\t\tset : function(loop){\n\t\t\tthis._source.loop = loop;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.BufferSource}  this\n\t */\n\tTone.BufferSource.prototype.dispose = function(){\n\t\tthis.onended = null;\n\t\tif (this._source){\n\t\t\tthis._source.onended = null;\n\t\t\tthis._source.disconnect();\n\t\t\tthis._source = null;\n\t\t}\n\t\tif (this._gainNode){\n\t\t\tthis._gainNode.disconnect();\n\t\t\tthis._gainNode = null;\n\t\t}\n\t\tthis._startTime = -1;\n\t\tthis.playbackRate = null;\n\t\tthis.output = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.BufferSource;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t *          classes that make requests for audio files such as Tone.Player,\n\t *          Tone.Sampler and Tone.Convolver.\n\t *          <br><br>\n\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t *  \t\tprovides static methods which keep track of the loading progress \n\t *  \t\tof all of the buffers. These methods are Tone.Buffer.onload, Tone.Buffer.onprogress,\n\t *  \t\tand Tone.Buffer.onerror. \n\t *\n\t *  @constructor \n\t *  @extends {Tone}\n\t *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. \n\t *  @param {function=} onload A callback which is invoked after the buffer is loaded. \n\t *                            It's recommended to use Tone.Buffer.onload instead \n\t *                            since it will give you a callback when ALL buffers are loaded.\n\t *  @example\n\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t * \t//the buffer is now available.\n\t * \tvar buff = buffer.get();\n\t * });\n\t */\n\tTone.Buffer = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"url\", \"onload\"], Tone.Buffer.defaults);\n\n\t\t/**\n\t\t *  stores the loaded AudioBuffer\n\t\t *  @type {AudioBuffer}\n\t\t *  @private\n\t\t */\n\t\tthis._buffer = null;\n\n\t\t/**\n\t\t *  indicates if the buffer should be reversed or not\n\t\t *  @type {boolean}\n\t\t *  @private\n\t\t */\n\t\tthis._reversed = options.reverse;\n\n\t\t/**\n\t\t *  The url of the buffer. <code>undefined</code> if it was \n\t\t *  constructed with a buffer\n\t\t *  @type {string}\n\t\t *  @readOnly\n\t\t */\n\t\tthis.url = undefined;\n\n\t\t/**\n\t\t *  Indicates if the buffer is loaded or not. \n\t\t *  @type {boolean}\n\t\t *  @readOnly\n\t\t */\n\t\tthis.loaded = false;\n\n\t\t/**\n\t\t *  The callback to invoke when everything is loaded. \n\t\t *  @type {function}\n\t\t */\n\t\tthis.onload = options.onload.bind(this, this);\n\n\t\tif (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer){\n\t\t\tthis.set(options.url);\n\t\t\tthis.onload(this);\n\t\t} else if (this.isString(options.url)){\n\t\t\tthis.url = options.url;\n\t\t\tTone.Buffer._addToQueue(options.url, this);\n\t\t}\n\t};\n\n\tTone.extend(Tone.Buffer);\n\n\t/**\n\t *  the default parameters\n\t *  @type {Object}\n\t */\n\tTone.Buffer.defaults = {\n\t\t\"url\" : undefined,\n\t\t\"onload\" : Tone.noOp,\n\t\t\"reverse\" : false\n\t};\n\n\t/**\n\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t *  of this buffer.\n\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t *  @returns {Tone.Buffer} this\n\t */\n\tTone.Buffer.prototype.set = function(buffer){\n\t\tif (buffer instanceof Tone.Buffer){\n\t\t\tthis._buffer = buffer.get();\n\t\t} else {\n\t\t\tthis._buffer = buffer;\n\t\t}\n\t\tthis.loaded = true;\n\t\treturn this;\n\t};\n\n\t/**\n\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t */\n\tTone.Buffer.prototype.get = function(){\n\t\treturn this._buffer;\n\t};\n\n\t/**\n\t *  Load url into the buffer. \n\t *  @param {String} url The url to load\n\t *  @param {Function=} callback The callback to invoke on load. \n\t *                              don't need to set if `onload` is\n\t *                              already set.\n\t *  @returns {Tone.Buffer} this\n\t */\n\tTone.Buffer.prototype.load = function(url, callback){\n\t\tthis.url = url;\n\t\tthis.onload = this.defaultArg(callback, this.onload);\n\t\tTone.Buffer._addToQueue(url, this);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  dispose and disconnect\n\t *  @returns {Tone.Buffer} this\n\t */\n\tTone.Buffer.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tTone.Buffer._removeFromQueue(this);\n\t\tthis._buffer = null;\n\t\tthis.onload = Tone.Buffer.defaults.onload;\n\t\treturn this;\n\t};\n\n\t/**\n\t * The duration of the buffer. \n\t * @memberOf Tone.Buffer#\n\t * @type {number}\n\t * @name duration\n\t * @readOnly\n\t */\n\tObject.defineProperty(Tone.Buffer.prototype, \"duration\", {\n\t\tget : function(){\n\t\t\tif (this._buffer){\n\t\t\t\treturn this._buffer.duration;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t *  Reverse the buffer.\n\t *  @private\n\t *  @return {Tone.Buffer} this\n\t */\n\tTone.Buffer.prototype._reverse = function(){\n\t\tif (this.loaded){\n\t\t\tfor (var i = 0; i < this._buffer.numberOfChannels; i++){\n\t\t\t\tArray.prototype.reverse.call(this._buffer.getChannelData(i));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t * Reverse the buffer.\n\t * @memberOf Tone.Buffer#\n\t * @type {boolean}\n\t * @name reverse\n\t */\n\tObject.defineProperty(Tone.Buffer.prototype, \"reverse\", {\n\t\tget : function(){\n\t\t\treturn this._reversed;\n\t\t},\n\t\tset : function(rev){\n\t\t\tif (this._reversed !== rev){\n\t\t\t\tthis._reversed = rev;\n\t\t\t\tthis._reverse();\n\t\t\t}\n\t\t},\n\t});\n\n\t///////////////////////////////////////////////////////////////////////////\n\t// STATIC METHODS\n\t///////////////////////////////////////////////////////////////////////////\n\n\t//statically inherits Emitter methods\n\tTone.Emitter.mixin(Tone.Buffer);\n\t \n\t/**\n\t *  the static queue for all of the xhr requests\n\t *  @type {Array}\n\t *  @private\n\t */\n\tTone.Buffer._queue = [];\n\n\t/**\n\t *  the array of current downloads\n\t *  @type {Array}\n\t *  @private\n\t */\n\tTone.Buffer._currentDownloads = [];\n\n\t/**\n\t *  the total number of downloads\n\t *  @type {number}\n\t *  @private\n\t */\n\tTone.Buffer._totalDownloads = 0;\n\n\t/**\n\t *  the maximum number of simultaneous downloads\n\t *  @static\n\t *  @type {number}\n\t */\n\tTone.Buffer.MAX_SIMULTANEOUS_DOWNLOADS = 6;\n\t\n\t/**\n\t *  Adds a file to be loaded to the loading queue\n\t *  @param   {string}   url      the url to load\n\t *  @param   {function} callback the callback to invoke once it's loaded\n\t *  @private\n\t */\n\tTone.Buffer._addToQueue = function(url, buffer){\n\t\tTone.Buffer._queue.push({\n\t\t\turl : url,\n\t\t\tBuffer : buffer,\n\t\t\tprogress : 0,\n\t\t\txhr : null\n\t\t});\n\t\tthis._totalDownloads++;\n\t\tTone.Buffer._next();\n\t};\n\n\t/**\n\t *  Remove an object from the queue's (if it's still there)\n\t *  Abort the XHR if it's in progress\n\t *  @param {Tone.Buffer} buffer the buffer to remove\n\t *  @private\n\t */\n\tTone.Buffer._removeFromQueue = function(buffer){\n\t\tvar i;\n\t\tfor (i = 0; i < Tone.Buffer._queue.length; i++){\n\t\t\tvar q = Tone.Buffer._queue[i];\n\t\t\tif (q.Buffer === buffer){\n\t\t\t\tTone.Buffer._queue.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < Tone.Buffer._currentDownloads.length; i++){\n\t\t\tvar dl = Tone.Buffer._currentDownloads[i];\n\t\t\tif (dl.Buffer === buffer){\n\t\t\t\tTone.Buffer._currentDownloads.splice(i, 1);\n\t\t\t\tdl.xhr.abort();\n\t\t\t\tdl.xhr.onprogress = null;\n\t\t\t\tdl.xhr.onload = null;\n\t\t\t\tdl.xhr.onerror = null;\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  load the next buffer in the queue\n\t *  @private\n\t */\n\tTone.Buffer._next = function(){\n\t\tif (Tone.Buffer._queue.length > 0){\n\t\t\tif (Tone.Buffer._currentDownloads.length < Tone.Buffer.MAX_SIMULTANEOUS_DOWNLOADS){\n\t\t\t\tvar next = Tone.Buffer._queue.shift();\n\t\t\t\tTone.Buffer._currentDownloads.push(next);\n\t\t\t\tnext.xhr = Tone.Buffer.load(next.url, function(buffer){\n\t\t\t\t\t//remove this one from the queue\n\t\t\t\t\tvar index = Tone.Buffer._currentDownloads.indexOf(next);\n\t\t\t\t\tTone.Buffer._currentDownloads.splice(index, 1);\n\t\t\t\t\tnext.Buffer.set(buffer);\n\t\t\t\t\tif (next.Buffer._reversed){\n\t\t\t\t\t\tnext.Buffer._reverse();\n\t\t\t\t\t}\n\t\t\t\t\tnext.Buffer.onload(next.Buffer);\n\t\t\t\t\tTone.Buffer._onprogress();\n\t\t\t\t\tTone.Buffer._next();\n\t\t\t\t});\n\t\t\t\tnext.xhr.onprogress = function(event){\n\t\t\t\t\tnext.progress = event.loaded / event.total;\n\t\t\t\t\tTone.Buffer._onprogress();\n\t\t\t\t};\n\t\t\t\tnext.xhr.onerror = function(e){\n\t\t\t\t\tTone.Buffer.trigger(\"error\", e);\n\t\t\t\t};\n\t\t\t} \n\t\t} else if (Tone.Buffer._currentDownloads.length === 0){\n\t\t\tTone.Buffer.trigger(\"load\");\n\t\t\t//reset the downloads\n\t\t\tTone.Buffer._totalDownloads = 0;\n\t\t}\n\t};\n\n\t/**\n\t *  internal progress event handler\n\t *  @private\n\t */\n\tTone.Buffer._onprogress = function(){\n\t\tvar curretDownloadsProgress = 0;\n\t\tvar currentDLLen = Tone.Buffer._currentDownloads.length;\n\t\tvar inprogress = 0;\n\t\tif (currentDLLen > 0){\n\t\t\tfor (var i = 0; i < currentDLLen; i++){\n\t\t\t\tvar dl = Tone.Buffer._currentDownloads[i];\n\t\t\t\tcurretDownloadsProgress += dl.progress;\n\t\t\t}\n\t\t\tinprogress = curretDownloadsProgress;\n\t\t}\n\t\tvar currentDownloadProgress = currentDLLen - inprogress;\n\t\tvar completed = Tone.Buffer._totalDownloads - Tone.Buffer._queue.length - currentDownloadProgress;\n\t\tTone.Buffer.trigger(\"progress\", completed / Tone.Buffer._totalDownloads);\n\t};\n\n\t/**\n\t *  A path which is prefixed before every url.\n\t *  @type  {String}\n\t *  @static\n\t */\n\tTone.Buffer.baseUrl = \"\";\n\n\t/**\n\t *  Makes an xhr reqest for the selected url then decodes\n\t *  the file as an audio buffer. Invokes\n\t *  the callback once the audio buffer loads.\n\t *  @param {string} url The url of the buffer to load.\n\t *                      filetype support depends on the\n\t *                      browser.\n\t *  @param {function} callback The function to invoke when the url is loaded. \n\t *  @returns {XMLHttpRequest} returns the XHR\n\t */\n\tTone.Buffer.load = function(url, callback){\n\t\tvar request = new XMLHttpRequest();\n\t\trequest.open(\"GET\", Tone.Buffer.baseUrl + url, true);\n\t\trequest.responseType = \"arraybuffer\";\n\t\t// decode asynchronously\n\t\trequest.onload = function() {\n\t\t\tTone.context.decodeAudioData(request.response, function(buff) {\n\t\t\t\tcallback(buff);\n\t\t\t}, function(){\n\t\t\t\tthrow new Error(\"Tone.Buffer: could not decode audio data:\" + url);\n\t\t\t});\n\t\t};\n\t\t//send the request\n\t\trequest.send();\n\t\treturn request;\n\t};\n\n\t/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param {String} url The url/extension to test\n\t *  @return {Boolean} If the file extension can be played\n\t *  @static\n\t *  @example\n\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */\n\tTone.Buffer.supportsType = function(url){\n\t\tvar extension = url.split(\".\");\n\t\textension = extension[extension.length - 1];\n\t\tvar response = document.createElement(\"audio\").canPlayType(\"audio/\"+extension);\n\t\treturn response !== \"\";\n\t};\n\n\treturn Tone.Buffer;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Emitter gives classes which extend it\n\t *         the ability to listen for and trigger events. \n\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t *         MIT (c) 2011 Jerome Etienne.\n\t *         \n\t *  @extends {Tone}\n\t */\n\tTone.Emitter = function(){\n\t\t/**\n\t\t *  Contains all of the events.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t\tthis._events = {};\n\t};\n\n\tTone.extend(Tone.Emitter);\n\n\t/**\n\t *  Bind a callback to a specific event.\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is triggered\n\t *  @return  {Tone.Emitter}    this\n\t */\n\tTone.Emitter.prototype.on = function(event, callback){\n\t\t//split the event\n\t\tvar events = event.split(/\\W+/);\n\t\tfor (var i = 0; i < events.length; i++){\n\t\t\tvar eventName = events[i];\n\t\t\tif (!this._events.hasOwnProperty(eventName)){\n\t\t\t\tthis._events[eventName] = [];\n\t\t\t}\n\t\t\tthis._events[eventName].push(callback);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove the event listener.\n\t *  @param  {String}    event     The event to stop listening to.\n\t *  @param  {Function=}  callback  The callback which was bound to \n\t *                                the event with Tone.Emitter.on.\n\t *                                If no callback is given, all callbacks\n\t *                                events are removed.\n\t *  @return  {Tone.Emitter}    this\n\t */\n\tTone.Emitter.prototype.off = function(event, callback){\n\t\tvar events = event.split(/\\W+/);\n\t\tfor (var ev = 0; ev < events.length; ev++){\n\t\t\tevent = events[ev];\n\t\t\tif (this._events.hasOwnProperty(event)){\n\t\t\t\tif (Tone.prototype.isUndef(callback)){\n\t\t\t\t\tthis._events[event] = [];\n\t\t\t\t} else {\n\t\t\t\t\tvar eventList = this._events[event];\n\t\t\t\t\tfor (var i = 0; i < eventList.length; i++){\n\t\t\t\t\t\tif (eventList[i] === callback){\n\t\t\t\t\t\t\teventList.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in. \n\t *  @param  {String}  event  The name of the event.\n\t *  @param {*...} args The arguments to pass to the functions listening.\n\t *  @return  {Tone.Emitter}  this\n\t */\n\tTone.Emitter.prototype.trigger = function(event){\n\t\tif (this._events){\n\t\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\t\tif (this._events.hasOwnProperty(event)){\n\t\t\t\tvar eventList = this._events[event];\n\t\t\t\tfor (var i = 0, len = eventList.length; i < len; i++){\n\t\t\t\t\teventList[i].apply(this, args);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Add Emitter functions (on/off/trigger) to the object\n\t *  @param  {Object|Function}  object  The object or class to extend.\n\t */\n\tTone.Emitter.mixin = function(object){\n\t\tvar functions = [\"on\", \"off\", \"trigger\"];\n\t\tobject._events = {};\n\t\tfor (var i = 0; i < functions.length; i++){\n\t\t\tvar func = functions[i];\n\t\t\tvar emitterFunc = Tone.Emitter.prototype[func];\n\t\t\tobject[func] = emitterFunc;\n\t\t}\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Emitter}  this\n\t */\n\tTone.Emitter.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._events = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Emitter;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9jb3JlL0VtaXR0ZXIuanM/ODIzMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiZ0VBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0EsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxVQUFVO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsYUFBYTtBQUM1QjtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGFBQWEsS0FBSztBQUNsQixlQUFlLGFBQWE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLGdCQUFnQjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixzQkFBc0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUMiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1wiVG9uZS9jb3JlL1RvbmVcIl0sIGZ1bmN0aW9uIChUb25lKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0LyoqXG5cdCAqICBAY2xhc3MgVG9uZS5FbWl0dGVyIGdpdmVzIGNsYXNzZXMgd2hpY2ggZXh0ZW5kIGl0XG5cdCAqICAgICAgICAgdGhlIGFiaWxpdHkgdG8gbGlzdGVuIGZvciBhbmQgdHJpZ2dlciBldmVudHMuIFxuXHQgKiAgICAgICAgIEluc3BpcmF0aW9uIGFuZCByZWZlcmVuY2UgZnJvbSBKZXJvbWUgRXRpZW5uZSdzIFtNaWNyb0V2ZW50XShodHRwczovL2dpdGh1Yi5jb20vamVyb21lZXRpZW5uZS9taWNyb2V2ZW50LmpzKS5cblx0ICogICAgICAgICBNSVQgKGMpIDIwMTEgSmVyb21lIEV0aWVubmUuXG5cdCAqICAgICAgICAgXG5cdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0ICovXG5cdFRvbmUuRW1pdHRlciA9IGZ1bmN0aW9uKCl7XG5cdFx0LyoqXG5cdFx0ICogIENvbnRhaW5zIGFsbCBvZiB0aGUgZXZlbnRzLlxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqICBAdHlwZSAge09iamVjdH1cblx0XHQgKi9cblx0XHR0aGlzLl9ldmVudHMgPSB7fTtcblx0fTtcblxuXHRUb25lLmV4dGVuZChUb25lLkVtaXR0ZXIpO1xuXG5cdC8qKlxuXHQgKiAgQmluZCBhIGNhbGxiYWNrIHRvIGEgc3BlY2lmaWMgZXZlbnQuXG5cdCAqICBAcGFyYW0gIHtTdHJpbmd9ICAgIGV2ZW50ICAgICBUaGUgbmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIGZvci5cblx0ICogIEBwYXJhbSAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgIFRoZSBjYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGVcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50IGlzIHRyaWdnZXJlZFxuXHQgKiAgQHJldHVybiAge1RvbmUuRW1pdHRlcn0gICAgdGhpc1xuXHQgKi9cblx0VG9uZS5FbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uKGV2ZW50LCBjYWxsYmFjayl7XG5cdFx0Ly9zcGxpdCB0aGUgZXZlbnRcblx0XHR2YXIgZXZlbnRzID0gZXZlbnQuc3BsaXQoL1xcVysvKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKyl7XG5cdFx0XHR2YXIgZXZlbnROYW1lID0gZXZlbnRzW2ldO1xuXHRcdFx0aWYgKCF0aGlzLl9ldmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSl7XG5cdFx0XHRcdHRoaXMuX2V2ZW50c1tldmVudE5hbWVdID0gW107XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9ldmVudHNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqICBSZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyLlxuXHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgICBldmVudCAgICAgVGhlIGV2ZW50IHRvIHN0b3AgbGlzdGVuaW5nIHRvLlxuXHQgKiAgQHBhcmFtICB7RnVuY3Rpb249fSAgY2FsbGJhY2sgIFRoZSBjYWxsYmFjayB3aGljaCB3YXMgYm91bmQgdG8gXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZXZlbnQgd2l0aCBUb25lLkVtaXR0ZXIub24uXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBubyBjYWxsYmFjayBpcyBnaXZlbiwgYWxsIGNhbGxiYWNrc1xuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzIGFyZSByZW1vdmVkLlxuXHQgKiAgQHJldHVybiAge1RvbmUuRW1pdHRlcn0gICAgdGhpc1xuXHQgKi9cblx0VG9uZS5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbihldmVudCwgY2FsbGJhY2spe1xuXHRcdHZhciBldmVudHMgPSBldmVudC5zcGxpdCgvXFxXKy8pO1xuXHRcdGZvciAodmFyIGV2ID0gMDsgZXYgPCBldmVudHMubGVuZ3RoOyBldisrKXtcblx0XHRcdGV2ZW50ID0gZXZlbnRzW2V2XTtcblx0XHRcdGlmICh0aGlzLl9ldmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnQpKXtcblx0XHRcdFx0aWYgKFRvbmUucHJvdG90eXBlLmlzVW5kZWYoY2FsbGJhY2spKXtcblx0XHRcdFx0XHR0aGlzLl9ldmVudHNbZXZlbnRdID0gW107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIGV2ZW50TGlzdCA9IHRoaXMuX2V2ZW50c1tldmVudF07XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBldmVudExpc3QubGVuZ3RoOyBpKyspe1xuXHRcdFx0XHRcdFx0aWYgKGV2ZW50TGlzdFtpXSA9PT0gY2FsbGJhY2spe1xuXHRcdFx0XHRcdFx0XHRldmVudExpc3Quc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogIEludm9rZSBhbGwgb2YgdGhlIGNhbGxiYWNrcyBib3VuZCB0byB0aGUgZXZlbnRcblx0ICogIHdpdGggYW55IGFyZ3VtZW50cyBwYXNzZWQgaW4uIFxuXHQgKiAgQHBhcmFtICB7U3RyaW5nfSAgZXZlbnQgIFRoZSBuYW1lIG9mIHRoZSBldmVudC5cblx0ICogIEBwYXJhbSB7Ki4uLn0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gdGhlIGZ1bmN0aW9ucyBsaXN0ZW5pbmcuXG5cdCAqICBAcmV0dXJuICB7VG9uZS5FbWl0dGVyfSAgdGhpc1xuXHQgKi9cblx0VG9uZS5FbWl0dGVyLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24oZXZlbnQpe1xuXHRcdGlmICh0aGlzLl9ldmVudHMpe1xuXHRcdFx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXHRcdFx0aWYgKHRoaXMuX2V2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudCkpe1xuXHRcdFx0XHR2YXIgZXZlbnRMaXN0ID0gdGhpcy5fZXZlbnRzW2V2ZW50XTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDAsIGxlbiA9IGV2ZW50TGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKyl7XG5cdFx0XHRcdFx0ZXZlbnRMaXN0W2ldLmFwcGx5KHRoaXMsIGFyZ3MpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiAgQWRkIEVtaXR0ZXIgZnVuY3Rpb25zIChvbi9vZmYvdHJpZ2dlcikgdG8gdGhlIG9iamVjdFxuXHQgKiAgQHBhcmFtICB7T2JqZWN0fEZ1bmN0aW9ufSAgb2JqZWN0ICBUaGUgb2JqZWN0IG9yIGNsYXNzIHRvIGV4dGVuZC5cblx0ICovXG5cdFRvbmUuRW1pdHRlci5taXhpbiA9IGZ1bmN0aW9uKG9iamVjdCl7XG5cdFx0dmFyIGZ1bmN0aW9ucyA9IFtcIm9uXCIsIFwib2ZmXCIsIFwidHJpZ2dlclwiXTtcblx0XHRvYmplY3QuX2V2ZW50cyA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZnVuY3Rpb25zLmxlbmd0aDsgaSsrKXtcblx0XHRcdHZhciBmdW5jID0gZnVuY3Rpb25zW2ldO1xuXHRcdFx0dmFyIGVtaXR0ZXJGdW5jID0gVG9uZS5FbWl0dGVyLnByb3RvdHlwZVtmdW5jXTtcblx0XHRcdG9iamVjdFtmdW5jXSA9IGVtaXR0ZXJGdW5jO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogIENsZWFuIHVwXG5cdCAqICBAcmV0dXJuICB7VG9uZS5FbWl0dGVyfSAgdGhpc1xuXHQgKi9cblx0VG9uZS5FbWl0dGVyLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24oKXtcblx0XHRUb25lLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdFx0dGhpcy5fZXZlbnRzID0gbnVsbDtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRyZXR1cm4gVG9uZS5FbWl0dGVyO1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9Ub25lanMvVG9uZS5qcy9Ub25lL2NvcmUvRW1pdHRlci5qc1xuICoqIG1vZHVsZSBpZCA9IDEzXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(15), __webpack_require__(24), __webpack_require__(25),\n\t__webpack_require__(5), __webpack_require__(22), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Tone){\n\n\t\"use strict\";\n\t\n\t/**\n\t *  @class  Base class for sources. Sources have start/stop methods\n\t *          and the ability to be synced to the \n\t *          start/stop of Tone.Transport. \n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @example\n\t * //Multiple state change events can be chained together,\n\t * //but must be set in the correct order and with ascending times\n\t * \n\t * // OK\n\t * state.start().stop(\"+0.2\");\n\t * // AND\n\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t *\n\t * // BAD\n\t * state.stop(\"+0.2\").start();\n\t * // OR\n\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t * \n\t */\t\n\tTone.Source = function(options){\n\t\t//Sources only have an output and no input\n\t\tTone.call(this);\n\n\t\toptions = this.defaultArg(options, Tone.Source.defaults);\n\n\t\t/**\n\t\t *  The output volume node\n\t\t *  @type  {Tone.Volume}\n\t\t *  @private\n\t\t */\n\t\tthis._volume = this.output = new Tone.Volume(options.volume);\n\n\t\t/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */\n\t\tthis.volume = this._volume.volume;\n\t\tthis._readOnly(\"volume\");\n\n\t\t/**\n\t\t * \tKeep track of the scheduled state.\n\t\t *  @type {Tone.TimelineState}\n\t\t *  @private\n\t\t */\n\t\tthis._state = new Tone.TimelineState(Tone.State.Stopped);\n\t\tthis._state.memory = 10;\n\n\t\t/**\n\t\t *  The synced `start` callback function from the transport\n\t\t *  @type {Function}\n\t\t *  @private\n\t\t */\n\t\tthis._syncStart = function(time, offset){\n\t\t\ttime = this.toSeconds(time);\n\t\t\ttime += this.toSeconds(this._startDelay);\n\t\t\tthis.start(time, offset);\n\t\t}.bind(this);\n\n\t\t/**\n\t\t *  The synced `stop` callback function from the transport\n\t\t *  @type {Function}\n\t\t *  @private\n\t\t */\n\t\tthis._syncStop = this.stop.bind(this);\n\n\t\t/**\n\t\t *  The offset from the start of the Transport `start`\n\t\t *  @type {Time}\n\t\t *  @private\n\t\t */\n\t\tthis._startDelay = 0;\n\n\t\t//make the output explicitly stereo\n\t\tthis._volume.output.output.channelCount = 2;\n\t\tthis._volume.output.output.channelCountMode = \"explicit\";\n\t\t//mute initially\n\t\tthis.mute = options.mute;\n\t};\n\n\tTone.extend(Tone.Source);\n\n\t/**\n\t *  The default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */\n\tTone.Source.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.Source.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._state.getStateAtTime(this.now());\n\t\t}\n\t});\n\n\t/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */\n\tObject.defineProperty(Tone.Source.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._volume.mute;\n\t\t}, \n\t\tset : function(mute){\n\t\t\tthis._volume.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */\n\tTone.Source.prototype.start = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getStateAtTime(time) !== Tone.State.Started || this.retrigger){\n\t\t\tthis._state.setStateAtTime(Tone.State.Started, time);\n\t\t\tif (this._start){\n\t\t\t\tthis._start.apply(this, arguments);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */\n\tTone.Source.prototype.stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(Tone.State.Stopped, time);\n\t\tif (this._stop){\n\t\t\tthis._stop.apply(this, arguments);\n\t\t}\n\t\treturn this;\n\t};\n\t\n\t/**\n\t *  Sync the source to the Transport so that when the transport\n\t *  is started, this source is started and when the transport is stopped\n\t *  or paused, so is the source. \n\t *\n\t *  @param {Time} [delay=0] Delay time before starting the source after the\n\t *                               Transport has started. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source to start 1 measure after the transport starts\n\t * source.sync(\"1m\");\n\t * //start the transport. the source will start 1 measure later. \n\t * Tone.Transport.start();\n\t */\n\tTone.Source.prototype.sync = function(delay){\n\t\tthis._startDelay = this.defaultArg(delay, 0);\n\t\tTone.Transport.on(\"start\", this._syncStart);\n\t\tTone.Transport.on(\"stop pause\", this._syncStop);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */\n\tTone.Source.prototype.unsync = function(){\n\t\tthis._startDelay = 0;\n\t\tTone.Transport.off(\"start\", this._syncStart);\n\t\tTone.Transport.off(\"stop pause\", this._syncStop);\n\t\treturn this;\n\t};\n\n\t/**\n\t *\tClean up.\n\t *  @return {Tone.Source} this\n\t */\n\tTone.Source.prototype.dispose = function(){\n\t\tthis.stop();\n\t\tTone.prototype.dispose.call(this);\n\t\tthis.unsync();\n\t\tthis._writable(\"volume\");\n\t\tthis._volume.dispose();\n\t\tthis._volume = null;\n\t\tthis.volume = null;\n\t\tthis._state.dispose();\n\t\tthis._state = null;\n\t\tthis._syncStart = null;\n\t\tthis._syncStart = null;\n\t};\n\n\treturn Tone.Source;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9zb3VyY2UvU291cmNlLmpzPzMxNDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6ImdFQUFBO0FBQ0EsNEdBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsY0FBYyxLQUFLO0FBQ25CLGVBQWUsWUFBWTtBQUMzQjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsS0FBSztBQUNuQixlQUFlLFlBQVk7QUFDM0I7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYyxZQUFZO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcIlRvbmUvY29yZS9Ub25lXCIsIFwiVG9uZS9jb3JlL1RyYW5zcG9ydFwiLCBcIlRvbmUvY29tcG9uZW50L1ZvbHVtZVwiLCBcIlRvbmUvY29yZS9NYXN0ZXJcIixcblx0XCJUb25lL3R5cGUvVHlwZVwiLCBcIlRvbmUvY29yZS9UaW1lbGluZVN0YXRlXCIsIFwiVG9uZS9zaWduYWwvU2lnbmFsXCJdLCBcbmZ1bmN0aW9uKFRvbmUpe1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0LyoqXG5cdCAqICBAY2xhc3MgIEJhc2UgY2xhc3MgZm9yIHNvdXJjZXMuIFNvdXJjZXMgaGF2ZSBzdGFydC9zdG9wIG1ldGhvZHNcblx0ICogICAgICAgICAgYW5kIHRoZSBhYmlsaXR5IHRvIGJlIHN5bmNlZCB0byB0aGUgXG5cdCAqICAgICAgICAgIHN0YXJ0L3N0b3Agb2YgVG9uZS5UcmFuc3BvcnQuIFxuXHQgKlxuXHQgKiAgQGNvbnN0cnVjdG9yXG5cdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0ICogIEBleGFtcGxlXG5cdCAqIC8vTXVsdGlwbGUgc3RhdGUgY2hhbmdlIGV2ZW50cyBjYW4gYmUgY2hhaW5lZCB0b2dldGhlcixcblx0ICogLy9idXQgbXVzdCBiZSBzZXQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIgYW5kIHdpdGggYXNjZW5kaW5nIHRpbWVzXG5cdCAqIFxuXHQgKiAvLyBPS1xuXHQgKiBzdGF0ZS5zdGFydCgpLnN0b3AoXCIrMC4yXCIpO1xuXHQgKiAvLyBBTkRcblx0ICogc3RhdGUuc3RhcnQoKS5zdG9wKFwiKzAuMlwiKS5zdGFydChcIiswLjRcIikuc3RvcChcIiswLjdcIilcblx0ICpcblx0ICogLy8gQkFEXG5cdCAqIHN0YXRlLnN0b3AoXCIrMC4yXCIpLnN0YXJ0KCk7XG5cdCAqIC8vIE9SXG5cdCAqIHN0YXRlLnN0YXJ0KFwiKzAuM1wiKS5zdG9wKFwiKzAuMlwiKTtcblx0ICogXG5cdCAqL1x0XG5cdFRvbmUuU291cmNlID0gZnVuY3Rpb24ob3B0aW9ucyl7XG5cdFx0Ly9Tb3VyY2VzIG9ubHkgaGF2ZSBhbiBvdXRwdXQgYW5kIG5vIGlucHV0XG5cdFx0VG9uZS5jYWxsKHRoaXMpO1xuXG5cdFx0b3B0aW9ucyA9IHRoaXMuZGVmYXVsdEFyZyhvcHRpb25zLCBUb25lLlNvdXJjZS5kZWZhdWx0cyk7XG5cblx0XHQvKipcblx0XHQgKiAgVGhlIG91dHB1dCB2b2x1bWUgbm9kZVxuXHRcdCAqICBAdHlwZSAge1RvbmUuVm9sdW1lfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3ZvbHVtZSA9IHRoaXMub3V0cHV0ID0gbmV3IFRvbmUuVm9sdW1lKG9wdGlvbnMudm9sdW1lKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2b2x1bWUgb2YgdGhlIG91dHB1dCBpbiBkZWNpYmVscy5cblx0XHQgKiBAdHlwZSB7RGVjaWJlbHN9XG5cdFx0ICogQHNpZ25hbFxuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogc291cmNlLnZvbHVtZS52YWx1ZSA9IC02O1xuXHRcdCAqL1xuXHRcdHRoaXMudm9sdW1lID0gdGhpcy5fdm9sdW1lLnZvbHVtZTtcblx0XHR0aGlzLl9yZWFkT25seShcInZvbHVtZVwiKTtcblxuXHRcdC8qKlxuXHRcdCAqIFx0S2VlcCB0cmFjayBvZiB0aGUgc2NoZWR1bGVkIHN0YXRlLlxuXHRcdCAqICBAdHlwZSB7VG9uZS5UaW1lbGluZVN0YXRlfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3N0YXRlID0gbmV3IFRvbmUuVGltZWxpbmVTdGF0ZShUb25lLlN0YXRlLlN0b3BwZWQpO1xuXHRcdHRoaXMuX3N0YXRlLm1lbW9yeSA9IDEwO1xuXG5cdFx0LyoqXG5cdFx0ICogIFRoZSBzeW5jZWQgYHN0YXJ0YCBjYWxsYmFjayBmdW5jdGlvbiBmcm9tIHRoZSB0cmFuc3BvcnRcblx0XHQgKiAgQHR5cGUge0Z1bmN0aW9ufVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3N5bmNTdGFydCA9IGZ1bmN0aW9uKHRpbWUsIG9mZnNldCl7XG5cdFx0XHR0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdFx0XHR0aW1lICs9IHRoaXMudG9TZWNvbmRzKHRoaXMuX3N0YXJ0RGVsYXkpO1xuXHRcdFx0dGhpcy5zdGFydCh0aW1lLCBvZmZzZXQpO1xuXHRcdH0uYmluZCh0aGlzKTtcblxuXHRcdC8qKlxuXHRcdCAqICBUaGUgc3luY2VkIGBzdG9wYCBjYWxsYmFjayBmdW5jdGlvbiBmcm9tIHRoZSB0cmFuc3BvcnRcblx0XHQgKiAgQHR5cGUge0Z1bmN0aW9ufVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3N5bmNTdG9wID0gdGhpcy5zdG9wLmJpbmQodGhpcyk7XG5cblx0XHQvKipcblx0XHQgKiAgVGhlIG9mZnNldCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgVHJhbnNwb3J0IGBzdGFydGBcblx0XHQgKiAgQHR5cGUge1RpbWV9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy5fc3RhcnREZWxheSA9IDA7XG5cblx0XHQvL21ha2UgdGhlIG91dHB1dCBleHBsaWNpdGx5IHN0ZXJlb1xuXHRcdHRoaXMuX3ZvbHVtZS5vdXRwdXQub3V0cHV0LmNoYW5uZWxDb3VudCA9IDI7XG5cdFx0dGhpcy5fdm9sdW1lLm91dHB1dC5vdXRwdXQuY2hhbm5lbENvdW50TW9kZSA9IFwiZXhwbGljaXRcIjtcblx0XHQvL211dGUgaW5pdGlhbGx5XG5cdFx0dGhpcy5tdXRlID0gb3B0aW9ucy5tdXRlO1xuXHR9O1xuXG5cdFRvbmUuZXh0ZW5kKFRvbmUuU291cmNlKTtcblxuXHQvKipcblx0ICogIFRoZSBkZWZhdWx0IHBhcmFtZXRlcnNcblx0ICogIEBzdGF0aWNcblx0ICogIEBjb25zdFxuXHQgKiAgQHR5cGUge09iamVjdH1cblx0ICovXG5cdFRvbmUuU291cmNlLmRlZmF1bHRzID0ge1xuXHRcdFwidm9sdW1lXCIgOiAwLFxuXHRcdFwibXV0ZVwiIDogZmFsc2Vcblx0fTtcblxuXHQvKipcblx0ICogIFJldHVybnMgdGhlIHBsYXliYWNrIHN0YXRlIG9mIHRoZSBzb3VyY2UsIGVpdGhlciBcInN0YXJ0ZWRcIiBvciBcInN0b3BwZWRcIi5cblx0ICogIEB0eXBlIHtUb25lLlN0YXRlfVxuXHQgKiAgQHJlYWRPbmx5XG5cdCAqICBAbWVtYmVyT2YgVG9uZS5Tb3VyY2UjXG5cdCAqICBAbmFtZSBzdGF0ZVxuXHQgKi9cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuU291cmNlLnByb3RvdHlwZSwgXCJzdGF0ZVwiLCB7XG5cdFx0Z2V0IDogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiB0aGlzLl9zdGF0ZS5nZXRTdGF0ZUF0VGltZSh0aGlzLm5vdygpKTtcblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiBNdXRlIHRoZSBvdXRwdXQuIFxuXHQgKiBAbWVtYmVyT2YgVG9uZS5Tb3VyY2UjXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAbmFtZSBtdXRlXG5cdCAqIEBleGFtcGxlXG5cdCAqIC8vbXV0ZSB0aGUgb3V0cHV0XG5cdCAqIHNvdXJjZS5tdXRlID0gdHJ1ZTtcblx0ICovXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlNvdXJjZS5wcm90b3R5cGUsIFwibXV0ZVwiLCB7XG5cdFx0Z2V0IDogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiB0aGlzLl92b2x1bWUubXV0ZTtcblx0XHR9LCBcblx0XHRzZXQgOiBmdW5jdGlvbihtdXRlKXtcblx0XHRcdHRoaXMuX3ZvbHVtZS5tdXRlID0gbXV0ZTtcblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiAgU3RhcnQgdGhlIHNvdXJjZSBhdCB0aGUgc3BlY2lmaWVkIHRpbWUuIElmIG5vIHRpbWUgaXMgZ2l2ZW4sIFxuXHQgKiAgc3RhcnQgdGhlIHNvdXJjZSBub3cuXG5cdCAqICBAcGFyYW0gIHtUaW1lfSBbdGltZT1ub3ddIFdoZW4gdGhlIHNvdXJjZSBzaG91bGQgYmUgc3RhcnRlZC5cblx0ICogIEByZXR1cm5zIHtUb25lLlNvdXJjZX0gdGhpc1xuXHQgKiAgQGV4YW1wbGVcblx0ICogc291cmNlLnN0YXJ0KFwiKzAuNVwiKTsgLy9zdGFydHMgdGhlIHNvdXJjZSAwLjUgc2Vjb25kcyBmcm9tIG5vd1xuXHQgKi9cblx0VG9uZS5Tb3VyY2UucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24odGltZSl7XG5cdFx0dGltZSA9IHRoaXMudG9TZWNvbmRzKHRpbWUpO1xuXHRcdGlmICh0aGlzLl9zdGF0ZS5nZXRTdGF0ZUF0VGltZSh0aW1lKSAhPT0gVG9uZS5TdGF0ZS5TdGFydGVkIHx8IHRoaXMucmV0cmlnZ2VyKXtcblx0XHRcdHRoaXMuX3N0YXRlLnNldFN0YXRlQXRUaW1lKFRvbmUuU3RhdGUuU3RhcnRlZCwgdGltZSk7XG5cdFx0XHRpZiAodGhpcy5fc3RhcnQpe1xuXHRcdFx0XHR0aGlzLl9zdGFydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogIFN0b3AgdGhlIHNvdXJjZSBhdCB0aGUgc3BlY2lmaWVkIHRpbWUuIElmIG5vIHRpbWUgaXMgZ2l2ZW4sIFxuXHQgKiAgc3RvcCB0aGUgc291cmNlIG5vdy5cblx0ICogIEBwYXJhbSAge1RpbWV9IFt0aW1lPW5vd10gV2hlbiB0aGUgc291cmNlIHNob3VsZCBiZSBzdG9wcGVkLiBcblx0ICogIEByZXR1cm5zIHtUb25lLlNvdXJjZX0gdGhpc1xuXHQgKiAgQGV4YW1wbGVcblx0ICogc291cmNlLnN0b3AoKTsgLy8gc3RvcHMgdGhlIHNvdXJjZSBpbW1lZGlhdGVseVxuXHQgKi9cblx0VG9uZS5Tb3VyY2UucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbih0aW1lKXtcblx0XHR0aW1lID0gdGhpcy50b1NlY29uZHModGltZSk7XG5cdFx0dGhpcy5fc3RhdGUuY2FuY2VsKHRpbWUpO1xuXHRcdHRoaXMuX3N0YXRlLnNldFN0YXRlQXRUaW1lKFRvbmUuU3RhdGUuU3RvcHBlZCwgdGltZSk7XG5cdFx0aWYgKHRoaXMuX3N0b3Ape1xuXHRcdFx0dGhpcy5fc3RvcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblx0XG5cdC8qKlxuXHQgKiAgU3luYyB0aGUgc291cmNlIHRvIHRoZSBUcmFuc3BvcnQgc28gdGhhdCB3aGVuIHRoZSB0cmFuc3BvcnRcblx0ICogIGlzIHN0YXJ0ZWQsIHRoaXMgc291cmNlIGlzIHN0YXJ0ZWQgYW5kIHdoZW4gdGhlIHRyYW5zcG9ydCBpcyBzdG9wcGVkXG5cdCAqICBvciBwYXVzZWQsIHNvIGlzIHRoZSBzb3VyY2UuIFxuXHQgKlxuXHQgKiAgQHBhcmFtIHtUaW1lfSBbZGVsYXk9MF0gRGVsYXkgdGltZSBiZWZvcmUgc3RhcnRpbmcgdGhlIHNvdXJjZSBhZnRlciB0aGVcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHJhbnNwb3J0IGhhcyBzdGFydGVkLiBcblx0ICogIEByZXR1cm5zIHtUb25lLlNvdXJjZX0gdGhpc1xuXHQgKiAgQGV4YW1wbGVcblx0ICogLy9zeW5jIHRoZSBzb3VyY2UgdG8gc3RhcnQgMSBtZWFzdXJlIGFmdGVyIHRoZSB0cmFuc3BvcnQgc3RhcnRzXG5cdCAqIHNvdXJjZS5zeW5jKFwiMW1cIik7XG5cdCAqIC8vc3RhcnQgdGhlIHRyYW5zcG9ydC4gdGhlIHNvdXJjZSB3aWxsIHN0YXJ0IDEgbWVhc3VyZSBsYXRlci4gXG5cdCAqIFRvbmUuVHJhbnNwb3J0LnN0YXJ0KCk7XG5cdCAqL1xuXHRUb25lLlNvdXJjZS5wcm90b3R5cGUuc3luYyA9IGZ1bmN0aW9uKGRlbGF5KXtcblx0XHR0aGlzLl9zdGFydERlbGF5ID0gdGhpcy5kZWZhdWx0QXJnKGRlbGF5LCAwKTtcblx0XHRUb25lLlRyYW5zcG9ydC5vbihcInN0YXJ0XCIsIHRoaXMuX3N5bmNTdGFydCk7XG5cdFx0VG9uZS5UcmFuc3BvcnQub24oXCJzdG9wIHBhdXNlXCIsIHRoaXMuX3N5bmNTdG9wKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHQvKipcblx0ICogIFVuc3luYyB0aGUgc291cmNlIHRvIHRoZSBUcmFuc3BvcnQuIFNlZSBUb25lLlNvdXJjZS5zeW5jXG5cdCAqICBAcmV0dXJucyB7VG9uZS5Tb3VyY2V9IHRoaXNcblx0ICovXG5cdFRvbmUuU291cmNlLnByb3RvdHlwZS51bnN5bmMgPSBmdW5jdGlvbigpe1xuXHRcdHRoaXMuX3N0YXJ0RGVsYXkgPSAwO1xuXHRcdFRvbmUuVHJhbnNwb3J0Lm9mZihcInN0YXJ0XCIsIHRoaXMuX3N5bmNTdGFydCk7XG5cdFx0VG9uZS5UcmFuc3BvcnQub2ZmKFwic3RvcCBwYXVzZVwiLCB0aGlzLl9zeW5jU3RvcCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqXHRDbGVhbiB1cC5cblx0ICogIEByZXR1cm4ge1RvbmUuU291cmNlfSB0aGlzXG5cdCAqL1xuXHRUb25lLlNvdXJjZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCl7XG5cdFx0dGhpcy5zdG9wKCk7XG5cdFx0VG9uZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHRcdHRoaXMudW5zeW5jKCk7XG5cdFx0dGhpcy5fd3JpdGFibGUoXCJ2b2x1bWVcIik7XG5cdFx0dGhpcy5fdm9sdW1lLmRpc3Bvc2UoKTtcblx0XHR0aGlzLl92b2x1bWUgPSBudWxsO1xuXHRcdHRoaXMudm9sdW1lID0gbnVsbDtcblx0XHR0aGlzLl9zdGF0ZS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5fc3RhdGUgPSBudWxsO1xuXHRcdHRoaXMuX3N5bmNTdGFydCA9IG51bGw7XG5cdFx0dGhpcy5fc3luY1N0YXJ0ID0gbnVsbDtcblx0fTtcblxuXHRyZXR1cm4gVG9uZS5Tb3VyY2U7XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL1RvbmVqcy9Ub25lLmpzL1RvbmUvc291cmNlL1NvdXJjZS5qc1xuICoqIG1vZHVsZSBpZCA9IDE0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(16), __webpack_require__(5), __webpack_require__(21), \n\t__webpack_require__(13), __webpack_require__(2), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Transport for timing musical events.\n\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t *          in the argument of the callback function. Pass that time value to the object\n\t *          you're scheduling. <br><br>\n\t *          A single transport is created for you when the library is initialized. \n\t *          <br><br>\n\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t *          called with the time of that event as the argument. \n\t *\n\t *  @extends {Tone.Emitter}\n\t *  @singleton\n\t *  @example\n\t * //repeated event every 8th note\n\t * Tone.Transport.scheduleRepeat(function(time){\n\t * \t//do something with the time\n\t * }, \"8n\");\n\t *  @example\n\t * //schedule an event on the 16th measure\n\t * Tone.Transport.schedule(function(time){\n\t * \t//do something with the time\n\t * }, \"16:0:0\");\n\t */\n\tTone.Transport = function(){\n\n\t\tTone.Emitter.call(this);\n\n\t\t///////////////////////////////////////////////////////////////////////\n\t\t//\tLOOPING\n\t\t//////////////////////////////////////////////////////////////////////\n\n\t\t/** \n\t\t * \tIf the transport loops or not.\n\t\t *  @type {boolean}\n\t\t */\n\t\tthis.loop = false;\n\n\t\t/** \n\t\t * \tThe loop start position in ticks\n\t\t *  @type {Ticks}\n\t\t *  @private\n\t\t */\n\t\tthis._loopStart = 0;\n\n\t\t/** \n\t\t * \tThe loop end position in ticks\n\t\t *  @type {Ticks}\n\t\t *  @private\n\t\t */\n\t\tthis._loopEnd = 0;\n\n\t\t///////////////////////////////////////////////////////////////////////\n\t\t//\tCLOCK/TEMPO\n\t\t//////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t *  @private\n\t\t *  @type  {Number}\n\t\t */\n\t\tthis._ppq = TransportConstructor.defaults.PPQ;\n\n\t\t/**\n\t\t *  watches the main oscillator for timing ticks\n\t\t *  initially starts at 120bpm\n\t\t *  @private\n\t\t *  @type {Tone.Clock}\n\t\t */\n\t\tthis._clock = new Tone.Clock({\n\t\t\t\"callback\" : this._processTick.bind(this), \n\t\t\t\"frequency\" : 0,\n\t\t});\n\t\t/**\n\t\t *  The Beats Per Minute of the Transport. \n\t\t *  @type {BPM}\n\t\t *  @signal\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 80;\n\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t */\n\t\tthis.bpm = this._clock.frequency;\n\t\tthis.bpm._toUnits = this._toUnits.bind(this);\n\t\tthis.bpm._fromUnits = this._fromUnits.bind(this);\n\t\tthis.bpm.units = Tone.Type.BPM;\n\t\tthis.bpm.value = TransportConstructor.defaults.bpm;\n\t\tthis._readOnly(\"bpm\");\n\n\t\t/**\n\t\t *  The time signature, or more accurately the numerator\n\t\t *  of the time signature over a denominator of 4. \n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._timeSignature = TransportConstructor.defaults.timeSignature;\n\n\t\t///////////////////////////////////////////////////////////////////////\n\t\t//\tTIMELINE EVENTS\n\t\t//////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  All the events in an object to keep track by ID\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t\tthis._scheduledEvents = {};\n\n\t\t/**\n\t\t *  The event ID counter\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._eventID = 0;\n\n\t\t/**\n\t\t * \tThe scheduled events.\n\t\t *  @type {Tone.Timeline}\n\t\t *  @private\n\t\t */\n\t\tthis._timeline = new Tone.Timeline();\n\n\t\t/**\n\t\t *  Repeated events\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._repeatedEvents = new Tone.IntervalTimeline();\n\n\t\t/**\n\t\t *  Events that occur once\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._onceEvents = new Tone.Timeline();\n\n\t\t/** \n\t\t *  All of the synced Signals\n\t\t *  @private \n\t\t *  @type {Array}\n\t\t */\n\t\tthis._syncedSignals = [];\n\n\t\t///////////////////////////////////////////////////////////////////////\n\t\t//\tSWING\n\t\t//////////////////////////////////////////////////////////////////////\n\n\t\t/**\n\t\t *  The subdivision of the swing\n\t\t *  @type  {Ticks}\n\t\t *  @private\n\t\t */\n\t\tthis._swingTicks = TransportConstructor.defaults.PPQ / 2; //8n\n\n\t\t/**\n\t\t *  The swing amount\n\t\t *  @type {NormalRange}\n\t\t *  @private\n\t\t */\n\t\tthis._swingAmount = 0;\n\n\t};\n\n\tTone.extend(Tone.Transport, Tone.Emitter);\n\n\t/**\n\t *  the defaults\n\t *  @type {Object}\n\t *  @const\n\t *  @static\n\t */\n\tTone.Transport.defaults = {\n\t\t\"bpm\" : 120,\n\t\t\"swing\" : 0,\n\t\t\"swingSubdivision\" : \"8n\",\n\t\t\"timeSignature\" : 4,\n\t\t\"loopStart\" : 0,\n\t\t\"loopEnd\" : \"4m\",\n\t\t\"PPQ\" : 192\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tTICKS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  called on every tick\n\t *  @param   {number} tickTime clock relative tick time\n\t *  @private\n\t */\n\tTone.Transport.prototype._processTick = function(tickTime){\n\t\tvar ticks = this._clock.ticks;\n\t\t//handle swing\n\t\tif (this._swingAmount > 0 && \n\t\t\tticks % this._ppq !== 0 && //not on a downbeat\n\t\t\tticks % (this._swingTicks * 2) !== 0){\n\t\t\t//add some swing\n\t\t\tvar progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n\t\t\tvar amount = Math.sin((progress) * Math.PI) * this._swingAmount;\n\t\t\ttickTime += Tone.Time(this._swingTicks * 2/3, \"i\").eval() * amount;\n\t\t} \n\t\t//do the loop test\n\t\tif (this.loop){\n\t\t\tif (ticks === this._loopEnd){\n\t\t\t\tthis.ticks = this._loopStart;\n\t\t\t\tticks = this._loopStart;\n\t\t\t\tthis.trigger(\"loop\", tickTime);\n\t\t\t}\n\t\t}\n\t\t//process the single occurrence events\n\t\tthis._onceEvents.forEachBefore(ticks, function(event){\n\t\t\tevent.callback(tickTime);\n\t\t});\n\t\t//and clear the single occurrence timeline\n\t\tthis._onceEvents.cancelBefore(ticks);\n\t\t//fire the next tick events if their time has come\n\t\tthis._timeline.forEachAtTime(ticks, function(event){\n\t\t\tevent.callback(tickTime);\n\t\t});\n\t\t//process the repeated events\n\t\tthis._repeatedEvents.forEachAtTime(ticks, function(event){\n\t\t\tif ((ticks - event.time) % event.interval === 0){\n\t\t\t\tevent.callback(tickTime);\n\t\t\t}\n\t\t});\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tSCHEDULABLE EVENTS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Schedule an event along the timeline.\n\t *  @param {Function} callback The callback to be invoked at the time.\n\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t *  @return {Number} The id of the event which can be used for canceling the event. \n\t *  @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Tone.Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */\n\tTone.Transport.prototype.schedule = function(callback, time){\n\t\tvar event = {\n\t\t\t\"time\" : this.toTicks(time),\n\t\t\t\"callback\" : callback\n\t\t};\n\t\tvar id = this._eventID++;\n\t\tthis._scheduledEvents[id.toString()] = {\n\t\t\t\"event\" : event,\n\t\t\t\"timeline\" : this._timeline\n\t\t};\n\t\tthis._timeline.addEvent(event);\n\t\treturn id;\n\t};\n\n\t/**\n\t *  Schedule a repeated event along the timeline. The event will fire\n\t *  at the `interval` starting at the `startTime` and for the specified\n\t *  `duration`. \n\t *  @param  {Function}  callback   The callback to invoke.\n\t *  @param  {Time}    interval   The duration between successive\n\t *                               callbacks.\n\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t *                               start being invoked.\n\t *  @param {Time} [duration=Infinity] How long the event should repeat. \n\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t *                           the event. \n\t *  @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */\n\tTone.Transport.prototype.scheduleRepeat = function(callback, interval, startTime, duration){\n\t\tif (interval <= 0){\n\t\t\tthrow new Error(\"Tone.Transport: repeat events must have an interval larger than 0\");\n\t\t}\n\t\tvar event = {\n\t\t\t\"time\" : this.toTicks(startTime),\n\t\t\t\"duration\" : this.toTicks(this.defaultArg(duration, Infinity)),\n\t\t\t\"interval\" : this.toTicks(interval),\n\t\t\t\"callback\" : callback\n\t\t};\n\t\tvar id = this._eventID++;\n\t\tthis._scheduledEvents[id.toString()] = {\n\t\t\t\"event\" : event,\n\t\t\t\"timeline\" : this._repeatedEvents\n\t\t};\n\t\tthis._repeatedEvents.addEvent(event);\n\t\treturn id;\n\t};\n\n\t/**\n\t *  Schedule an event that will be removed after it is invoked. \n\t *  Note that if the given time is less than the current transport time, \n\t *  the event will be invoked immediately. \n\t *  @param {Function} callback The callback to invoke once.\n\t *  @param {TransportTime} time The time the callback should be invoked.\n\t *  @returns {Number} The ID of the scheduled event. \n\t */\n\tTone.Transport.prototype.scheduleOnce = function(callback, time){\n\t\tvar event = {\n\t\t\t\"time\" : this.toTicks(time),\n\t\t\t\"callback\" : callback\n\t\t};\n\t\tvar id = this._eventID++;\n\t\tthis._scheduledEvents[id.toString()] = {\n\t\t\t\"event\" : event,\n\t\t\t\"timeline\" : this._onceEvents\n\t\t};\n\t\tthis._onceEvents.addEvent(event);\n\t\treturn id;\n\t};\n\n\t/**\n\t *  Clear the passed in event id from the timeline\n\t *  @param {Number} eventId The id of the event.\n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.clear = function(eventId){\n\t\tif (this._scheduledEvents.hasOwnProperty(eventId)){\n\t\t\tvar item = this._scheduledEvents[eventId.toString()];\n\t\t\titem.timeline.removeEvent(item.event);\n\t\t\tdelete this._scheduledEvents[eventId.toString()];\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove scheduled events from the timeline after\n\t *  the given time. Repeated events will be removed\n\t *  if their startTime is after the given time\n\t *  @param {TransportTime} [after=0] Clear all events after\n\t *                          this time. \n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.cancel = function(after){\n\t\tafter = this.defaultArg(after, 0);\n\t\tafter = this.toTicks(after);\n\t\tthis._timeline.cancel(after);\n\t\tthis._onceEvents.cancel(after);\n\t\tthis._repeatedEvents.cancel(after);\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tSTART/STOP/PAUSE\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Transport#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._clock.getStateAtTime(this.now());\n\t\t}\n\t});\n\n\t/**\n\t *  Start the transport and all sources synced to the transport.\n\t *  @param  {Time} [time=now] The time when the transport should start.\n\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t *  @returns {Tone.Transport} this\n\t *  @example\n\t * //start the transport in one second starting at beginning of the 5th measure. \n\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t */\n\tTone.Transport.prototype.start = function(time, offset){\n\t\ttime = this.toSeconds(time);\n\t\tif (!this.isUndef(offset)){\n\t\t\toffset = new Tone.Time(offset);\n\t\t} else {\n\t\t\toffset = new Tone.Time(this._clock.ticks, \"i\");\n\t\t}\n\t\t//start the clock\n\t\tthis._clock.start(time, offset.toTicks());\n\t\tthis.trigger(\"start\", time, offset.toSeconds());\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the transport and all sources synced to the transport.\n\t *  @param  {Time} [time=now] The time when the transport should stop. \n\t *  @returns {Tone.Transport} this\n\t *  @example\n\t * Tone.Transport.stop();\n\t */\n\tTone.Transport.prototype.stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._clock.stop(time);\n\t\tthis.trigger(\"stop\", time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Pause the transport and all sources synced to the transport.\n\t *  @param  {Time} [time=now]\n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.pause = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._clock.pause(time);\n\t\tthis.trigger(\"pause\", time);\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tSETTERS/GETTERS\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  The time signature as just the numerator over 4. \n\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t *  @memberOf Tone.Transport#\n\t *  @type {Number|Array}\n\t *  @name timeSignature\n\t *  @example\n\t * //common time\n\t * Tone.Transport.timeSignature = 4;\n\t * // 7/8\n\t * Tone.Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Tone.Transport.timeSignature; //returns 3.5\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"timeSignature\", {\n\t\tget : function(){\n\t\t\treturn this._timeSignature;\n\t\t},\n\t\tset : function(timeSig){\n\t\t\tif (this.isArray(timeSig)){\n\t\t\t\ttimeSig = (timeSig[0] / timeSig[1]) * 4;\n\t\t\t}\n\t\t\tthis._timeSignature = timeSig;\n\t\t}\n\t});\n\n\n\t/**\n\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t * @memberOf Tone.Transport#\n\t * @type {TransportTime}\n\t * @name loopStart\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn Tone.TransportTime(this._loopStart, \"i\").toSeconds();\n\t\t},\n\t\tset : function(startPosition){\n\t\t\tthis._loopStart = this.toTicks(startPosition);\n\t\t}\n\t});\n\n\t/**\n\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t * @memberOf Tone.Transport#\n\t * @type {TransportTime}\n\t * @name loopEnd\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn Tone.TransportTime(this._loopEnd, \"i\").toSeconds();\n\t\t},\n\t\tset : function(endPosition){\n\t\t\tthis._loopEnd = this.toTicks(endPosition);\n\t\t}\n\t});\n\n\t/**\n\t *  Set the loop start and stop at the same time. \n\t *  @param {TransportTime} startPosition \n\t *  @param {TransportTime} endPosition   \n\t *  @returns {Tone.Transport} this\n\t *  @example\n\t * //loop over the first measure\n\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t * Tone.Transport.loop = true;\n\t */\n\tTone.Transport.prototype.setLoopPoints = function(startPosition, endPosition){\n\t\tthis.loopStart = startPosition;\n\t\tthis.loopEnd = endPosition;\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The swing value. Between 0-1 where 1 equal to \n\t *  the note + half the subdivision.\n\t *  @memberOf Tone.Transport#\n\t *  @type {NormalRange}\n\t *  @name swing\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"swing\", {\n\t\tget : function(){\n\t\t\treturn this._swingAmount;\n\t\t},\n\t\tset : function(amount){\n\t\t\t//scale the values to a normal range\n\t\t\tthis._swingAmount = amount;\n\t\t}\n\t});\n\n\t/**\n\t *  Set the subdivision which the swing will be applied to. \n\t *  The default values is a 16th note. Value must be less \n\t *  than a quarter note.\n\t *  \n\t *  @memberOf Tone.Transport#\n\t *  @type {Time}\n\t *  @name swingSubdivision\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"swingSubdivision\", {\n\t\tget : function(){\n\t\t\treturn Tone.Time(this._swingTicks, \"i\").toNotation();\n\t\t},\n\t\tset : function(subdivision){\n\t\t\tthis._swingTicks = this.toTicks(subdivision);\n\t\t}\n\t});\n\n\t/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away. \n\t *  @memberOf Tone.Transport#\n\t *  @type {BarsBeatsSixteenths}\n\t *  @name position\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"position\", {\n\t\tget : function(){\n\t\t\treturn Tone.TransportTime(this.ticks, \"i\").toBarsBeatsSixteenths();\n\t\t},\n\t\tset : function(progress){\n\t\t\tvar ticks = this.toTicks(progress);\n\t\t\tthis.ticks = ticks;\n\t\t}\n\t});\n\n\t/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true. \n\t *  @memberOf Tone.Transport#\n\t *  @name progress\n\t *  @type {NormalRange}\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"progress\", {\n\t\tget : function(){\n\t\t\tif (this.loop){\n\t\t\t\treturn (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The transports current tick position.\n\t *  \n\t *  @memberOf Tone.Transport#\n\t *  @type {Ticks}\n\t *  @name ticks\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"ticks\", {\n\t\tget : function(){\n\t\t\treturn this._clock.ticks;\n\t\t},\n\t\tset : function(t){\n\t\t\tthis._clock.ticks = t;\n\t\t}\n\t});\n\n\t/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value \n\t *  after other objects have been created can cause problems. \n\t *  \n\t *  @memberOf Tone.Transport#\n\t *  @type {Number}\n\t *  @name PPQ\n\t */\n\tObject.defineProperty(Tone.Transport.prototype, \"PPQ\", {\n\t\tget : function(){\n\t\t\treturn this._ppq;\n\t\t},\n\t\tset : function(ppq){\n\t\t\tvar bpm = this.bpm.value;\n\t\t\tthis._ppq = ppq;\n\t\t\tthis.bpm.value = bpm;\n\t\t}\n\t});\n\n\t/**\n\t *  Convert from BPM to frequency (factoring in PPQ)\n\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t *  @private\n\t */\n\tTone.Transport.prototype._fromUnits = function(bpm){\n\t\treturn 1 / (60 / bpm / this.PPQ);\n\t};\n\n\t/**\n\t *  Convert from frequency (with PPQ) into BPM\n\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t *  @return  {BPM}  The frequency value as BPM.\n\t *  @private\n\t */\n\tTone.Transport.prototype._toUnits = function(freq){\n\t\treturn (freq / this.PPQ) * 60;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tSYNCING\n\t///////////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the time aligned to the next subdivision\n\t *  of the Transport. If the Transport is not started,\n\t *  it will return 0.\n\t *  Note: this will not work precisely during tempo ramps.\n\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t *  @return  {Number}  The context time of the next subdivision.\n\t *  @example\n\t * Tone.Transport.start(); //the transport must be started\n\t * Tone.Transport.nextSubdivision(\"4n\");\n\t */\n\tTone.Transport.prototype.nextSubdivision = function(subdivision){\n\t\tsubdivision = this.toSeconds(subdivision);\n\t\t//if the transport's not started, return 0\n\t\tvar now;\n\t\tif (this.state === Tone.State.Started){\n\t\t\tnow = this._clock._nextTick;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t\tvar transportPos = Tone.Time(this.ticks, \"i\").eval();\n\t\tvar remainingTime = subdivision - (transportPos % subdivision);\n\t\tif (remainingTime === 0){\n\t\t\tremainingTime = subdivision;\n\t\t}\n\t\treturn now + remainingTime;\n\t};\n\n\t/**\n\t *  Attaches the signal to the tempo control signal so that \n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio. \n\t *  \n\t *  @param  {Tone.Signal} signal \n\t *  @param {number=} ratio Optionally pass in the ratio between\n\t *                         the two signals. Otherwise it will be computed\n\t *                         based on their current values. \n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.syncSignal = function(signal, ratio){\n\t\tif (!ratio){\n\t\t\t//get the sync ratio\n\t\t\tif (signal._param.value !== 0){\n\t\t\t\tratio = signal._param.value / this.bpm._param.value;\n\t\t\t} else {\n\t\t\t\tratio = 0;\n\t\t\t}\n\t\t}\n\t\tvar ratioSignal = new Tone.Gain(ratio);\n\t\tthis.bpm.chain(ratioSignal, signal._param);\n\t\tthis._syncedSignals.push({\n\t\t\t\"ratio\" : ratioSignal,\n\t\t\t\"signal\" : signal,\n\t\t\t\"initial\" : signal._param.value\n\t\t});\n\t\tsignal._param.value = 0;\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Unsyncs a previously synced signal from the transport's control. \n\t *  See Tone.Transport.syncSignal.\n\t *  @param  {Tone.Signal} signal \n\t *  @returns {Tone.Transport} this\n\t */\n\tTone.Transport.prototype.unsyncSignal = function(signal){\n\t\tfor (var i = this._syncedSignals.length - 1; i >= 0; i--){\n\t\t\tvar syncedSignal = this._syncedSignals[i];\n\t\t\tif (syncedSignal.signal === signal){\n\t\t\t\tsyncedSignal.ratio.dispose();\n\t\t\t\tsyncedSignal.signal._param.value = syncedSignal.initial;\n\t\t\t\tthis._syncedSignals.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up. \n\t *  @returns {Tone.Transport} this\n\t *  @private\n\t */\n\tTone.Transport.prototype.dispose = function(){\n\t\tTone.Emitter.prototype.dispose.call(this);\n\t\tthis._clock.dispose();\n\t\tthis._clock = null;\n\t\tthis._writable(\"bpm\");\n\t\tthis.bpm = null;\n\t\tthis._timeline.dispose();\n\t\tthis._timeline = null;\n\t\tthis._onceEvents.dispose();\n\t\tthis._onceEvents = null;\n\t\tthis._repeatedEvents.dispose();\n\t\tthis._repeatedEvents = null;\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////////\n\t//\tINITIALIZATION\n\t///////////////////////////////////////////////////////////////////////////////\n\n\tvar TransportConstructor = Tone.Transport;\n\n\tTone._initAudioContext(function(){\n\t\tif (typeof Tone.Transport === \"function\"){\n\t\t\t//a single transport object\n\t\t\tTone.Transport = new Tone.Transport();\n\t\t} else {\n\t\t\t//stop the clock\n\t\t\tTone.Transport.stop();\n\t\t\t//get the previous values\n\t\t\tvar prevSettings = Tone.Transport.get();\n\t\t\t//destory the old transport\n\t\t\tTone.Transport.dispose();\n\t\t\t//make new Transport insides\n\t\t\tTransportConstructor.call(Tone.Transport);\n\t\t\t//set the previous config\n\t\t\tTone.Transport.set(prevSettings);\n\t\t}\n\t});\n\n\treturn Tone.Transport;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(17), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t *          While the callback is not sample-accurate (it is still susceptible to\n\t *          loose JS timing), the time passed in as the argument to the callback\n\t *          is precise. For most applications, it is better to use Tone.Transport\n\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t *\n\t * \t@constructor\n\t * \t@extends {Tone}\n\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t * \t@param {Frequency} frequency The rate of the callback\n\t * \t@example\n\t * //the callback will be invoked approximately once a second\n\t * //and will print the time exactly once a second apart.\n\t * var clock = new Tone.Clock(function(time){\n\t * \tconsole.log(time);\n\t * }, 1);\n\t */\n\tTone.Clock = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"callback\", \"frequency\"], Tone.Clock.defaults);\n\n\t\t/**\n\t\t *  The callback function to invoke at the scheduled tick.\n\t\t *  @type  {Function}\n\t\t */\n\t\tthis.callback = options.callback;\n\n\t\t/**\n\t\t *  The time which the clock will schedule events in advance\n\t\t *  of the current time. Scheduling notes in advance improves\n\t\t *  performance and decreases the chance for clicks caused\n\t\t *  by scheduling events in the past. If set to \"auto\",\n\t\t *  this value will be automatically computed based on the \n\t\t *  rate of requestAnimationFrame (0.016 seconds). Larger values\n\t\t *  will yeild better performance, but at the cost of latency. \n\t\t *  Values less than 0.016 are not recommended.\n\t\t *  @type {Number|String}\n\t\t */\n\t\tthis._lookAhead = \"auto\";\n\n\t\t/**\n\t\t *  The lookahead value which was automatically\n\t\t *  computed using a time-based averaging.\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._computedLookAhead = UPDATE_RATE/1000;\n\n\t\t/**\n\t\t *  The next time the callback is scheduled.\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._nextTick = -1;\n\n\t\t/**\n\t\t *  The last time the callback was invoked\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._lastUpdate = -1;\n\n\t\t/**\n\t\t *  The id of the requestAnimationFrame\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._loopID = -1;\n\n\t\t/**\n\t\t *  The rate the callback function should be invoked. \n\t\t *  @type  {BPM}\n\t\t *  @signal\n\t\t */\n\t\tthis.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);\n\n\t\t/**\n\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t *  and increments after the callback was invoked. \n\t\t *  @type {Ticks}\n\t\t *  @readOnly\n\t\t */\n\t\tthis.ticks = 0;\n\n\t\t/**\n\t\t *  The state timeline\n\t\t *  @type {Tone.TimelineState}\n\t\t *  @private\n\t\t */\n\t\tthis._state = new Tone.TimelineState(Tone.State.Stopped);\n\n\t\t/**\n\t\t *  The loop function bound to its context. \n\t\t *  This is necessary to remove the event in the end.\n\t\t *  @type {Function}\n\t\t *  @private\n\t\t */\n\t\tthis._boundLoop = this._loop.bind(this);\n\n\t\t//bind a callback to the worker thread\n    \tTone.Clock._worker.addEventListener(\"message\", this._boundLoop);\n\n\t\tthis._readOnly(\"frequency\");\n\t};\n\n\tTone.extend(Tone.Clock);\n\n\t/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */\n\tTone.Clock.defaults = {\n\t\t\"callback\" : Tone.noOp,\n\t\t\"frequency\" : 1,\n\t\t\"lookAhead\" : \"auto\",\n\t};\n\n\t/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Clock#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.Clock.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._state.getStateAtTime(this.now());\n\t\t}\n\t});\n\n\t/**\n\t *  The time which the clock will schedule events in advance\n\t *  of the current time. Scheduling notes in advance improves\n\t *  performance and decreases the chance for clicks caused\n\t *  by scheduling events in the past. If set to \"auto\",\n\t *  this value will be automatically computed based on the \n\t *  rate of requestAnimationFrame (0.016 seconds). Larger values\n\t *  will yeild better performance, but at the cost of latency. \n\t *  Values less than 0.016 are not recommended.\n\t *  @type {Number|String}\n\t *  @memberOf Tone.Clock#\n\t *  @name lookAhead\n\t */\n\tObject.defineProperty(Tone.Clock.prototype, \"lookAhead\", {\n\t\tget : function(){\n\t\t\treturn this._lookAhead;\n\t\t},\n\t\tset : function(val){\n\t\t\tif (val === \"auto\"){\n\t\t\t\tthis._lookAhead = \"auto\";\n\t\t\t} else {\n\t\t\t\tthis._lookAhead = this.toSeconds(val);\n\t\t\t}\n\t\t}\n\t});\n\n\n\t/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  {Time}  time    The time the clock should start\n\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t *  @return  {Tone.Clock}  this\n\t */\n\tTone.Clock.prototype.start = function(time, offset){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getStateAtTime(time) !== Tone.State.Started){\n\t\t\tthis._state.addEvent({\n\t\t\t\t\"state\" : Tone.State.Started, \n\t\t\t\t\"time\" : time,\n\t\t\t\t\"offset\" : offset\n\t\t\t});\n\t\t}\n\t\treturn this;\t\n\t};\n\n\t/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param {Time} [time=now] The time when the clock should stop.\n\t *  @returns {Tone.Clock} this\n\t *  @example\n\t * clock.stop();\n\t */\n\tTone.Clock.prototype.stop = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tthis._state.cancel(time);\n\t\tthis._state.setStateAtTime(Tone.State.Stopped, time);\n\t\treturn this;\t\n\t};\n\n\n\t/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param {Time} [time=now] The time when the clock should stop.\n\t *  @returns {Tone.Clock} this\n\t */\n\tTone.Clock.prototype.pause = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._state.getStateAtTime(time) === Tone.State.Started){\n\t\t\tthis._state.setStateAtTime(Tone.State.Paused, time);\n\t\t}\n\t\treturn this;\t\n\t};\n\n\t/**\n\t *  The scheduling loop.\n\t *  @param  {Number}  time  The current page time starting from 0\n\t *                          when the page was loaded.\n\t *  @private\n\t */\n\tTone.Clock.prototype._loop = function(){\n\t\t//compute the look ahead\n\t\tif (this._lookAhead === \"auto\"){\n\t\t\tvar time = this.now();\n\t\t\tif (this._lastUpdate !== -1){\n\t\t\t\tvar diff = (time - this._lastUpdate);\n\t\t\t\t//max size on the diff\n\t\t\t\tdiff = Math.min(10 * UPDATE_RATE/1000, diff);\n\t\t\t\t//averaging\n\t\t\t\tthis._computedLookAhead = (9 * this._computedLookAhead + diff) / 10;\n\t\t\t}\n\t\t\tthis._lastUpdate = time;\n\t\t} else {\n\t\t\tthis._computedLookAhead = this._lookAhead;\n\t\t}\n\t\t//get the frequency value to compute the value of the next loop\n\t\tvar now = this.now();\n\t\t//if it's started\n\t\tvar lookAhead = this._computedLookAhead * 2;\n\t\tvar event = this._state.getEvent(now + lookAhead);\n\t\tvar state = Tone.State.Stopped;\n\t\tif (event){\n\t\t\tstate = event.state;\n\t\t\t//if it was stopped and now started\n\t\t\tif (this._nextTick === -1 && state === Tone.State.Started){\n\t\t\t\tthis._nextTick = event.time;\n\t\t\t\tif (!this.isUndef(event.offset)){\n\t\t\t\t\tthis.ticks = event.offset;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (state === Tone.State.Started){\n\t\t\twhile (now + lookAhead > this._nextTick){\n\t\t\t\tvar tickTime = this._nextTick;\n\t\t\t\tthis._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);\n\t\t\t\tthis.callback(tickTime);\n\t\t\t\tthis.ticks++;\n\t\t\t}\n\t\t} else if (state === Tone.State.Stopped){\n\t\t\tthis._nextTick = -1;\n\t\t\tthis.ticks = 0;\n\t\t} else if (state === Tone.State.Paused){\n\t\t\tthis._nextTick = -1;\n\t\t}\n\t};\n\n\t/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  {Time}  time  The time to query.\n\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t *  @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */\n\tTone.Clock.prototype.getStateAtTime = function(time){\n\t\treturn this._state.getStateAtTime(time);\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @returns {Tone.Clock} this\n\t */\n\tTone.Clock.prototype.dispose = function(){\n\t\tcancelAnimationFrame(this._loopID);\n\t\tTone.TimelineState.prototype.dispose.call(this);\n\t\tTone.Clock._worker.removeEventListener(\"message\", this._boundLoop);\n\t\tthis._writable(\"frequency\");\n\t\tthis.frequency.dispose();\n\t\tthis.frequency = null;\n\t\tthis._boundLoop = null;\n\t\tthis._nextTick = Infinity;\n\t\tthis.callback = null;\n\t\tthis._state.dispose();\n\t\tthis._state = null;\n\t};\n\n\t//URL Shim\n\twindow.URL = window.URL || window.webkitURL;\n\n\t/**\n\t *  The update rate in Milliseconds\n\t *  @const\n\t *  @type  {Number}\n\t *  @private\n\t */\n\tvar UPDATE_RATE = 20;\n\n\t/**\n\t *  The script which runs in a web worker\n\t *  @type {Blob}\n\t *  @private\n\t */\n\tvar blob = new Blob([\"setInterval(function(){self.postMessage('tick')}, \"+UPDATE_RATE+\")\"]);\n\n\t/**\n\t *  Create a blob url from the Blob\n\t *  @type  {URL}\n\t *  @private\n\t */\n  \tvar blobUrl = URL.createObjectURL(blob);\n\n  \t/**\n\t *  The Worker which generates a regular callback\n\t *  @type {Worker}\n\t *  @private\n\t *  @static\n\t */\n\tTone.Clock._worker = new Worker(blobUrl);\n\n\treturn Tone.Clock;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(18), __webpack_require__(21)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A signal which adds the method getValueAtTime. \n\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t *  @extends {Tone.Param}\n\t *  @param {Number=} value The initial value of the signal\n\t *  @param {String=} units The conversion units of the signal.\n\t */\n\tTone.TimelineSignal = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"value\", \"units\"], Tone.Signal.defaults);\n\t\t\n\t\t/**\n\t\t *  The scheduled events\n\t\t *  @type {Tone.Timeline}\n\t\t *  @private\n\t\t */\n\t\tthis._events = new Tone.Timeline(10);\n\n\t\t//constructors\n\t\tTone.Signal.apply(this, options);\n\t\toptions.param = this._param;\n\t\tTone.Param.call(this, options);\n\n\t\t/**\n\t\t *  The initial scheduled value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._initial = this._fromUnits(this._param.value);\n\t};\n\n\tTone.extend(Tone.TimelineSignal, Tone.Param);\n\n\t/**\n\t *  The event types of a schedulable signal.\n\t *  @enum {String}\n\t *  @private\n\t */\n\tTone.TimelineSignal.Type = {\n\t\tLinear : \"linear\",\n\t\tExponential : \"exponential\",\n\t\tTarget : \"target\",\n\t\tCurve : \"curve\",\n\t\tSet : \"set\"\n\t};\n\n\t/**\n\t * The current value of the signal. \n\t * @memberOf Tone.TimelineSignal#\n\t * @type {Number}\n\t * @name value\n\t */\n\tObject.defineProperty(Tone.TimelineSignal.prototype, \"value\", {\n\t\tget : function(){\n\t\t\tvar now = this.now();\n\t\t\tvar val = this.getValueAtTime(now);\n\t\t\treturn this._toUnits(val);\n\t\t},\n\t\tset : function(value){\n\t\t\tvar convertedVal = this._fromUnits(value);\n\t\t\tthis._initial = convertedVal;\n\t\t\tthis.cancelScheduledValues();\n\t\t\tthis._param.value = convertedVal;\n\t\t}\n\t});\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tSCHEDULING\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.TimelineSignal} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */\n\tTone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t\tvalue = this._fromUnits(value);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis._events.addEvent({\n\t\t\t\"type\" : Tone.TimelineSignal.Type.Set,\n\t\t\t\"value\" : value,\n\t\t\t\"time\" : startTime\n\t\t});\n\t\t//invoke the original event\n\t\tthis._param.setValueAtTime(value, startTime);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.TimelineSignal} this\n\t */\n\tTone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t\tvalue = this._fromUnits(value);\n\t\tendTime = this.toSeconds(endTime);\n\t\tthis._events.addEvent({\n\t\t\t\"type\" : Tone.TimelineSignal.Type.Linear,\n\t\t\t\"value\" : value,\n\t\t\t\"time\" : endTime\n\t\t});\n\t\tthis._param.linearRampToValueAtTime(value, endTime);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.TimelineSignal} this\n\t */\n\tTone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t\t//get the previous event and make sure it's not starting from 0\n\t\tvar beforeEvent = this._searchBefore(endTime);\n\t\tif (beforeEvent && beforeEvent.value === 0){\n\t\t\t//reschedule that event\n\t\t\tthis.setValueAtTime(this._minOutput, beforeEvent.time);\n\t\t}\n\t\tvalue = this._fromUnits(value);\n\t\tvar setValue = Math.max(value, this._minOutput);\n\t\tendTime = this.toSeconds(endTime);\n\t\tthis._events.addEvent({\n\t\t\t\"type\" : Tone.TimelineSignal.Type.Exponential,\n\t\t\t\"value\" : setValue,\n\t\t\t\"time\" : endTime\n\t\t});\n\t\t//if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t\tif (value < this._minOutput){\n\t\t\tthis._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t\t\tthis.setValueAtTime(0, endTime);\n\t\t} else {\n\t\t\tthis._param.exponentialRampToValueAtTime(value, endTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.TimelineSignal} this \n\t */\n\tTone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t\tvalue = this._fromUnits(value);\n\t\tvalue = Math.max(this._minOutput, value);\n\t\ttimeConstant = Math.max(this._minOutput, timeConstant);\n\t\tstartTime = this.toSeconds(startTime);\n\t\tthis._events.addEvent({\n\t\t\t\"type\" : Tone.TimelineSignal.Type.Target,\n\t\t\t\"value\" : value,\n\t\t\t\"time\" : startTime,\n\t\t\t\"constant\" : timeConstant\n\t\t});\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t *  @param {Float32Array} values        \n\t *  @param {Time} startTime    \n\t *  @param {Time} duration\n\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t *  @returns {Tone.TimelineSignal} this \n\t */\n\tTone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t\tscaling = this.defaultArg(scaling, 1);\n\t\t//copy the array\n\t\tvar floats = new Array(values.length);\n\t\tfor (var i = 0; i < floats.length; i++){\n\t\t\tfloats[i] = this._fromUnits(values[i]) * scaling;\n\t\t}\n\t\tstartTime = this.toSeconds(startTime);\n\t\tduration = this.toSeconds(duration);\n\t\tthis._events.addEvent({\n\t\t\t\"type\" : Tone.TimelineSignal.Type.Curve,\n\t\t\t\"value\" : floats,\n\t\t\t\"time\" : startTime,\n\t\t\t\"duration\" : duration\n\t\t});\n\t\t//set the first value\n\t\tthis._param.setValueAtTime(floats[0], startTime);\n\t\t//schedule a lienar ramp for each of the segments\n\t\tfor (var j = 1; j < floats.length; j++){\n\t\t\tvar segmentTime = startTime + (j / (floats.length - 1) * duration);\n\t\t\tthis._param.linearRampToValueAtTime(floats[j], segmentTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.TimelineSignal} this\n\t */\n\tTone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t\tthis._events.cancel(after);\n\t\tthis._param.cancelScheduledValues(this.toSeconds(after));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Sets the computed value at the given time. This provides\n\t *  a point from which a linear or exponential curve\n\t *  can be scheduled after. Will cancel events after \n\t *  the given time and shorten the currently scheduled\n\t *  linear or exponential ramp so that it ends at `time` .\n\t *  This is to avoid discontinuities and clicks in envelopes. \n\t *  @param {Time} time When to set the ramp point\n\t *  @returns {Tone.TimelineSignal} this\n\t */\n\tTone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t\ttime = this.toSeconds(time);\n\t\t//get the value at the given time\n\t\tvar val = this._toUnits(this.getValueAtTime(time));\n\t\t//if there is an event at the given time\n\t\t//and that even is not a \"set\"\n\t\tvar before = this._searchBefore(time);\n\t\tif (before && before.time === time){\n\t\t\t//remove everything after\n\t\t\tthis.cancelScheduledValues(time + this.sampleTime);\n\t\t} else if (before && \n\t\t\t\t   before.type === Tone.TimelineSignal.Type.Curve &&\n\t\t\t\t   before.time + before.duration > time){\n\t\t\t//if the curve is still playing\n\t\t\t//cancel the curve\n\t\t\tthis.cancelScheduledValues(time);\n\t\t\tthis.linearRampToValueAtTime(val, time);\n\t\t} else {\n\t\t\t//reschedule the next event to end at the given time\n\t\t\tvar after = this._searchAfter(time);\n\t\t\tif (after){\n\t\t\t\t//cancel the next event(s)\n\t\t\t\tthis.cancelScheduledValues(time);\n\t\t\t\tif (after.type === Tone.TimelineSignal.Type.Linear){\n\t\t\t\t\tthis.linearRampToValueAtTime(val, time);\n\t\t\t\t} else if (after.type === Tone.TimelineSignal.Type.Exponential){\n\t\t\t\t\tthis.exponentialRampToValueAtTime(val, time);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.setValueAtTime(val, time);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Do a linear ramp to the given value between the start and finish times.\n\t *  @param {Number} value The value to ramp to.\n\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t *  @param {Time} finish The ending anchor point by which the value of\n\t *                       the signal will equal the given value.\n\t *  @returns {Tone.TimelineSignal} this\n\t */\n\tTone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t\tthis.setRampPoint(start);\n\t\tthis.linearRampToValueAtTime(value, finish);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Do a exponential ramp to the given value between the start and finish times.\n\t *  @param {Number} value The value to ramp to.\n\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t *  @param {Time} finish The ending anchor point by which the value of\n\t *                       the signal will equal the given value.\n\t *  @returns {Tone.TimelineSignal} this\n\t */\n\tTone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t\tthis.setRampPoint(start);\n\t\tthis.exponentialRampToValueAtTime(value, finish);\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tGETTING SCHEDULED VALUES\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Returns the value before or equal to the given time\n\t *  @param  {Number}  time  The time to query\n\t *  @return  {Object}  The event at or before the given time.\n\t *  @private\n\t */\n\tTone.TimelineSignal.prototype._searchBefore = function(time){\n\t\treturn this._events.getEvent(time);\n\t};\n\n\t/**\n\t *  The event after the given time\n\t *  @param  {Number}  time  The time to query.\n\t *  @return  {Object}  The next event after the given time\n\t *  @private\n\t */\n\tTone.TimelineSignal.prototype._searchAfter = function(time){\n\t\treturn this._events.getEventAfter(time);\n\t};\n\n\t/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t *  @param  {Number}  time  The time in seconds.\n\t *  @return  {Number}  The scheduled value at the given time.\n\t */\n\tTone.TimelineSignal.prototype.getValueAtTime = function(time){\n\t\tvar after = this._searchAfter(time);\n\t\tvar before = this._searchBefore(time);\n\t\tvar value = this._initial;\n\t\t//if it was set by\n\t\tif (before === null){\n\t\t\tvalue = this._initial;\n\t\t} else if (before.type === Tone.TimelineSignal.Type.Target){\n\t\t\tvar previous = this._events.getEventBefore(before.time);\n\t\t\tvar previouVal;\n\t\t\tif (previous === null){\n\t\t\t\tpreviouVal = this._initial;\n\t\t\t} else {\n\t\t\t\tpreviouVal = previous.value;\n\t\t\t}\n\t\t\tvalue = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);\n\t\t} else if (before.type === Tone.TimelineSignal.Type.Curve){\n\t\t\tvalue = this._curveInterpolate(before.time, before.value, before.duration, time);\n\t\t} else if (after === null){\n\t\t\tvalue = before.value;\n\t\t} else if (after.type === Tone.TimelineSignal.Type.Linear){\n\t\t\tvalue = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t\t} else if (after.type === Tone.TimelineSignal.Type.Exponential){\n\t\t\tvalue = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t\t} else {\n\t\t\tvalue = before.value;\n\t\t}\n\t\treturn value;\n\t};\n\n\t/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.TimelineSignal} this\n\t *  @method\n\t */\n\tTone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tAUTOMATION CURVE CALCULATIONS\n\t//\tMIT License, copyright (c) 2014 Jordan Santell\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t *  @private\n\t */\n\tTone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t\treturn v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t};\n\n\t/**\n\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t *  @private\n\t */\n\tTone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t\treturn v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t};\n\n\t/**\n\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t *  @private\n\t */\n\tTone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t\tv0 = Math.max(this._minOutput, v0);\n\t\treturn v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t};\n\n\t/**\n\t *  Calculates the the value along the curve produced by setValueCurveAtTime\n\t *  @private\n\t */\n\tTone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {\n\t\tvar len = curve.length;\n\t\t// If time is after duration, return the last curve value\n\t\tif (time >= start + duration) {\n\t\t\treturn curve[len - 1];\n\t\t} else if (time <= start){\n\t\t\treturn curve[0];\n\t\t} else {\n\t\t\tvar progress = (time - start) / duration;\n\t\t\tvar lowerIndex = Math.floor((len - 1) * progress);\n\t\t\tvar upperIndex = Math.ceil((len - 1) * progress);\n\t\t\tvar lowerVal = curve[lowerIndex];\n\t\t\tvar upperVal = curve[upperIndex];\n\t\t\tif (upperIndex === lowerIndex){\n\t\t\t\treturn lowerVal;\n\t\t\t} else {\n\t\t\t\treturn this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return {Tone.TimelineSignal} this\n\t */\n\tTone.TimelineSignal.prototype.dispose = function(){\n\t\tTone.Signal.prototype.dispose.call(this);\n\t\tTone.Param.prototype.dispose.call(this);\n\t\tthis._events.dispose();\n\t\tthis._events = null;\n\t};\n\n\treturn Tone.TimelineSignal;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(19), __webpack_require__(5), __webpack_require__(4), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t *          has all of the methods available to native Web Audio \n\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t *          as well as additional conveniences. Read more about working with signals \n\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Param}\n\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t *                                     is passed in, that parameter will be wrapped\n\t *                                     and controlled by the Signal. \n\t *  @param {string} [units=Number] unit The units the signal is in. \n\t *  @example\n\t * var signal = new Tone.Signal(10);\n\t */\n\tTone.Signal = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"value\", \"units\"], Tone.Signal.defaults);\n\n\t\t/**\n\t\t * The node where the constant signal value is scaled.\n\t\t * @type {GainNode}\n\t\t * @private\n\t\t */\n\t\tthis.output = this._gain = this.context.createGain();\n\n\t\toptions.param = this._gain.gain;\n\t\tTone.Param.call(this, options);\n\n\t\t/**\n\t\t * The node where the value is set.\n\t\t * @type {Tone.Param}\n\t\t * @private\n\t\t */\n\t\tthis.input = this._param = this._gain.gain;\n\n\t\t//connect the const output to the node output\n\t\tTone.Signal._constant.chain(this._gain);\n\t};\n\n\tTone.extend(Tone.Signal, Tone.Param);\n\n\t/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @static\n\t *  @const\n\t */\n\tTone.Signal.defaults = {\n\t\t\"value\" : 0,\n\t\t\"units\" : Tone.Type.Default,\n\t\t\"convert\" : true,\n\t};\n\n\t/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t *  @method\n\t */\n\tTone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\n\t/**\n\t *  dispose and disconnect\n\t *  @returns {Tone.Signal} this\n\t */\n\tTone.Signal.prototype.dispose = function(){\n\t\tTone.Param.prototype.dispose.call(this);\n\t\tthis._param = null;\n\t\tthis._gain.disconnect();\n\t\tthis._gain = null;\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tSTATIC\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Generates a constant output of 1.\n\t *  @static\n\t *  @private\n\t *  @const\n\t *  @type {AudioBufferSourceNode}\n\t */\n\tTone.Signal._constant = null;\n\n\t/**\n\t *  initializer function\n\t */\n\tTone._initAudioContext(function(audioContext){\n\t\tvar buffer = audioContext.createBuffer(1, 128, audioContext.sampleRate);\n\t\tvar arr = buffer.getChannelData(0);\n\t\tfor (var i = 0; i < arr.length; i++){\n\t\t\tarr[i] = 1;\n\t\t}\n\t\tTone.Signal._constant = audioContext.createBufferSource();\n\t\tTone.Signal._constant.channelCount = 1;\n\t\tTone.Signal._constant.channelCountMode = \"explicit\";\n\t\tTone.Signal._constant.buffer = buffer;\n\t\tTone.Signal._constant.loop = true;\n\t\tTone.Signal._constant.start(0);\n\t\tTone.Signal._constant.noGC();\n\t});\n\n\treturn Tone.Signal;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9zaWduYWwvU2lnbmFsLmpzPzNmYTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6ImdFQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixhQUFhLGtCQUFrQjtBQUMvQjtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHNDQUFzQztBQUNuRCxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGVBQWUsZ0JBQWdCO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQSxDQUFDIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFtcIlRvbmUvY29yZS9Ub25lXCIsIFwiVG9uZS9zaWduYWwvV2F2ZVNoYXBlclwiLCBcIlRvbmUvdHlwZS9UeXBlXCIsIFwiVG9uZS9jb3JlL1BhcmFtXCIsIFwiVG9uZS9jb3JlL0dhaW5cIl0sIGZ1bmN0aW9uKFRvbmUpe1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiAgQGNsYXNzICBBIHNpZ25hbCBpcyBhbiBhdWRpby1yYXRlIHZhbHVlLiBUb25lLlNpZ25hbCBpcyBhIGNvcmUgY29tcG9uZW50IG9mIHRoZSBsaWJyYXJ5LlxuXHQgKiAgICAgICAgICBVbmxpa2UgYSBudW1iZXIsIFNpZ25hbHMgY2FuIGJlIHNjaGVkdWxlZCB3aXRoIHNhbXBsZS1sZXZlbCBhY2N1cmFjeS4gVG9uZS5TaWduYWxcblx0ICogICAgICAgICAgaGFzIGFsbCBvZiB0aGUgbWV0aG9kcyBhdmFpbGFibGUgdG8gbmF0aXZlIFdlYiBBdWRpbyBcblx0ICogICAgICAgICAgW0F1ZGlvUGFyYW1dKGh0dHA6Ly93ZWJhdWRpby5naXRodWIuaW8vd2ViLWF1ZGlvLWFwaS8jdGhlLWF1ZGlvcGFyYW0taW50ZXJmYWNlKVxuXHQgKiAgICAgICAgICBhcyB3ZWxsIGFzIGFkZGl0aW9uYWwgY29udmVuaWVuY2VzLiBSZWFkIG1vcmUgYWJvdXQgd29ya2luZyB3aXRoIHNpZ25hbHMgXG5cdCAqICAgICAgICAgIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vVG9uZWpzL1RvbmUuanMvd2lraS9TaWduYWxzKS5cblx0ICpcblx0ICogIEBjb25zdHJ1Y3RvclxuXHQgKiAgQGV4dGVuZHMge1RvbmUuUGFyYW19XG5cdCAqICBAcGFyYW0ge051bWJlcnxBdWRpb1BhcmFtfSBbdmFsdWVdIEluaXRpYWwgdmFsdWUgb2YgdGhlIHNpZ25hbC4gSWYgYW4gQXVkaW9QYXJhbVxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBwYXNzZWQgaW4sIHRoYXQgcGFyYW1ldGVyIHdpbGwgYmUgd3JhcHBlZFxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgY29udHJvbGxlZCBieSB0aGUgU2lnbmFsLiBcblx0ICogIEBwYXJhbSB7c3RyaW5nfSBbdW5pdHM9TnVtYmVyXSB1bml0IFRoZSB1bml0cyB0aGUgc2lnbmFsIGlzIGluLiBcblx0ICogIEBleGFtcGxlXG5cdCAqIHZhciBzaWduYWwgPSBuZXcgVG9uZS5TaWduYWwoMTApO1xuXHQgKi9cblx0VG9uZS5TaWduYWwgPSBmdW5jdGlvbigpe1xuXG5cdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnNPYmplY3QoYXJndW1lbnRzLCBbXCJ2YWx1ZVwiLCBcInVuaXRzXCJdLCBUb25lLlNpZ25hbC5kZWZhdWx0cyk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB3aGVyZSB0aGUgY29uc3RhbnQgc2lnbmFsIHZhbHVlIGlzIHNjYWxlZC5cblx0XHQgKiBAdHlwZSB7R2Fpbk5vZGV9XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR0aGlzLm91dHB1dCA9IHRoaXMuX2dhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuXG5cdFx0b3B0aW9ucy5wYXJhbSA9IHRoaXMuX2dhaW4uZ2Fpbjtcblx0XHRUb25lLlBhcmFtLmNhbGwodGhpcywgb3B0aW9ucyk7XG5cblx0XHQvKipcblx0XHQgKiBUaGUgbm9kZSB3aGVyZSB0aGUgdmFsdWUgaXMgc2V0LlxuXHRcdCAqIEB0eXBlIHtUb25lLlBhcmFtfVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy5pbnB1dCA9IHRoaXMuX3BhcmFtID0gdGhpcy5fZ2Fpbi5nYWluO1xuXG5cdFx0Ly9jb25uZWN0IHRoZSBjb25zdCBvdXRwdXQgdG8gdGhlIG5vZGUgb3V0cHV0XG5cdFx0VG9uZS5TaWduYWwuX2NvbnN0YW50LmNoYWluKHRoaXMuX2dhaW4pO1xuXHR9O1xuXG5cdFRvbmUuZXh0ZW5kKFRvbmUuU2lnbmFsLCBUb25lLlBhcmFtKTtcblxuXHQvKipcblx0ICogIFRoZSBkZWZhdWx0IHZhbHVlc1xuXHQgKiAgQHR5cGUgIHtPYmplY3R9XG5cdCAqICBAc3RhdGljXG5cdCAqICBAY29uc3Rcblx0ICovXG5cdFRvbmUuU2lnbmFsLmRlZmF1bHRzID0ge1xuXHRcdFwidmFsdWVcIiA6IDAsXG5cdFx0XCJ1bml0c1wiIDogVG9uZS5UeXBlLkRlZmF1bHQsXG5cdFx0XCJjb252ZXJ0XCIgOiB0cnVlLFxuXHR9O1xuXG5cdC8qKlxuXHQgKiAgV2hlbiBzaWduYWxzIGNvbm5lY3QgdG8gb3RoZXIgc2lnbmFscyBvciBBdWRpb1BhcmFtcywgXG5cdCAqICB0aGV5IHRha2Ugb3ZlciB0aGUgb3V0cHV0IHZhbHVlIG9mIHRoYXQgc2lnbmFsIG9yIEF1ZGlvUGFyYW0uIFxuXHQgKiAgRm9yIGFsbCBvdGhlciBub2RlcywgdGhlIGJlaGF2aW9yIGlzIHRoZSBzYW1lIGFzIGEgZGVmYXVsdCA8Y29kZT5jb25uZWN0PC9jb2RlPi4gXG5cdCAqXG5cdCAqICBAb3ZlcnJpZGVcblx0ICogIEBwYXJhbSB7QXVkaW9QYXJhbXxBdWRpb05vZGV8VG9uZS5TaWduYWx8VG9uZX0gbm9kZSBcblx0ICogIEBwYXJhbSB7bnVtYmVyfSBbb3V0cHV0TnVtYmVyPTBdIFRoZSBvdXRwdXQgbnVtYmVyIHRvIGNvbm5lY3QgZnJvbS5cblx0ICogIEBwYXJhbSB7bnVtYmVyfSBbaW5wdXROdW1iZXI9MF0gVGhlIGlucHV0IG51bWJlciB0byBjb25uZWN0IHRvLlxuXHQgKiAgQHJldHVybnMge1RvbmUuU2lnbmFsQmFzZX0gdGhpc1xuXHQgKiAgQG1ldGhvZFxuXHQgKi9cblx0VG9uZS5TaWduYWwucHJvdG90eXBlLmNvbm5lY3QgPSBUb25lLlNpZ25hbEJhc2UucHJvdG90eXBlLmNvbm5lY3Q7XG5cblx0LyoqXG5cdCAqICBkaXNwb3NlIGFuZCBkaXNjb25uZWN0XG5cdCAqICBAcmV0dXJucyB7VG9uZS5TaWduYWx9IHRoaXNcblx0ICovXG5cdFRvbmUuU2lnbmFsLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24oKXtcblx0XHRUb25lLlBhcmFtLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdFx0dGhpcy5fcGFyYW0gPSBudWxsO1xuXHRcdHRoaXMuX2dhaW4uZGlzY29ubmVjdCgpO1xuXHRcdHRoaXMuX2dhaW4gPSBudWxsO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvL1x0U1RBVElDXG5cdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8qKlxuXHQgKiAgR2VuZXJhdGVzIGEgY29uc3RhbnQgb3V0cHV0IG9mIDEuXG5cdCAqICBAc3RhdGljXG5cdCAqICBAcHJpdmF0ZVxuXHQgKiAgQGNvbnN0XG5cdCAqICBAdHlwZSB7QXVkaW9CdWZmZXJTb3VyY2VOb2RlfVxuXHQgKi9cblx0VG9uZS5TaWduYWwuX2NvbnN0YW50ID0gbnVsbDtcblxuXHQvKipcblx0ICogIGluaXRpYWxpemVyIGZ1bmN0aW9uXG5cdCAqL1xuXHRUb25lLl9pbml0QXVkaW9Db250ZXh0KGZ1bmN0aW9uKGF1ZGlvQ29udGV4dCl7XG5cdFx0dmFyIGJ1ZmZlciA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXIoMSwgMTI4LCBhdWRpb0NvbnRleHQuc2FtcGxlUmF0ZSk7XG5cdFx0dmFyIGFyciA9IGJ1ZmZlci5nZXRDaGFubmVsRGF0YSgwKTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKyl7XG5cdFx0XHRhcnJbaV0gPSAxO1xuXHRcdH1cblx0XHRUb25lLlNpZ25hbC5fY29uc3RhbnQgPSBhdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XG5cdFx0VG9uZS5TaWduYWwuX2NvbnN0YW50LmNoYW5uZWxDb3VudCA9IDE7XG5cdFx0VG9uZS5TaWduYWwuX2NvbnN0YW50LmNoYW5uZWxDb3VudE1vZGUgPSBcImV4cGxpY2l0XCI7XG5cdFx0VG9uZS5TaWduYWwuX2NvbnN0YW50LmJ1ZmZlciA9IGJ1ZmZlcjtcblx0XHRUb25lLlNpZ25hbC5fY29uc3RhbnQubG9vcCA9IHRydWU7XG5cdFx0VG9uZS5TaWduYWwuX2NvbnN0YW50LnN0YXJ0KDApO1xuXHRcdFRvbmUuU2lnbmFsLl9jb25zdGFudC5ub0dDKCk7XG5cdH0pO1xuXG5cdHJldHVybiBUb25lLlNpZ25hbDtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9zaWduYWwvU2lnbmFsLmpzXG4gKiogbW9kdWxlIGlkID0gMThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Wraps the native Web Audio API \n\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t *                                    The mapping function should take two arguments: \n\t *                                    the first is the value at the current position \n\t *                                    and the second is the array position. \n\t *                                    If the argument is an array, that array will be\n\t *                                    set as the wave shaping function. The input\n\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t *                                    signal can take on any numerical values. \n\t *                                    \n\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t *  @example\n\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t * \treturn val * 2;\n\t * }, 2048);\n\t *  @example\n\t * //a waveshaper can also be constructed with an array of values\n\t * var invert = new Tone.WaveShaper([1, -1]);\n\t */\n\tTone.WaveShaper = function(mapping, bufferLen){\n\n\t\t/**\n\t\t *  the waveshaper\n\t\t *  @type {WaveShaperNode}\n\t\t *  @private\n\t\t */\n\t\tthis._shaper = this.input = this.output = this.context.createWaveShaper();\n\n\t\t/**\n\t\t *  the waveshapers curve\n\t\t *  @type {Float32Array}\n\t\t *  @private\n\t\t */\n\t\tthis._curve = null;\n\n\t\tif (Array.isArray(mapping)){\n\t\t\tthis.curve = mapping;\n\t\t} else if (isFinite(mapping) || this.isUndef(mapping)){\n\t\t\tthis._curve = new Float32Array(this.defaultArg(mapping, 1024));\n\t\t} else if (this.isFunction(mapping)){\n\t\t\tthis._curve = new Float32Array(this.defaultArg(bufferLen, 1024));\n\t\t\tthis.setMap(mapping);\n\t\t} \n\t};\n\n\tTone.extend(Tone.WaveShaper, Tone.SignalBase);\n\n\t/**\n\t *  Uses a mapping function to set the value of the curve. \n\t *  @param {function} mapping The function used to define the values. \n\t *                            The mapping function take two arguments: \n\t *                            the first is the value at the current position \n\t *                            which goes from -1 to 1 over the number of elements\n\t *                            in the curve array. The second argument is the array position. \n\t *  @returns {Tone.WaveShaper} this\n\t *  @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */\n\tTone.WaveShaper.prototype.setMap = function(mapping){\n\t\tfor (var i = 0, len = this._curve.length; i < len; i++){\n\t\t\tvar normalized = (i / (len - 1)) * 2 - 1;\n\t\t\tthis._curve[i] = mapping(normalized, i);\n\t\t}\n\t\tthis._shaper.curve = this._curve;\n\t\treturn this;\n\t};\n\n\t/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation. \n\t * @memberOf Tone.WaveShaper#\n\t * @type {Array}\n\t * @name curve\n\t */\n\tObject.defineProperty(Tone.WaveShaper.prototype, \"curve\", {\n\t\tget : function(){\n\t\t\treturn this._shaper.curve;\n\t\t},\n\t\tset : function(mapping){\n\t\t\tthis._curve = new Float32Array(mapping);\n\t\t\tthis._shaper.curve = this._curve;\n\t\t}\n\t});\n\n\t/**\n\t * Specifies what type of oversampling (if any) should be used when \n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t * @memberOf Tone.WaveShaper#\n\t * @type {string}\n\t * @name oversample\n\t */\n\tObject.defineProperty(Tone.WaveShaper.prototype, \"oversample\", {\n\t\tget : function(){\n\t\t\treturn this._shaper.oversample;\n\t\t},\n\t\tset : function(oversampling){\n\t\t\tif ([\"none\", \"2x\", \"4x\"].indexOf(oversampling) !== -1){\n\t\t\t\tthis._shaper.oversample = oversampling;\n\t\t\t} else {\n\t\t\t\tthrow new RangeError(\"Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'\");\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up.\n\t *  @returns {Tone.WaveShaper} this\n\t */\n\tTone.WaveShaper.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._shaper.disconnect();\n\t\tthis._shaper = null;\n\t\tthis._curve = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.WaveShaper;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9zaWduYWwvV2F2ZVNoYXBlci5qcz9hYTgyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJnRUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGFBQWEsc0JBQXNCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUMiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1wiVG9uZS9jb3JlL1RvbmVcIiwgXCJUb25lL3NpZ25hbC9TaWduYWxCYXNlXCJdLCBmdW5jdGlvbihUb25lKXtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvKipcblx0ICogIEBjbGFzcyBXcmFwcyB0aGUgbmF0aXZlIFdlYiBBdWRpbyBBUEkgXG5cdCAqICAgICAgICAgW1dhdmVTaGFwZXJOb2RlXShodHRwOi8vd2ViYXVkaW8uZ2l0aHViLmlvL3dlYi1hdWRpby1hcGkvI3RoZS13YXZlc2hhcGVybm9kZS1pbnRlcmZhY2UpLlxuXHQgKlxuXHQgKiAgQGV4dGVuZHMge1RvbmUuU2lnbmFsQmFzZX1cblx0ICogIEBjb25zdHJ1Y3RvclxuXHQgKiAgQHBhcmFtIHtmdW5jdGlvbnxBcnJheXxOdW1iZXJ9IG1hcHBpbmcgVGhlIGZ1bmN0aW9uIHVzZWQgdG8gZGVmaW5lIHRoZSB2YWx1ZXMuIFxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBtYXBwaW5nIGZ1bmN0aW9uIHNob3VsZCB0YWtlIHR3byBhcmd1bWVudHM6IFxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmaXJzdCBpcyB0aGUgdmFsdWUgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24gXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHRoZSBzZWNvbmQgaXMgdGhlIGFycmF5IHBvc2l0aW9uLiBcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGUgYXJndW1lbnQgaXMgYW4gYXJyYXksIHRoYXQgYXJyYXkgd2lsbCBiZVxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldCBhcyB0aGUgd2F2ZSBzaGFwaW5nIGZ1bmN0aW9uLiBUaGUgaW5wdXRcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWwgaXMgYW4gQXVkaW9SYW5nZSBbLTEsIDFdIHZhbHVlIGFuZCB0aGUgb3V0cHV0XG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2lnbmFsIGNhbiB0YWtlIG9uIGFueSBudW1lcmljYWwgdmFsdWVzLiBcblx0ICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcblx0ICogIEBwYXJhbSB7TnVtYmVyfSBbYnVmZmVyTGVuPTEwMjRdIFRoZSBsZW5ndGggb2YgdGhlIFdhdmVTaGFwZXJOb2RlIGJ1ZmZlci5cblx0ICogIEBleGFtcGxlXG5cdCAqIHZhciB0aW1lc1R3byA9IG5ldyBUb25lLldhdmVTaGFwZXIoZnVuY3Rpb24odmFsKXtcblx0ICogXHRyZXR1cm4gdmFsICogMjtcblx0ICogfSwgMjA0OCk7XG5cdCAqICBAZXhhbXBsZVxuXHQgKiAvL2Egd2F2ZXNoYXBlciBjYW4gYWxzbyBiZSBjb25zdHJ1Y3RlZCB3aXRoIGFuIGFycmF5IG9mIHZhbHVlc1xuXHQgKiB2YXIgaW52ZXJ0ID0gbmV3IFRvbmUuV2F2ZVNoYXBlcihbMSwgLTFdKTtcblx0ICovXG5cdFRvbmUuV2F2ZVNoYXBlciA9IGZ1bmN0aW9uKG1hcHBpbmcsIGJ1ZmZlckxlbil7XG5cblx0XHQvKipcblx0XHQgKiAgdGhlIHdhdmVzaGFwZXJcblx0XHQgKiAgQHR5cGUge1dhdmVTaGFwZXJOb2RlfVxuXHRcdCAqICBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHRoaXMuX3NoYXBlciA9IHRoaXMuaW5wdXQgPSB0aGlzLm91dHB1dCA9IHRoaXMuY29udGV4dC5jcmVhdGVXYXZlU2hhcGVyKCk7XG5cblx0XHQvKipcblx0XHQgKiAgdGhlIHdhdmVzaGFwZXJzIGN1cnZlXG5cdFx0ICogIEB0eXBlIHtGbG9hdDMyQXJyYXl9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy5fY3VydmUgPSBudWxsO1xuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkobWFwcGluZykpe1xuXHRcdFx0dGhpcy5jdXJ2ZSA9IG1hcHBpbmc7XG5cdFx0fSBlbHNlIGlmIChpc0Zpbml0ZShtYXBwaW5nKSB8fCB0aGlzLmlzVW5kZWYobWFwcGluZykpe1xuXHRcdFx0dGhpcy5fY3VydmUgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuZGVmYXVsdEFyZyhtYXBwaW5nLCAxMDI0KSk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLmlzRnVuY3Rpb24obWFwcGluZykpe1xuXHRcdFx0dGhpcy5fY3VydmUgPSBuZXcgRmxvYXQzMkFycmF5KHRoaXMuZGVmYXVsdEFyZyhidWZmZXJMZW4sIDEwMjQpKTtcblx0XHRcdHRoaXMuc2V0TWFwKG1hcHBpbmcpO1xuXHRcdH0gXG5cdH07XG5cblx0VG9uZS5leHRlbmQoVG9uZS5XYXZlU2hhcGVyLCBUb25lLlNpZ25hbEJhc2UpO1xuXG5cdC8qKlxuXHQgKiAgVXNlcyBhIG1hcHBpbmcgZnVuY3Rpb24gdG8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgY3VydmUuIFxuXHQgKiAgQHBhcmFtIHtmdW5jdGlvbn0gbWFwcGluZyBUaGUgZnVuY3Rpb24gdXNlZCB0byBkZWZpbmUgdGhlIHZhbHVlcy4gXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBtYXBwaW5nIGZ1bmN0aW9uIHRha2UgdHdvIGFyZ3VtZW50czogXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmaXJzdCBpcyB0aGUgdmFsdWUgYXQgdGhlIGN1cnJlbnQgcG9zaXRpb24gXG5cdCAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIGdvZXMgZnJvbSAtMSB0byAxIG92ZXIgdGhlIG51bWJlciBvZiBlbGVtZW50c1xuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgY3VydmUgYXJyYXkuIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgdGhlIGFycmF5IHBvc2l0aW9uLiBcblx0ICogIEByZXR1cm5zIHtUb25lLldhdmVTaGFwZXJ9IHRoaXNcblx0ICogIEBleGFtcGxlXG5cdCAqIC8vbWFwIHRoZSBpbnB1dCBzaWduYWwgZnJvbSBbLTEsIDFdIHRvIFswLCAxMF1cblx0ICogc2hhcGVyLnNldE1hcChmdW5jdGlvbih2YWwsIGluZGV4KXtcblx0ICogXHRyZXR1cm4gKHZhbCArIDEpICogNTtcblx0ICogfSlcblx0ICovXG5cdFRvbmUuV2F2ZVNoYXBlci5wcm90b3R5cGUuc2V0TWFwID0gZnVuY3Rpb24obWFwcGluZyl7XG5cdFx0Zm9yICh2YXIgaSA9IDAsIGxlbiA9IHRoaXMuX2N1cnZlLmxlbmd0aDsgaSA8IGxlbjsgaSsrKXtcblx0XHRcdHZhciBub3JtYWxpemVkID0gKGkgLyAobGVuIC0gMSkpICogMiAtIDE7XG5cdFx0XHR0aGlzLl9jdXJ2ZVtpXSA9IG1hcHBpbmcobm9ybWFsaXplZCwgaSk7XG5cdFx0fVxuXHRcdHRoaXMuX3NoYXBlci5jdXJ2ZSA9IHRoaXMuX2N1cnZlO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBUaGUgYXJyYXkgdG8gc2V0IGFzIHRoZSB3YXZlc2hhcGVyIGN1cnZlLiBGb3IgbGluZWFyIGN1cnZlc1xuXHQgKiBhcnJheSBsZW5ndGggZG9lcyBub3QgbWFrZSBtdWNoIGRpZmZlcmVuY2UsIGJ1dCBmb3IgY29tcGxleCBjdXJ2ZXNcblx0ICogbG9uZ2VyIGFycmF5cyB3aWxsIHByb3ZpZGUgc21vb3RoZXIgaW50ZXJwb2xhdGlvbi4gXG5cdCAqIEBtZW1iZXJPZiBUb25lLldhdmVTaGFwZXIjXG5cdCAqIEB0eXBlIHtBcnJheX1cblx0ICogQG5hbWUgY3VydmVcblx0ICovXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLldhdmVTaGFwZXIucHJvdG90eXBlLCBcImN1cnZlXCIsIHtcblx0XHRnZXQgOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuIHRoaXMuX3NoYXBlci5jdXJ2ZTtcblx0XHR9LFxuXHRcdHNldCA6IGZ1bmN0aW9uKG1hcHBpbmcpe1xuXHRcdFx0dGhpcy5fY3VydmUgPSBuZXcgRmxvYXQzMkFycmF5KG1hcHBpbmcpO1xuXHRcdFx0dGhpcy5fc2hhcGVyLmN1cnZlID0gdGhpcy5fY3VydmU7XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogU3BlY2lmaWVzIHdoYXQgdHlwZSBvZiBvdmVyc2FtcGxpbmcgKGlmIGFueSkgc2hvdWxkIGJlIHVzZWQgd2hlbiBcblx0ICogYXBwbHlpbmcgdGhlIHNoYXBpbmcgY3VydmUuIENhbiBlaXRoZXIgYmUgXCJub25lXCIsIFwiMnhcIiBvciBcIjR4XCIuIFxuXHQgKiBAbWVtYmVyT2YgVG9uZS5XYXZlU2hhcGVyI1xuXHQgKiBAdHlwZSB7c3RyaW5nfVxuXHQgKiBAbmFtZSBvdmVyc2FtcGxlXG5cdCAqL1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoVG9uZS5XYXZlU2hhcGVyLnByb3RvdHlwZSwgXCJvdmVyc2FtcGxlXCIsIHtcblx0XHRnZXQgOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuIHRoaXMuX3NoYXBlci5vdmVyc2FtcGxlO1xuXHRcdH0sXG5cdFx0c2V0IDogZnVuY3Rpb24ob3ZlcnNhbXBsaW5nKXtcblx0XHRcdGlmIChbXCJub25lXCIsIFwiMnhcIiwgXCI0eFwiXS5pbmRleE9mKG92ZXJzYW1wbGluZykgIT09IC0xKXtcblx0XHRcdFx0dGhpcy5fc2hhcGVyLm92ZXJzYW1wbGUgPSBvdmVyc2FtcGxpbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRvbmUuV2F2ZVNoYXBlcjogb3ZlcnNhbXBsaW5nIG11c3QgYmUgZWl0aGVyICdub25lJywgJzJ4Jywgb3IgJzR4J1wiKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8qKlxuXHQgKiAgQ2xlYW4gdXAuXG5cdCAqICBAcmV0dXJucyB7VG9uZS5XYXZlU2hhcGVyfSB0aGlzXG5cdCAqL1xuXHRUb25lLldhdmVTaGFwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbigpe1xuXHRcdFRvbmUucHJvdG90eXBlLmRpc3Bvc2UuY2FsbCh0aGlzKTtcblx0XHR0aGlzLl9zaGFwZXIuZGlzY29ubmVjdCgpO1xuXHRcdHRoaXMuX3NoYXBlciA9IG51bGw7XG5cdFx0dGhpcy5fY3VydmUgPSBudWxsO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHJldHVybiBUb25lLldhdmVTaGFwZXI7XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL1RvbmVqcy9Ub25lLmpzL1RvbmUvc2lnbmFsL1dhdmVTaGFwZXIuanNcbiAqKiBtb2R1bGUgaWQgPSAxOVxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Base class for all Signals. Used Internally. \n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t */\n\tTone.SignalBase = function(){};\n\n\tTone.extend(Tone.SignalBase);\n\n\t/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */\n\tTone.SignalBase.prototype.connect = function(node, outputNumber, inputNumber){\n\t\t//zero it out so that the signal can have full control\n\t\tif ((Tone.Signal && Tone.Signal === node.constructor) || \n\t\t\t\t(Tone.Param && Tone.Param === node.constructor) || \n\t\t\t\t(Tone.TimelineSignal && Tone.TimelineSignal === node.constructor)){\n\t\t\t//cancel changes\n\t\t\tnode._param.cancelScheduledValues(0);\n\t\t\t//reset the value\n\t\t\tnode._param.value = 0;\n\t\t\t//mark the value as overridden\n\t\t\tnode.overridden = true;\n\t\t} else if (node instanceof AudioParam){\n\t\t\tnode.cancelScheduledValues(0);\n\t\t\tnode.value = 0;\n\t\t} \n\t\tTone.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t\treturn this;\n\t};\n\n\treturn Tone.SignalBase;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9zaWduYWwvU2lnbmFsQmFzZS5qcz9lZGQ5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJnRUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsc0NBQXNDO0FBQ25ELGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQyIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXCJUb25lL2NvcmUvVG9uZVwiXSwgZnVuY3Rpb24oVG9uZSl7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0LyoqXG5cdCAqICBAY2xhc3MgIEJhc2UgY2xhc3MgZm9yIGFsbCBTaWduYWxzLiBVc2VkIEludGVybmFsbHkuIFxuXHQgKlxuXHQgKiAgQGNvbnN0cnVjdG9yXG5cdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0ICovXG5cdFRvbmUuU2lnbmFsQmFzZSA9IGZ1bmN0aW9uKCl7fTtcblxuXHRUb25lLmV4dGVuZChUb25lLlNpZ25hbEJhc2UpO1xuXG5cdC8qKlxuXHQgKiAgV2hlbiBzaWduYWxzIGNvbm5lY3QgdG8gb3RoZXIgc2lnbmFscyBvciBBdWRpb1BhcmFtcywgXG5cdCAqICB0aGV5IHRha2Ugb3ZlciB0aGUgb3V0cHV0IHZhbHVlIG9mIHRoYXQgc2lnbmFsIG9yIEF1ZGlvUGFyYW0uIFxuXHQgKiAgRm9yIGFsbCBvdGhlciBub2RlcywgdGhlIGJlaGF2aW9yIGlzIHRoZSBzYW1lIGFzIGEgZGVmYXVsdCA8Y29kZT5jb25uZWN0PC9jb2RlPi4gXG5cdCAqXG5cdCAqICBAb3ZlcnJpZGVcblx0ICogIEBwYXJhbSB7QXVkaW9QYXJhbXxBdWRpb05vZGV8VG9uZS5TaWduYWx8VG9uZX0gbm9kZSBcblx0ICogIEBwYXJhbSB7bnVtYmVyfSBbb3V0cHV0TnVtYmVyPTBdIFRoZSBvdXRwdXQgbnVtYmVyIHRvIGNvbm5lY3QgZnJvbS5cblx0ICogIEBwYXJhbSB7bnVtYmVyfSBbaW5wdXROdW1iZXI9MF0gVGhlIGlucHV0IG51bWJlciB0byBjb25uZWN0IHRvLlxuXHQgKiAgQHJldHVybnMge1RvbmUuU2lnbmFsQmFzZX0gdGhpc1xuXHQgKi9cblx0VG9uZS5TaWduYWxCYXNlLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24obm9kZSwgb3V0cHV0TnVtYmVyLCBpbnB1dE51bWJlcil7XG5cdFx0Ly96ZXJvIGl0IG91dCBzbyB0aGF0IHRoZSBzaWduYWwgY2FuIGhhdmUgZnVsbCBjb250cm9sXG5cdFx0aWYgKChUb25lLlNpZ25hbCAmJiBUb25lLlNpZ25hbCA9PT0gbm9kZS5jb25zdHJ1Y3RvcikgfHwgXG5cdFx0XHRcdChUb25lLlBhcmFtICYmIFRvbmUuUGFyYW0gPT09IG5vZGUuY29uc3RydWN0b3IpIHx8IFxuXHRcdFx0XHQoVG9uZS5UaW1lbGluZVNpZ25hbCAmJiBUb25lLlRpbWVsaW5lU2lnbmFsID09PSBub2RlLmNvbnN0cnVjdG9yKSl7XG5cdFx0XHQvL2NhbmNlbCBjaGFuZ2VzXG5cdFx0XHRub2RlLl9wYXJhbS5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMoMCk7XG5cdFx0XHQvL3Jlc2V0IHRoZSB2YWx1ZVxuXHRcdFx0bm9kZS5fcGFyYW0udmFsdWUgPSAwO1xuXHRcdFx0Ly9tYXJrIHRoZSB2YWx1ZSBhcyBvdmVycmlkZGVuXG5cdFx0XHRub2RlLm92ZXJyaWRkZW4gPSB0cnVlO1xuXHRcdH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIEF1ZGlvUGFyYW0pe1xuXHRcdFx0bm9kZS5jYW5jZWxTY2hlZHVsZWRWYWx1ZXMoMCk7XG5cdFx0XHRub2RlLnZhbHVlID0gMDtcblx0XHR9IFxuXHRcdFRvbmUucHJvdG90eXBlLmNvbm5lY3QuY2FsbCh0aGlzLCBub2RlLCBvdXRwdXROdW1iZXIsIGlucHV0TnVtYmVyKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRyZXR1cm4gVG9uZS5TaWduYWxCYXNlO1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9Ub25lanMvVG9uZS5qcy9Ub25lL3NpZ25hbC9TaWduYWxCYXNlLmpzXG4gKiogbW9kdWxlIGlkID0gMjBcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t\"use strict\";\n\n\t/**\n\t *  @class A Timeline class for scheduling and maintaining state\n\t *         along a timeline. All events must have a \"time\" property. \n\t *         Internally, events are stored in time order for fast \n\t *         retrieval.\n\t *  @extends {Tone}\n\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t */\n\tTone.Timeline = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"memory\"], Tone.Timeline.defaults);\n\n\t\t/**\n\t\t *  The array of scheduled timeline events\n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._timeline = [];\n\n\t\t/**\n\t\t *  An array of items to remove from the list. \n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._toRemove = [];\n\n\t\t/**\n\t\t *  Flag if the tieline is mid iteration\n\t\t *  @private\n\t\t *  @type {Boolean}\n\t\t */\n\t\tthis._iterating = false;\n\n\t\t/**\n\t\t *  The memory of the timeline, i.e.\n\t\t *  how many events in the past it will retain\n\t\t *  @type {Positive}\n\t\t */\n\t\tthis.memory = options.memory;\n\t};\n\n\tTone.extend(Tone.Timeline);\n\n\t/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t */\n\tTone.Timeline.defaults = {\n\t\t\"memory\" : Infinity\n\t};\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @type {Number}\n\t *  @memberOf Tone.Timeline#\n\t *  @name length\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Timeline.prototype, \"length\", {\n\t\tget : function(){\n\t\t\treturn this._timeline.length;\n\t\t}\n\t});\n\n\t/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param  {Object}  event  The event object to insert into the \n\t *                           timeline. \n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.addEvent = function(event){\n\t\t//the event needs to have a time attribute\n\t\tif (this.isUndef(event.time)){\n\t\t\tthrow new Error(\"Tone.Timeline: events must have a time attribute\");\n\t\t}\n\t\tevent.time = this.toSeconds(event.time);\n\t\tif (this._timeline.length){\n\t\t\tvar index = this._search(event.time);\n\t\t\tthis._timeline.splice(index + 1, 0, event);\n\t\t} else {\n\t\t\tthis._timeline.push(event);\t\t\t\n\t\t}\n\t\t//if the length is more than the memory, remove the previous ones\n\t\tif (this.length > this.memory){\n\t\t\tvar diff = this.length - this.memory;\n\t\t\tthis._timeline.splice(0, diff);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.removeEvent = function(event){\n\t\tif (this._iterating){\n\t\t\tthis._toRemove.push(event);\n\t\t} else {\n\t\t\tvar index = this._timeline.indexOf(event);\n\t\t\tif (index !== -1){\n\t\t\t\tthis._timeline.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Object} The event object set after that time.\n\t */\n\tTone.Timeline.prototype.getEvent = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar index = this._search(time);\n\t\tif (index !== -1){\n\t\t\treturn this._timeline[index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Object} The event object after the given time\n\t */\n\tTone.Timeline.prototype.getEventAfter = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar index = this._search(time);\n\t\tif (index + 1 < this._timeline.length){\n\t\t\treturn this._timeline[index + 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Get the event before the event at the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Object} The event object before the given time\n\t */\n\tTone.Timeline.prototype.getEventBefore = function(time){\n\t\ttime = this.toSeconds(time);\n\t\tvar len = this._timeline.length;\n\t\t//if it's after the last item, return the last item\n\t\tif (len > 0 && this._timeline[len - 1].time < time){\n\t\t\treturn this._timeline[len - 1];\n\t\t}\n\t\tvar index = this._search(time);\n\t\tif (index - 1 >= 0){\n\t\t\treturn this._timeline[index - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Cancel events after the given time\n\t *  @param  {Time}  time  The time to query.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.cancel = function(after){\n\t\tif (this._timeline.length > 1){\n\t\t\tafter = this.toSeconds(after);\n\t\t\tvar index = this._search(after);\n\t\t\tif (index >= 0){\n\t\t\t\tif (this._timeline[index].time === after){\n\t\t\t\t\t//get the first item with that time\n\t\t\t\t\tfor (var i = index; i >= 0; i--){\n\t\t\t\t\t\tif (this._timeline[i].time === after){\n\t\t\t\t\t\t\tindex = i;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index);\n\t\t\t\t} else {\n\t\t\t\t\tthis._timeline = this._timeline.slice(0, index + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t} else if (this._timeline.length === 1){\n\t\t\t//the first item's time\n\t\t\tif (this._timeline[0].time >= after){\n\t\t\t\tthis._timeline = [];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Time}  time  The time to cancel before.\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.cancelBefore = function(time){\n\t\tif (this._timeline.length){\n\t\t\ttime = this.toSeconds(time);\n\t\t\tvar index = this._search(time);\n\t\t\tif (index >= 0){\n\t\t\t\tthis._timeline = this._timeline.slice(index + 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Does a binary serach on the timeline array and returns the \n\t *  nearest event index whose time is after or equal to the given time.\n\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t *  If the time is after the end, the index of the last item is returned.\n\t *  @param  {Number}  time  \n\t *  @return  {Number} the index in the timeline array \n\t *  @private\n\t */\n\tTone.Timeline.prototype._search = function(time){\n\t\tvar beginning = 0;\n\t\tvar len = this._timeline.length;\n\t\tvar end = len;\n\t\tif (len > 0 && this._timeline[len - 1].time <= time){\n\t\t\treturn len - 1;\n\t\t}\n\t\twhile (beginning < end){\n\t\t\t// calculate the midpoint for roughly equal partition\n\t\t\tvar midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t\t\tvar event = this._timeline[midPoint];\n\t\t\tvar nextEvent = this._timeline[midPoint + 1];\n\t\t\tif (event.time === time){\n\t\t\t\t//choose the last one that has the same time\n\t\t\t\tfor (var i = midPoint; i < this._timeline.length; i++){\n\t\t\t\t\tvar testEvent = this._timeline[i];\n\t\t\t\t\tif (testEvent.time === time){\n\t\t\t\t\t\tmidPoint = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event.time < time && nextEvent.time > time){\n\t\t\t\treturn midPoint;\n\t\t\t} else if (event.time > time){\n\t\t\t\t//search lower\n\t\t\t\tend = midPoint;\n\t\t\t} else if (event.time < time){\n\t\t\t\t//search upper\n\t\t\t\tbeginning = midPoint + 1;\n\t\t\t} \n\t\t}\n\t\treturn -1;\n\t};\n\n\t/**\n\t *  Internal iterator. Applies extra safety checks for \n\t *  removing items from the array. \n\t *  @param  {Function}  callback \n\t *  @param  {Number=}    lowerBound     \n\t *  @param  {Number=}    upperBound    \n\t *  @private\n\t */\n\tTone.Timeline.prototype._iterate = function(callback, lowerBound, upperBound){\n\t\tthis._iterating = true;\n\t\tlowerBound = this.defaultArg(lowerBound, 0);\n\t\tupperBound = this.defaultArg(upperBound, this._timeline.length - 1);\n\t\tfor (var i = lowerBound; i <= upperBound; i++){\n\t\t\tcallback(this._timeline[i]);\n\t\t}\n\t\tthis._iterating = false;\n\t\tif (this._toRemove.length > 0){\n\t\t\tfor (var j = 0; j < this._toRemove.length; j++){\n\t\t\t\tvar index = this._timeline.indexOf(this._toRemove[j]);\n\t\t\t\tif (index !== -1){\n\t\t\t\t\tthis._timeline.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._toRemove = [];\n\t\t}\n\t};\n\n\t/**\n\t *  Iterate over everything in the array\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEach = function(callback){\n\t\tthis._iterate(callback);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  {Time}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachBefore = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\ttime = this.toSeconds(time);\n\t\tvar upperBound = this._search(time);\n\t\tif (upperBound !== -1){\n\t\t\tthis._iterate(callback, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  {Time}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachAfter = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\ttime = this.toSeconds(time);\n\t\tvar lowerBound = this._search(time);\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array at or after the given time. Similar to \n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  {Time}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachFrom = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\ttime = this.toSeconds(time);\n\t\tvar lowerBound = this._search(time);\n\t\t//work backwards until the event time is less than time\n\t\twhile (lowerBound >= 0 && this._timeline[lowerBound].time >= time){\n\t\t\tlowerBound--;\n\t\t}\n\t\tthis._iterate(callback, lowerBound + 1);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  {Time}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */\n\tTone.Timeline.prototype.forEachAtTime = function(time, callback){\n\t\t//iterate over the items in reverse so that removing an item doesn't break things\n\t\ttime = this.toSeconds(time);\n\t\tvar upperBound = this._search(time);\n\t\tif (upperBound !== -1){\n\t\t\tthis._iterate(function(event){\n\t\t\t\tif (event.time === time){\n\t\t\t\t\tcallback(event);\n\t\t\t\t} \n\t\t\t}, 0, upperBound);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up.\n\t *  @return  {Tone.Timeline}  this\n\t */\n\tTone.Timeline.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._timeline = null;\n\t\tthis._toRemove = null;\n\t};\n\n\treturn Tone.Timeline;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(21), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t *          and <code>getStateAtTime(time)</code>.\n\t *\n\t *  @extends {Tone.Timeline}\n\t *  @param {String} initial The initial state of the TimelineState. \n\t *                          Defaults to <code>undefined</code>\n\t */\n\tTone.TimelineState = function(initial){\n\n\t\tTone.Timeline.call(this);\n\n\t\t/**\n\t\t *  The initial state\n\t\t *  @private\n\t\t *  @type {String}\n\t\t */\n\t\tthis._initial = initial;\n\t};\n\n\tTone.extend(Tone.TimelineState, Tone.Timeline);\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  {Time}  time  The time to query.\n\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t */\n\tTone.TimelineState.prototype.getStateAtTime = function(time){\n\t\tvar event = this.getEvent(time);\n\t\tif (event !== null){\n\t\t\treturn event.state;\n\t\t} else {\n\t\t\treturn this._initial;\n\t\t}\n\t};\n\n\t/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  {String}  state The name of the state to set.\n\t *  @param  {Time}  time  The time to query.\n\t */\n\tTone.TimelineState.prototype.setStateAtTime = function(state, time){\n\t\tthis.addEvent({\n\t\t\t\"state\" : state,\n\t\t\t\"time\" : this.toSeconds(time)\n\t\t});\n\t};\n\n\treturn Tone.TimelineState;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9jb3JlL1RpbWVsaW5lU3RhdGUuanM/NzVhNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiZ0VBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsS0FBSztBQUNuQixlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsS0FBSztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsQ0FBQyIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXCJUb25lL2NvcmUvVG9uZVwiLCBcIlRvbmUvY29yZS9UaW1lbGluZVwiLCBcIlRvbmUvdHlwZS9UeXBlXCJdLCBmdW5jdGlvbiAoVG9uZSkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdC8qKlxuXHQgKiAgQGNsYXNzICBBIFRpbWVsaW5lIFN0YXRlLiBQcm92aWRlcyB0aGUgbWV0aG9kczogPGNvZGU+c2V0U3RhdGVBdFRpbWUoXCJzdGF0ZVwiLCB0aW1lKTwvY29kZT5cblx0ICogICAgICAgICAgYW5kIDxjb2RlPmdldFN0YXRlQXRUaW1lKHRpbWUpPC9jb2RlPi5cblx0ICpcblx0ICogIEBleHRlbmRzIHtUb25lLlRpbWVsaW5lfVxuXHQgKiAgQHBhcmFtIHtTdHJpbmd9IGluaXRpYWwgVGhlIGluaXRpYWwgc3RhdGUgb2YgdGhlIFRpbWVsaW5lU3RhdGUuIFxuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gPGNvZGU+dW5kZWZpbmVkPC9jb2RlPlxuXHQgKi9cblx0VG9uZS5UaW1lbGluZVN0YXRlID0gZnVuY3Rpb24oaW5pdGlhbCl7XG5cblx0XHRUb25lLlRpbWVsaW5lLmNhbGwodGhpcyk7XG5cblx0XHQvKipcblx0XHQgKiAgVGhlIGluaXRpYWwgc3RhdGVcblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKiAgQHR5cGUge1N0cmluZ31cblx0XHQgKi9cblx0XHR0aGlzLl9pbml0aWFsID0gaW5pdGlhbDtcblx0fTtcblxuXHRUb25lLmV4dGVuZChUb25lLlRpbWVsaW5lU3RhdGUsIFRvbmUuVGltZWxpbmUpO1xuXG5cdC8qKlxuXHQgKiAgUmV0dXJucyB0aGUgc2NoZWR1bGVkIHN0YXRlIHNjaGVkdWxlZCBiZWZvcmUgb3IgYXRcblx0ICogIHRoZSBnaXZlbiB0aW1lLlxuXHQgKiAgQHBhcmFtICB7VGltZX0gIHRpbWUgIFRoZSB0aW1lIHRvIHF1ZXJ5LlxuXHQgKiAgQHJldHVybiAge1N0cmluZ30gIFRoZSBuYW1lIG9mIHRoZSBzdGF0ZSBpbnB1dCBpbiBzZXRTdGF0ZUF0VGltZS5cblx0ICovXG5cdFRvbmUuVGltZWxpbmVTdGF0ZS5wcm90b3R5cGUuZ2V0U3RhdGVBdFRpbWUgPSBmdW5jdGlvbih0aW1lKXtcblx0XHR2YXIgZXZlbnQgPSB0aGlzLmdldEV2ZW50KHRpbWUpO1xuXHRcdGlmIChldmVudCAhPT0gbnVsbCl7XG5cdFx0XHRyZXR1cm4gZXZlbnQuc3RhdGU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLl9pbml0aWFsO1xuXHRcdH1cblx0fTtcblxuXHQvKipcblx0ICogIFJldHVybnMgdGhlIHNjaGVkdWxlZCBzdGF0ZSBzY2hlZHVsZWQgYmVmb3JlIG9yIGF0XG5cdCAqICB0aGUgZ2l2ZW4gdGltZS5cblx0ICogIEBwYXJhbSAge1N0cmluZ30gIHN0YXRlIFRoZSBuYW1lIG9mIHRoZSBzdGF0ZSB0byBzZXQuXG5cdCAqICBAcGFyYW0gIHtUaW1lfSAgdGltZSAgVGhlIHRpbWUgdG8gcXVlcnkuXG5cdCAqL1xuXHRUb25lLlRpbWVsaW5lU3RhdGUucHJvdG90eXBlLnNldFN0YXRlQXRUaW1lID0gZnVuY3Rpb24oc3RhdGUsIHRpbWUpe1xuXHRcdHRoaXMuYWRkRXZlbnQoe1xuXHRcdFx0XCJzdGF0ZVwiIDogc3RhdGUsXG5cdFx0XHRcInRpbWVcIiA6IHRoaXMudG9TZWNvbmRzKHRpbWUpXG5cdFx0fSk7XG5cdH07XG5cblx0cmV0dXJuIFRvbmUuVGltZWxpbmVTdGF0ZTtcbn0pO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9jb3JlL1RpbWVsaW5lU3RhdGUuanNcbiAqKiBtb2R1bGUgaWQgPSAyMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Similar to Tone.Timeline, but all events represent\n\t *         intervals with both \"time\" and \"duration\" times. The \n\t *         events are placed in a tree structure optimized\n\t *         for querying an intersection point with the timeline\n\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t *         to represent the data.\n\t *  @extends {Tone}\n\t */\n\tTone.IntervalTimeline = function(){\n\n\t\t/**\n\t\t *  The root node of the inteval tree\n\t\t *  @type  {IntervalNode}\n\t\t *  @private\n\t\t */\n\t\tthis._root = null;\n\n\t\t/**\n\t\t *  Keep track of the length of the timeline.\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._length = 0;\n\t};\n\n\tTone.extend(Tone.IntervalTimeline);\n\n\t/**\n\t *  The event to add to the timeline. All events must \n\t *  have a time and duration value\n\t *  @param  {Object}  event  The event to add to the timeline\n\t *  @return  {Tone.IntervalTimeline}  this\n\t */\n\tTone.IntervalTimeline.prototype.addEvent = function(event){\n\t\tif (this.isUndef(event.time) || this.isUndef(event.duration)){\n\t\t\tthrow new Error(\"Tone.IntervalTimeline: events must have time and duration parameters\");\n\t\t}\n\t\tvar node = new IntervalNode(event.time, event.time + event.duration, event);\n\t\tif (this._root === null){\n\t\t\tthis._root = node;\n\t\t} else {\n\t\t\tthis._root.insert(node);\n\t\t}\n\t\tthis._length++;\n\t\t// Restructure tree to be balanced\n\t\twhile (node !== null) {\n\t\t\tnode.updateHeight();\n\t\t\tnode.updateMax();\n\t\t\tthis._rebalance(node);\n\t\t\tnode = node.parent;\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event to remove from the timeline\n\t *  @return  {Tone.IntervalTimeline}  this\n\t */\n\tTone.IntervalTimeline.prototype.removeEvent = function(event){\n\t\tif (this._root !== null){\n\t\t\tvar results = [];\n\t\t\tthis._root.search(event.time, results);\n\t\t\tfor (var i = 0; i < results.length; i++){\n\t\t\t\tvar node = results[i];\n\t\t\t\tif (node.event === event){\n\t\t\t\t\tthis._removeNode(node);\n\t\t\t\t\tthis._length--;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The number of items in the timeline.\n\t *  @type {Number}\n\t *  @memberOf Tone.IntervalTimeline#\n\t *  @name length\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.IntervalTimeline.prototype, \"length\", {\n\t\tget : function(){\n\t\t\treturn this._length;\n\t\t}\n\t});\n\n\t/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  {Time}  time  The time to query.\n\t *  @returns {Tone.IntervalTimeline} this\n\t */\n\tTone.IntervalTimeline.prototype.cancel = function(after){\n\t\tafter = this.toSeconds(after);\n\t\tthis.forEachAfter(after, function(event){\n\t\t\tthis.removeEvent(event);\n\t\t}.bind(this));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Set the root node as the given node\n\t *  @param {IntervalNode} node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._setRoot = function(node){\n\t\tthis._root = node;\n\t\tif (this._root !== null){\n\t\t\tthis._root.parent = null;\n\t\t}\n\t};\n\n\t/**\n\t *  Replace the references to the node in the node's parent\n\t *  with the replacement node.\n\t *  @param  {IntervalNode}  node        \n\t *  @param  {IntervalNode}  replacement \n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._replaceNodeInParent = function(node, replacement){\n\t\tif (node.parent !== null){\n\t\t\tif (node.isLeftChild()){\n\t\t\t\tnode.parent.left = replacement;\n\t\t\t} else {\n\t\t\t\tnode.parent.right = replacement;\n\t\t\t}\n\t\t\tthis._rebalance(node.parent);\n\t\t} else {\n\t\t\tthis._setRoot(replacement);\n\t\t}\n\t};\n\n\t/**\n\t *  Remove the node from the tree and replace it with \n\t *  a successor which follows the schema.\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._removeNode = function(node){\n\t\tif (node.left === null && node.right === null){\n\t\t\tthis._replaceNodeInParent(node, null);\n\t\t} else if (node.right === null){\n\t\t\tthis._replaceNodeInParent(node, node.left);\n\t\t} else if (node.left === null){\n\t\t\tthis._replaceNodeInParent(node, node.right);\n\t\t} else {\n\t\t\tvar balance = node.getBalance();\n\t\t\tvar replacement, temp;\n\t\t\tif (balance > 0){\n\t\t\t\tif (node.left.right === null){\n\t\t\t\t\treplacement = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.left.right;\n\t\t\t\t\twhile (replacement.right !== null){\n\t\t\t\t\t\treplacement = replacement.right;\n\t\t\t\t\t}\n\t\t\t\t\treplacement.parent.right = replacement.left;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (node.right.left === null){\n\t\t\t\t\treplacement = node.right;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\ttemp = replacement;\n\t\t\t\t} else {\n\t\t\t\t\treplacement = node.right.left;\n\t\t\t\t\twhile (replacement.left !== null) {\n\t\t\t\t\t\treplacement = replacement.left;\n\t\t\t\t\t}\n\t\t\t\t\treplacement.parent = replacement.parent;\n\t\t\t\t\treplacement.parent.left = replacement.right;\n\t\t\t\t\ttemp = replacement.parent;\n\t\t\t\t\treplacement.left = node.left;\n\t\t\t\t\treplacement.right = node.right;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (node.parent !== null){\n\t\t\t\tif (node.isLeftChild()){\n\t\t\t\t\tnode.parent.left = replacement;\n\t\t\t\t} else {\n\t\t\t\t\tnode.parent.right = replacement;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._setRoot(replacement);\n\t\t\t}\n\t\t\t// this._replaceNodeInParent(node, replacement);\n\t\t\tthis._rebalance(temp);\n\t\t}\n\t\tnode.dispose();\n\t};\n\n\t/**\n\t *  Rotate the tree to the left\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._rotateLeft = function(node){\n\t\tvar parent = node.parent;\n\t\tvar isLeftChild = node.isLeftChild();\n\n\t\t// Make node.right the new root of this sub tree (instead of node)\n\t\tvar pivotNode = node.right;\n\t\tnode.right = pivotNode.left;\n\t\tpivotNode.left = node;\n\n\t\tif (parent !== null){\n\t\t\tif (isLeftChild){\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else{\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else{\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t};\n\n\t/**\n\t *  Rotate the tree to the right\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._rotateRight = function(node){\n\t\tvar parent = node.parent;\n\t\tvar isLeftChild = node.isLeftChild();\n \n\t\t// Make node.left the new root of this sub tree (instead of node)\n\t\tvar pivotNode = node.left;\n\t\tnode.left = pivotNode.right;\n\t\tpivotNode.right = node;\n\n\t\tif (parent !== null){\n\t\t\tif (isLeftChild){\n\t\t\t\tparent.left = pivotNode;\n\t\t\t} else{\n\t\t\t\tparent.right = pivotNode;\n\t\t\t}\n\t\t} else{\n\t\t\tthis._setRoot(pivotNode);\n\t\t}\n\t};\n\n\t/**\n\t *  Balance the BST\n\t *  @param  {IntervalNode}  node\n\t *  @private\n\t */\n\tTone.IntervalTimeline.prototype._rebalance = function(node){\n\t\tvar balance = node.getBalance();\n\t\tif (balance > 1){\n\t\t\tif (node.left.getBalance() < 0){\n\t\t\t\tthis._rotateLeft(node.left);\n\t\t\t} else {\n\t\t\t\tthis._rotateRight(node);\n\t\t\t}\n\t\t} else if (balance < -1) {\n\t\t\tif (node.right.getBalance() > 0){\n\t\t\t\tthis._rotateRight(node.right);\n\t\t\t} else {\n\t\t\t\tthis._rotateLeft(node);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @param  {Object}  event  The event to add to the timeline\n\t *  @return  {Object}  The event which spans the desired time\n\t */\n\tTone.IntervalTimeline.prototype.getEvent = function(time){\n\t\tif (this._root !== null){\n\t\t\tvar results = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tif (results.length > 0){\n\t\t\t\tvar max = results[0];\n\t\t\t\tfor (var i = 1; i < results.length; i++){\n\t\t\t\t\tif (results[i].low > max.low){\n\t\t\t\t\t\tmax = results[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn max.event;\n\t\t\t} \n\t\t}\n\t\treturn null;\n\t};\n\n\t/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.IntervalTimeline} this\n\t */\n\tTone.IntervalTimeline.prototype.forEach = function(callback){\n\t\tif (this._root !== null){\n\t\t\tvar allNodes = [];\n\t\t\tif (this._root !== null){\n\t\t\t\tthis._root.traverse(function(node){\n\t\t\t\t\tallNodes.push(node);\n\t\t\t\t});\n\t\t\t}\n\t\t\tfor (var i = 0; i < allNodes.length; i++){\n\t\t\t\tvar ev = allNodes[i].event;\n\t\t\t\tif (ev){\n\t\t\t\t\tcallback(ev);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  {Time}  time The time to check if items are overlapping\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.IntervalTimeline} this\n\t */\n\tTone.IntervalTimeline.prototype.forEachAtTime = function(time, callback){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._root !== null){\n\t\t\tvar results = [];\n\t\t\tthis._root.search(time, results);\n\t\t\tfor (var i = results.length - 1; i >= 0; i--){\n\t\t\t\tvar ev = results[i].event;\n\t\t\t\tif (ev){\n\t\t\t\t\tcallback(ev);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than the given time.\n\t *  @param  {Time}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.IntervalTimeline} this\n\t */\n\tTone.IntervalTimeline.prototype.forEachAfter = function(time, callback){\n\t\ttime = this.toSeconds(time);\n\t\tif (this._root !== null){\n\t\t\tvar results = [];\n\t\t\tthis._root.searchAfter(time, results);\n\t\t\tfor (var i = results.length - 1; i >= 0; i--){\n\t\t\t\tvar ev = results[i].event;\n\t\t\t\tif (ev){\n\t\t\t\t\tcallback(ev);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.IntervalTimeline}  this\n\t */\n\tTone.IntervalTimeline.prototype.dispose = function() {\n\t\tvar allNodes = [];\n\t\tif (this._root !== null){\n\t\t\tthis._root.traverse(function(node){\n\t\t\t\tallNodes.push(node);\n\t\t\t});\n\t\t}\n\t\tfor (var i = 0; i < allNodes.length; i++){\n\t\t\tallNodes[i].dispose();\n\t\t}\n\t\tallNodes = null;\n\t\tthis._root = null;\n\t\treturn this;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tINTERVAL NODE HELPER\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Represents a node in the binary search tree, with the addition\n\t *  of a \"high\" value which keeps track of the highest value of\n\t *  its children. \n\t *  References: \n\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t *  @param {Number} low\n\t *  @param {Number} high\n\t *  @private\n\t */\n\tvar IntervalNode = function(low, high, event){\n\t\t//the event container\n\t\tthis.event = event;\n\t\t//the low value\n\t\tthis.low = low;\n\t\t//the high value\n\t\tthis.high = high;\n\t\t//the high value for this and all child nodes\n\t\tthis.max = this.high;\n\t\t//the nodes to the left\n\t\tthis._left = null;\n\t\t//the nodes to the right\n\t\tthis._right = null;\n\t\t//the parent node\n\t\tthis.parent = null;\n\t\t//the number of child nodes\n\t\tthis.height = 0;\n\t};\n\n\t/** \n\t *  Insert a node into the correct spot in the tree\n\t *  @param  {IntervalNode}  node\n\t */\n\tIntervalNode.prototype.insert = function(node) {\n\t\tif (node.low <= this.low){\n\t\t\tif (this.left === null){\n\t\t\t\tthis.left = node;\n\t\t\t} else {\n\t\t\t\tthis.left.insert(node);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.right === null){\n\t\t\t\tthis.right = node;\n\t\t\t} else {\n\t\t\t\tthis.right.insert(node);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  Search the tree for nodes which overlap \n\t *  with the given point\n\t *  @param  {Number}  point  The point to query\n\t *  @param  {Array}  results  The array to put the results\n\t */\n\tIntervalNode.prototype.search = function(point, results) {\n\t\t// If p is to the right of the rightmost point of any interval\n\t\t// in this node and all children, there won't be any matches.\n\t\tif (point > this.max){\n\t\t\treturn;\n\t\t}\n\t\t// Search left children\n\t\tif (this.left !== null){\n\t\t\tthis.left.search(point, results);\n\t\t}\n\t\t// Check this node\n\t\tif (this.low <= point && this.high > point){\n\t\t\tresults.push(this);\n\t\t}\n\t\t// If p is to the left of the time of this interval,\n\t\t// then it can't be in any child to the right.\n\t\tif (this.low > point){\n\t\t\treturn;\n\t\t}\n\t\t// Search right children\n\t\tif (this.right !== null){\n\t\t\tthis.right.search(point, results);\n\t\t}\n\t};\n\n\t/**\n\t *  Search the tree for nodes which are less \n\t *  than the given point\n\t *  @param  {Number}  point  The point to query\n\t *  @param  {Array}  results  The array to put the results\n\t */\n\tIntervalNode.prototype.searchAfter = function(point, results) {\n\t\t// Check this node\n\t\tif (this.low >= point){\n\t\t\tresults.push(this);\n\t\t\tif (this.left !== null){\n\t\t\t\tthis.left.searchAfter(point, results);\n\t\t\t}\n\t\t} \n\t\t// search the right side\n\t\tif (this.right !== null){\n\t\t\tthis.right.searchAfter(point, results);\n\t\t}\n\t};\n\n\t/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */\n\tIntervalNode.prototype.traverse = function(callback){\n\t\tcallback(this);\n\t\tif (this.left !== null){\n\t\t\tthis.left.traverse(callback);\n\t\t}\n\t\tif (this.right !== null){\n\t\t\tthis.right.traverse(callback);\n\t\t}\n\t};\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tIntervalNode.prototype.updateHeight = function(){\n\t\tif (this.left !== null && this.right !== null){\n\t\t\tthis.height = Math.max(this.left.height, this.right.height) + 1;\n\t\t} else if (this.right !== null){\n\t\t\tthis.height = this.right.height + 1;\n\t\t} else if (this.left !== null){\n\t\t\tthis.height = this.left.height + 1;\n\t\t} else {\n\t\t\tthis.height = 0;\n\t\t}\n\t};\n\n\t/**\n\t *  Update the height of the node\n\t */\n\tIntervalNode.prototype.updateMax = function(){\n\t\tthis.max = this.high;\n\t\tif (this.left !== null){\n\t\t\tthis.max = Math.max(this.max, this.left.max);\n\t\t}\n\t\tif (this.right !== null){\n\t\t\tthis.max = Math.max(this.max, this.right.max);\n\t\t}\n\t};\n\n\t/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  {Number}  Negative numbers are balanced to the right\n\t */\n\tIntervalNode.prototype.getBalance = function() {\n\t\tvar balance = 0;\n\t\tif (this.left !== null && this.right !== null){\n\t\t\tbalance = this.left.height - this.right.height;\n\t\t} else if (this.left !== null){\n\t\t\tbalance = this.left.height + 1;\n\t\t} else if (this.right !== null){\n\t\t\tbalance = -(this.right.height + 1);\n\t\t}\n\t\treturn balance;\n\t};\n\n\t/**\n\t *  @returns {Boolean} true if this node is the left child\n\t *  of its parent\n\t */\n\tIntervalNode.prototype.isLeftChild = function() {\n\t\treturn this.parent !== null && this.parent.left === this;\n\t};\n\n\t/**\n\t *  get/set the left node\n\t *  @type {IntervalNode}\n\t */\n\tObject.defineProperty(IntervalNode.prototype, \"left\", {\n\t\tget : function(){\n\t\t\treturn this._left;\n\t\t},\n\t\tset : function(node){\n\t\t\tthis._left = node;\n\t\t\tif (node !== null){\n\t\t\t\tnode.parent = this;\n\t\t\t}\n\t\t\tthis.updateHeight();\n\t\t\tthis.updateMax();\n\t\t}\n\t});\n\n\t/**\n\t *  get/set the right node\n\t *  @type {IntervalNode}\n\t */\n\tObject.defineProperty(IntervalNode.prototype, \"right\", {\n\t\tget : function(){\n\t\t\treturn this._right;\n\t\t},\n\t\tset : function(node){\n\t\t\tthis._right = node;\n\t\t\tif (node !== null){\n\t\t\t\tnode.parent = this;\n\t\t\t}\n\t\t\tthis.updateHeight();\n\t\t\tthis.updateMax();\n\t\t}\n\t});\n\n\t/**\n\t *  null out references.\n\t */\n\tIntervalNode.prototype.dispose = function() {\n\t\tthis.parent = null;\n\t\tthis._left = null;\n\t\tthis._right = null;\n\t\tthis.event = null;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tEND INTERVAL NODE HELPER\n\t///////////////////////////////////////////////////////////////////////////\n\n\treturn Tone.IntervalTimeline;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(18), __webpack_require__(2)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Tone){\n\n\t\"use strict\";\n\n\t/**\n\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. \n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t *  @param {Decibels} [volume=0] the initial volume\n\t *  @example\n\t * var vol = new Tone.Volume(-12);\n\t * instrument.chain(vol, Tone.Master);\n\t */\n\tTone.Volume = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"volume\"], Tone.Volume.defaults);\n\n\t\t/**\n\t\t * the output node\n\t\t * @type {GainNode}\n\t\t * @private\n\t\t */\n\t\tthis.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\n\t\t/**\n\t\t * The unmuted volume\n\t\t * @type {Decibels}\n\t\t * @private\n\t\t */\n\t\tthis._unmutedVolume = 0;\n\n\t\t/**\n\t\t *  if the volume is muted\n\t\t *  @type {Boolean}\n\t\t *  @private\n\t\t */\n\t\tthis._muted = false;\n\n\t\t/**\n\t\t *  The volume control in decibels. \n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */\n\t\tthis.volume = this.output.gain;\n\n\t\tthis._readOnly(\"volume\");\n\n\t\t//set the mute initially\n\t\tthis.mute = options.mute;\n\t};\n\n\tTone.extend(Tone.Volume);\n\n\t/**\n\t *  Defaults\n\t *  @type  {Object}\n\t *  @const\n\t *  @static\n\t */\n\tTone.Volume.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t * Mute the output. \n\t * @memberOf Tone.Volume#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */\n\tObject.defineProperty(Tone.Volume.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._muted;\n\t\t}, \n\t\tset : function(mute){\n\t\t\tif (!this._muted && mute){\n\t\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t\t//maybe it should ramp here?\n\t\t\t\tthis.volume.value = -Infinity;\n\t\t\t} else if (this._muted && !mute){\n\t\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t\t}\n\t\t\tthis._muted = mute;\n\t\t}\n\t});\n\n\t/**\n\t *  clean up\n\t *  @returns {Tone.Volume} this\n\t */\n\tTone.Volume.prototype.dispose = function(){\n\t\tthis.input.dispose();\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._writable(\"volume\");\n\t\tthis.volume.dispose();\n\t\tthis.volume = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Volume;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9jb21wb25lbnQvVm9sdW1lLmpzPzgxZDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6ImdFQUFBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQyIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbXCJUb25lL2NvcmUvVG9uZVwiLCBcIlRvbmUvc2lnbmFsL1NpZ25hbFwiLCBcIlRvbmUvY29yZS9HYWluXCJdLCBmdW5jdGlvbihUb25lKXtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHQvKipcblx0ICogIEBjbGFzcyBUb25lLlZvbHVtZSBpcyBhIHNpbXBsZSB2b2x1bWUgbm9kZSwgdXNlZnVsIGZvciBjcmVhdGluZyBhIHZvbHVtZSBmYWRlci4gXG5cdCAqXG5cdCAqICBAZXh0ZW5kcyB7VG9uZX1cblx0ICogIEBjb25zdHJ1Y3RvclxuXHQgKiAgQHBhcmFtIHtEZWNpYmVsc30gW3ZvbHVtZT0wXSB0aGUgaW5pdGlhbCB2b2x1bWVcblx0ICogIEBleGFtcGxlXG5cdCAqIHZhciB2b2wgPSBuZXcgVG9uZS5Wb2x1bWUoLTEyKTtcblx0ICogaW5zdHJ1bWVudC5jaGFpbih2b2wsIFRvbmUuTWFzdGVyKTtcblx0ICovXG5cdFRvbmUuVm9sdW1lID0gZnVuY3Rpb24oKXtcblxuXHRcdHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zT2JqZWN0KGFyZ3VtZW50cywgW1widm9sdW1lXCJdLCBUb25lLlZvbHVtZS5kZWZhdWx0cyk7XG5cblx0XHQvKipcblx0XHQgKiB0aGUgb3V0cHV0IG5vZGVcblx0XHQgKiBAdHlwZSB7R2Fpbk5vZGV9XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR0aGlzLm91dHB1dCA9IHRoaXMuaW5wdXQgPSBuZXcgVG9uZS5HYWluKG9wdGlvbnMudm9sdW1lLCBUb25lLlR5cGUuRGVjaWJlbHMpO1xuXG5cdFx0LyoqXG5cdFx0ICogVGhlIHVubXV0ZWQgdm9sdW1lXG5cdFx0ICogQHR5cGUge0RlY2liZWxzfVxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy5fdW5tdXRlZFZvbHVtZSA9IDA7XG5cblx0XHQvKipcblx0XHQgKiAgaWYgdGhlIHZvbHVtZSBpcyBtdXRlZFxuXHRcdCAqICBAdHlwZSB7Qm9vbGVhbn1cblx0XHQgKiAgQHByaXZhdGVcblx0XHQgKi9cblx0XHR0aGlzLl9tdXRlZCA9IGZhbHNlO1xuXG5cdFx0LyoqXG5cdFx0ICogIFRoZSB2b2x1bWUgY29udHJvbCBpbiBkZWNpYmVscy4gXG5cdFx0ICogIEB0eXBlIHtEZWNpYmVsc31cblx0XHQgKiAgQHNpZ25hbFxuXHRcdCAqL1xuXHRcdHRoaXMudm9sdW1lID0gdGhpcy5vdXRwdXQuZ2FpbjtcblxuXHRcdHRoaXMuX3JlYWRPbmx5KFwidm9sdW1lXCIpO1xuXG5cdFx0Ly9zZXQgdGhlIG11dGUgaW5pdGlhbGx5XG5cdFx0dGhpcy5tdXRlID0gb3B0aW9ucy5tdXRlO1xuXHR9O1xuXG5cdFRvbmUuZXh0ZW5kKFRvbmUuVm9sdW1lKTtcblxuXHQvKipcblx0ICogIERlZmF1bHRzXG5cdCAqICBAdHlwZSAge09iamVjdH1cblx0ICogIEBjb25zdFxuXHQgKiAgQHN0YXRpY1xuXHQgKi9cblx0VG9uZS5Wb2x1bWUuZGVmYXVsdHMgPSB7XG5cdFx0XCJ2b2x1bWVcIiA6IDAsXG5cdFx0XCJtdXRlXCIgOiBmYWxzZVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBNdXRlIHRoZSBvdXRwdXQuIFxuXHQgKiBAbWVtYmVyT2YgVG9uZS5Wb2x1bWUjXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAbmFtZSBtdXRlXG5cdCAqIEBleGFtcGxlXG5cdCAqIC8vbXV0ZSB0aGUgb3V0cHV0XG5cdCAqIHZvbHVtZS5tdXRlID0gdHJ1ZTtcblx0ICovXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUb25lLlZvbHVtZS5wcm90b3R5cGUsIFwibXV0ZVwiLCB7XG5cdFx0Z2V0IDogZnVuY3Rpb24oKXtcblx0XHRcdHJldHVybiB0aGlzLl9tdXRlZDtcblx0XHR9LCBcblx0XHRzZXQgOiBmdW5jdGlvbihtdXRlKXtcblx0XHRcdGlmICghdGhpcy5fbXV0ZWQgJiYgbXV0ZSl7XG5cdFx0XHRcdHRoaXMuX3VubXV0ZWRWb2x1bWUgPSB0aGlzLnZvbHVtZS52YWx1ZTtcblx0XHRcdFx0Ly9tYXliZSBpdCBzaG91bGQgcmFtcCBoZXJlP1xuXHRcdFx0XHR0aGlzLnZvbHVtZS52YWx1ZSA9IC1JbmZpbml0eTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5fbXV0ZWQgJiYgIW11dGUpe1xuXHRcdFx0XHR0aGlzLnZvbHVtZS52YWx1ZSA9IHRoaXMuX3VubXV0ZWRWb2x1bWU7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9tdXRlZCA9IG11dGU7XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogIGNsZWFuIHVwXG5cdCAqICBAcmV0dXJucyB7VG9uZS5Wb2x1bWV9IHRoaXNcblx0ICovXG5cdFRvbmUuVm9sdW1lLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24oKXtcblx0XHR0aGlzLmlucHV0LmRpc3Bvc2UoKTtcblx0XHRUb25lLnByb3RvdHlwZS5kaXNwb3NlLmNhbGwodGhpcyk7XG5cdFx0dGhpcy5fd3JpdGFibGUoXCJ2b2x1bWVcIik7XG5cdFx0dGhpcy52b2x1bWUuZGlzcG9zZSgpO1xuXHRcdHRoaXMudm9sdW1lID0gbnVsbDtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRyZXR1cm4gVG9uZS5Wb2x1bWU7XG59KTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4uL1RvbmVqcy9Ub25lLmpzL1RvbmUvY29tcG9uZW50L1ZvbHVtZS5qc1xuICoqIG1vZHVsZSBpZCA9IDI0XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(24)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Tone){\n\n\t\"use strict\";\n\t\n\t/**\n\t *  @class  A single master output which is connected to the\n\t *          AudioDestinationNode (aka your speakers). \n\t *          It provides useful conveniences such as the ability \n\t *          to set the volume and mute the entire application. \n\t *          It also gives you the ability to apply master effects to your application. \n\t *          <br><br>\n\t *          Like Tone.Transport, A single Tone.Master is created\n\t *          on initialization and you do not need to explicitly construct one.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @singleton\n\t *  @example\n\t * //the audio will go from the oscillator to the speakers\n\t * oscillator.connect(Tone.Master);\n\t * //a convenience for connecting to the master output is also provided:\n\t * oscillator.toMaster();\n\t * //the above two examples are equivalent.\n\t */\n\tTone.Master = function(){\n\t\tTone.call(this);\n\n\t\t/**\n\t\t *  The private volume node\n\t\t *  @type  {Tone.Volume}\n\t\t *  @private\n\t\t */\n\t\tthis._volume = this.output = new Tone.Volume();\n\n\t\t/**\n\t\t * The volume of the master output.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t */\n\t\tthis.volume = this._volume.volume;\n\t\t\n\t\tthis._readOnly(\"volume\");\n\t\t//connections\n\t\tthis.input.chain(this.output, this.context.destination);\n\t};\n\n\tTone.extend(Tone.Master);\n\n\t/**\n\t *  @type {Object}\n\t *  @const\n\t */\n\tTone.Master.defaults = {\n\t\t\"volume\" : 0,\n\t\t\"mute\" : false\n\t};\n\n\t/**\n\t * Mute the output. \n\t * @memberOf Tone.Master#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * Tone.Master.mute = true;\n\t */\n\tObject.defineProperty(Tone.Master.prototype, \"mute\", {\n\t\tget : function(){\n\t\t\treturn this._volume.mute;\n\t\t}, \n\t\tset : function(mute){\n\t\t\tthis._volume.mute = mute;\n\t\t}\n\t});\n\n\t/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n\t *  chained in the master effects chain. \n\t *  @param {AudioNode|Tone...} args All arguments will be connected in a row\n\t *                                  and the Master will be routed through it.\n\t *  @return  {Tone.Master}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter \n\t * //and compressor before going to the speakers\n\t * Tone.Master.chain(lowBump, masterCompressor);\n\t */\n\tTone.Master.prototype.chain = function(){\n\t\tthis.input.disconnect();\n\t\tthis.input.chain.apply(this.input, arguments);\n\t\targuments[arguments.length - 1].connect(this.output);\n\t};\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Master}  this\n\t */\n\tTone.Master.prototype.dispose = function(){\n\t\tTone.prototype.dispose.call(this);\n\t\tthis._writable(\"volume\");\n\t\tthis._volume.dispose();\n\t\tthis._volume = null;\n\t\tthis.volume = null;\n\t};\n\n\t///////////////////////////////////////////////////////////////////////////\n\t//\tAUGMENT TONE's PROTOTYPE\n\t///////////////////////////////////////////////////////////////////////////\n\n\t/**\n\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t *  @returns {Tone} this\n\t *  @example\n\t * //connect an oscillator to the master output\n\t * var osc = new Tone.Oscillator().toMaster();\n\t */\n\tTone.prototype.toMaster = function(){\n\t\tthis.connect(Tone.Master);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Also augment AudioNode's prototype to include toMaster\n\t *  as a convenience\n\t *  @returns {AudioNode} this\n\t */\n\tAudioNode.prototype.toMaster = function(){\n\t\tthis.connect(Tone.Master);\n\t\treturn this;\n\t};\n\n\tvar MasterConstructor = Tone.Master;\n\n\t/**\n\t *  initialize the module and listen for new audio contexts\n\t */\n\tTone._initAudioContext(function(){\n\t\t//a single master output\n\t\tif (!Tone.prototype.isUndef(Tone.Master)){\n\t\t\tTone.Master = new MasterConstructor();\n\t\t} else {\n\t\t\tMasterConstructor.prototype.dispose.call(Tone.Master);\n\t\t\tMasterConstructor.call(Tone.Master);\n\t\t}\n\t});\n\n\treturn Tone.Master;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vVG9uZWpzL1RvbmUuanMvVG9uZS9jb3JlL01hc3Rlci5qcz84ZTkwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJnRUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLGFBQWEsa0JBQWtCO0FBQy9CO0FBQ0EsZUFBZSxZQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxLQUFLO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBLENBQUMiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoW1wiVG9uZS9jb3JlL1RvbmVcIiwgXCJUb25lL2NvbXBvbmVudC9Wb2x1bWVcIl0sIGZ1bmN0aW9uKFRvbmUpe1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0LyoqXG5cdCAqICBAY2xhc3MgIEEgc2luZ2xlIG1hc3RlciBvdXRwdXQgd2hpY2ggaXMgY29ubmVjdGVkIHRvIHRoZVxuXHQgKiAgICAgICAgICBBdWRpb0Rlc3RpbmF0aW9uTm9kZSAoYWthIHlvdXIgc3BlYWtlcnMpLiBcblx0ICogICAgICAgICAgSXQgcHJvdmlkZXMgdXNlZnVsIGNvbnZlbmllbmNlcyBzdWNoIGFzIHRoZSBhYmlsaXR5IFxuXHQgKiAgICAgICAgICB0byBzZXQgdGhlIHZvbHVtZSBhbmQgbXV0ZSB0aGUgZW50aXJlIGFwcGxpY2F0aW9uLiBcblx0ICogICAgICAgICAgSXQgYWxzbyBnaXZlcyB5b3UgdGhlIGFiaWxpdHkgdG8gYXBwbHkgbWFzdGVyIGVmZmVjdHMgdG8geW91ciBhcHBsaWNhdGlvbi4gXG5cdCAqICAgICAgICAgIDxicj48YnI+XG5cdCAqICAgICAgICAgIExpa2UgVG9uZS5UcmFuc3BvcnQsIEEgc2luZ2xlIFRvbmUuTWFzdGVyIGlzIGNyZWF0ZWRcblx0ICogICAgICAgICAgb24gaW5pdGlhbGl6YXRpb24gYW5kIHlvdSBkbyBub3QgbmVlZCB0byBleHBsaWNpdGx5IGNvbnN0cnVjdCBvbmUuXG5cdCAqXG5cdCAqICBAY29uc3RydWN0b3Jcblx0ICogIEBleHRlbmRzIHtUb25lfVxuXHQgKiAgQHNpbmdsZXRvblxuXHQgKiAgQGV4YW1wbGVcblx0ICogLy90aGUgYXVkaW8gd2lsbCBnbyBmcm9tIHRoZSBvc2NpbGxhdG9yIHRvIHRoZSBzcGVha2Vyc1xuXHQgKiBvc2NpbGxhdG9yLmNvbm5lY3QoVG9uZS5NYXN0ZXIpO1xuXHQgKiAvL2EgY29udmVuaWVuY2UgZm9yIGNvbm5lY3RpbmcgdG8gdGhlIG1hc3RlciBvdXRwdXQgaXMgYWxzbyBwcm92aWRlZDpcblx0ICogb3NjaWxsYXRvci50b01hc3RlcigpO1xuXHQgKiAvL3RoZSBhYm92ZSB0d28gZXhhbXBsZXMgYXJlIGVxdWl2YWxlbnQuXG5cdCAqL1xuXHRUb25lLk1hc3RlciA9IGZ1bmN0aW9uKCl7XG5cdFx0VG9uZS5jYWxsKHRoaXMpO1xuXG5cdFx0LyoqXG5cdFx0ICogIFRoZSBwcml2YXRlIHZvbHVtZSBub2RlXG5cdFx0ICogIEB0eXBlICB7VG9uZS5Wb2x1bWV9XG5cdFx0ICogIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGhpcy5fdm9sdW1lID0gdGhpcy5vdXRwdXQgPSBuZXcgVG9uZS5Wb2x1bWUoKTtcblxuXHRcdC8qKlxuXHRcdCAqIFRoZSB2b2x1bWUgb2YgdGhlIG1hc3RlciBvdXRwdXQuXG5cdFx0ICogQHR5cGUge0RlY2liZWxzfVxuXHRcdCAqIEBzaWduYWxcblx0XHQgKi9cblx0XHR0aGlzLnZvbHVtZSA9IHRoaXMuX3ZvbHVtZS52b2x1bWU7XG5cdFx0XG5cdFx0dGhpcy5fcmVhZE9ubHkoXCJ2b2x1bWVcIik7XG5cdFx0Ly9jb25uZWN0aW9uc1xuXHRcdHRoaXMuaW5wdXQuY2hhaW4odGhpcy5vdXRwdXQsIHRoaXMuY29udGV4dC5kZXN0aW5hdGlvbik7XG5cdH07XG5cblx0VG9uZS5leHRlbmQoVG9uZS5NYXN0ZXIpO1xuXG5cdC8qKlxuXHQgKiAgQHR5cGUge09iamVjdH1cblx0ICogIEBjb25zdFxuXHQgKi9cblx0VG9uZS5NYXN0ZXIuZGVmYXVsdHMgPSB7XG5cdFx0XCJ2b2x1bWVcIiA6IDAsXG5cdFx0XCJtdXRlXCIgOiBmYWxzZVxuXHR9O1xuXG5cdC8qKlxuXHQgKiBNdXRlIHRoZSBvdXRwdXQuIFxuXHQgKiBAbWVtYmVyT2YgVG9uZS5NYXN0ZXIjXG5cdCAqIEB0eXBlIHtib29sZWFufVxuXHQgKiBAbmFtZSBtdXRlXG5cdCAqIEBleGFtcGxlXG5cdCAqIC8vbXV0ZSB0aGUgb3V0cHV0XG5cdCAqIFRvbmUuTWFzdGVyLm11dGUgPSB0cnVlO1xuXHQgKi9cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KFRvbmUuTWFzdGVyLnByb3RvdHlwZSwgXCJtdXRlXCIsIHtcblx0XHRnZXQgOiBmdW5jdGlvbigpe1xuXHRcdFx0cmV0dXJuIHRoaXMuX3ZvbHVtZS5tdXRlO1xuXHRcdH0sIFxuXHRcdHNldCA6IGZ1bmN0aW9uKG11dGUpe1xuXHRcdFx0dGhpcy5fdm9sdW1lLm11dGUgPSBtdXRlO1xuXHRcdH1cblx0fSk7XG5cblx0LyoqXG5cdCAqICBBZGQgYSBtYXN0ZXIgZWZmZWN0cyBjaGFpbi4gTk9URTogdGhpcyB3aWxsIGRpc2Nvbm5lY3QgYW55IG5vZGVzIHdoaWNoIHdlcmUgcHJldmlvdXNseSBcblx0ICogIGNoYWluZWQgaW4gdGhlIG1hc3RlciBlZmZlY3RzIGNoYWluLiBcblx0ICogIEBwYXJhbSB7QXVkaW9Ob2RlfFRvbmUuLi59IGFyZ3MgQWxsIGFyZ3VtZW50cyB3aWxsIGJlIGNvbm5lY3RlZCBpbiBhIHJvd1xuXHQgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIE1hc3RlciB3aWxsIGJlIHJvdXRlZCB0aHJvdWdoIGl0LlxuXHQgKiAgQHJldHVybiAge1RvbmUuTWFzdGVyfSAgdGhpc1xuXHQgKiAgQGV4YW1wbGVcblx0ICogLy9zb21lIG92ZXJhbGwgY29tcHJlc3Npb24gdG8ga2VlcCB0aGUgbGV2ZWxzIGluIGNoZWNrXG5cdCAqIHZhciBtYXN0ZXJDb21wcmVzc29yID0gbmV3IFRvbmUuQ29tcHJlc3Nvcih7XG5cdCAqIFx0XCJ0aHJlc2hvbGRcIiA6IC02LFxuXHQgKiBcdFwicmF0aW9cIiA6IDMsXG5cdCAqIFx0XCJhdHRhY2tcIiA6IDAuNSxcblx0ICogXHRcInJlbGVhc2VcIiA6IDAuMVxuXHQgKiB9KTtcblx0ICogLy9naXZlIGEgbGl0dGxlIGJvb3N0IHRvIHRoZSBsb3dzXG5cdCAqIHZhciBsb3dCdW1wID0gbmV3IFRvbmUuRmlsdGVyKDIwMCwgXCJsb3dzaGVsZlwiKTtcblx0ICogLy9yb3V0ZSBldmVyeXRoaW5nIHRocm91Z2ggdGhlIGZpbHRlciBcblx0ICogLy9hbmQgY29tcHJlc3NvciBiZWZvcmUgZ29pbmcgdG8gdGhlIHNwZWFrZXJzXG5cdCAqIFRvbmUuTWFzdGVyLmNoYWluKGxvd0J1bXAsIG1hc3RlckNvbXByZXNzb3IpO1xuXHQgKi9cblx0VG9uZS5NYXN0ZXIucHJvdG90eXBlLmNoYWluID0gZnVuY3Rpb24oKXtcblx0XHR0aGlzLmlucHV0LmRpc2Nvbm5lY3QoKTtcblx0XHR0aGlzLmlucHV0LmNoYWluLmFwcGx5KHRoaXMuaW5wdXQsIGFyZ3VtZW50cyk7XG5cdFx0YXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXS5jb25uZWN0KHRoaXMub3V0cHV0KTtcblx0fTtcblxuXHQvKipcblx0ICogIENsZWFuIHVwXG5cdCAqICBAcmV0dXJuICB7VG9uZS5NYXN0ZXJ9ICB0aGlzXG5cdCAqL1xuXHRUb25lLk1hc3Rlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCl7XG5cdFx0VG9uZS5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKHRoaXMpO1xuXHRcdHRoaXMuX3dyaXRhYmxlKFwidm9sdW1lXCIpO1xuXHRcdHRoaXMuX3ZvbHVtZS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5fdm9sdW1lID0gbnVsbDtcblx0XHR0aGlzLnZvbHVtZSA9IG51bGw7XG5cdH07XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdC8vXHRBVUdNRU5UIFRPTkUncyBQUk9UT1RZUEVcblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblx0LyoqXG5cdCAqICBDb25uZWN0ICd0aGlzJyB0byB0aGUgbWFzdGVyIG91dHB1dC4gU2hvcnRoYW5kIGZvciB0aGlzLmNvbm5lY3QoVG9uZS5NYXN0ZXIpXG5cdCAqICBAcmV0dXJucyB7VG9uZX0gdGhpc1xuXHQgKiAgQGV4YW1wbGVcblx0ICogLy9jb25uZWN0IGFuIG9zY2lsbGF0b3IgdG8gdGhlIG1hc3RlciBvdXRwdXRcblx0ICogdmFyIG9zYyA9IG5ldyBUb25lLk9zY2lsbGF0b3IoKS50b01hc3RlcigpO1xuXHQgKi9cblx0VG9uZS5wcm90b3R5cGUudG9NYXN0ZXIgPSBmdW5jdGlvbigpe1xuXHRcdHRoaXMuY29ubmVjdChUb25lLk1hc3Rlcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqICBBbHNvIGF1Z21lbnQgQXVkaW9Ob2RlJ3MgcHJvdG90eXBlIHRvIGluY2x1ZGUgdG9NYXN0ZXJcblx0ICogIGFzIGEgY29udmVuaWVuY2Vcblx0ICogIEByZXR1cm5zIHtBdWRpb05vZGV9IHRoaXNcblx0ICovXG5cdEF1ZGlvTm9kZS5wcm90b3R5cGUudG9NYXN0ZXIgPSBmdW5jdGlvbigpe1xuXHRcdHRoaXMuY29ubmVjdChUb25lLk1hc3Rlcik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0dmFyIE1hc3RlckNvbnN0cnVjdG9yID0gVG9uZS5NYXN0ZXI7XG5cblx0LyoqXG5cdCAqICBpbml0aWFsaXplIHRoZSBtb2R1bGUgYW5kIGxpc3RlbiBmb3IgbmV3IGF1ZGlvIGNvbnRleHRzXG5cdCAqL1xuXHRUb25lLl9pbml0QXVkaW9Db250ZXh0KGZ1bmN0aW9uKCl7XG5cdFx0Ly9hIHNpbmdsZSBtYXN0ZXIgb3V0cHV0XG5cdFx0aWYgKCFUb25lLnByb3RvdHlwZS5pc1VuZGVmKFRvbmUuTWFzdGVyKSl7XG5cdFx0XHRUb25lLk1hc3RlciA9IG5ldyBNYXN0ZXJDb25zdHJ1Y3RvcigpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRNYXN0ZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZGlzcG9zZS5jYWxsKFRvbmUuTWFzdGVyKTtcblx0XHRcdE1hc3RlckNvbnN0cnVjdG9yLmNhbGwoVG9uZS5NYXN0ZXIpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIFRvbmUuTWFzdGVyO1xufSk7XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuLi9Ub25lanMvVG9uZS5qcy9Ub25lL2NvcmUvTWFzdGVyLmpzXG4gKiogbW9kdWxlIGlkID0gMjVcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Tone2 = __webpack_require__(3);\n\nvar _Tone3 = _interopRequireDefault(_Tone2);\n\nvar _Master = __webpack_require__(25);\n\nvar _Master2 = _interopRequireDefault(_Master);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PianoBase = function (_Tone) {\n\t_inherits(PianoBase, _Tone);\n\n\tfunction PianoBase() {\n\t\tvar vol = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];\n\n\t\t_classCallCheck(this, PianoBase);\n\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PianoBase).call(this, 0, 1));\n\n\t\t_this.volume = vol;\n\t\treturn _this;\n\t}\n\n\t_createClass(PianoBase, [{\n\t\tkey: 'volume',\n\t\tget: function get() {\n\t\t\treturn this.gainToDb(this.output.gain.value);\n\t\t},\n\t\tset: function set(vol) {\n\t\t\tthis.output.gain.value = this.dbToGain(vol);\n\t\t}\n\t}]);\n\n\treturn PianoBase;\n}(_Tone3.default);\n\nexports.default = PianoBase;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvUGlhbm9CYXNlLmpzPzJlNjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUIsUzs7O0FBQ3BCLHNCQUFrQjtBQUFBLE1BQU4sR0FBTSx5REFBRixDQUFFOztBQUFBOztBQUFBLDJGQUNYLENBRFcsRUFDUixDQURROztBQUdqQixRQUFLLE1BQUwsR0FBYyxHQUFkO0FBSGlCO0FBSWpCOzs7O3NCQUNXO0FBQ1gsVUFBTyxLQUFLLFFBQUwsQ0FBYyxLQUFLLE1BQUwsQ0FBWSxJQUFaLENBQWlCLEtBQS9CLENBQVA7QUFDQSxHO29CQUNVLEcsRUFBSTtBQUNkLFFBQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsS0FBakIsR0FBeUIsS0FBSyxRQUFMLENBQWMsR0FBZCxDQUF6QjtBQUNBOzs7Ozs7a0JBWG1CLFMiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVG9uZSBmcm9tICdUb25lL2NvcmUvVG9uZSdcbmltcG9ydCBNYXN0ZXIgZnJvbSAnVG9uZS9jb3JlL01hc3RlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGlhbm9CYXNlIGV4dGVuZHMgVG9uZSB7XG5cdGNvbnN0cnVjdG9yKHZvbD0wKXtcblx0XHRzdXBlcigwLCAxKVxuXG5cdFx0dGhpcy52b2x1bWUgPSB2b2xcblx0fVxuXHRnZXQgdm9sdW1lKCl7XG5cdFx0cmV0dXJuIHRoaXMuZ2FpblRvRGIodGhpcy5vdXRwdXQuZ2Fpbi52YWx1ZSlcblx0fVxuXHRzZXQgdm9sdW1lKHZvbCl7XG5cdFx0dGhpcy5vdXRwdXQuZ2Fpbi52YWx1ZSA9IHRoaXMuZGJUb0dhaW4odm9sKVxuXHR9XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvUGlhbm9CYXNlLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _Tone = __webpack_require__(3);\n\nvar _Tone2 = _interopRequireDefault(_Tone);\n\nvar _Buffer = __webpack_require__(12);\n\nvar _Buffer2 = _interopRequireDefault(_Buffer);\n\nvar _BufferSource = __webpack_require__(11);\n\nvar _BufferSource2 = _interopRequireDefault(_BufferSource);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar timeMapping = { 'pedals': { 'down': { 'duration': 6.37530612244898, 'start': 2114.796961451247 }, 'up': { 'duration': 0.6948072562358276, 'start': 2121.172267573696 } }, 'notes': { '60': [{ 'duration': 12.04514739229025, 'start': 855.9087528344671 }, { 'duration': 15.72734693877551, 'start': 899.1847845804989 }, { 'duration': 16.18562358276644, 'start': 914.9121315192743 }, { 'duration': 15.716689342403628, 'start': 867.9539002267574 }, { 'duration': 15.514195011337868, 'start': 883.670589569161 }], '63': [{ 'duration': 13.350702947845805, 'start': 1371.2647619047618 }, { 'duration': 15.141179138321995, 'start': 1414.9990702947846 }, { 'duration': 15.817936507936508, 'start': 1430.1402494331066 }, { 'duration': 15.556825396825397, 'start': 1384.6154648526076 }, { 'duration': 14.826780045351473, 'start': 1400.1722902494332 }], '66': [{ 'duration': 12.396848072562358, 'start': 1856.6803401360544 }, { 'duration': 13.137551020408162, 'start': 1898.5442403628117 }, { 'duration': 14.688231292517006, 'start': 1911.68179138322 }, { 'duration': 14.970657596371883, 'start': 1869.0771882086167 }, { 'duration': 14.496394557823129, 'start': 1884.0478458049886 }], '69': [{ 'duration': 13.201496598639455, 'start': 388.5784807256236 }, { 'duration': 13.62780045351474, 'start': 430.4477097505669 }, { 'duration': 13.32297052154195, 'start': 444.07551020408164 }, { 'duration': 13.739705215419502, 'start': 401.77997732426303 }, { 'duration': 14.928027210884354, 'start': 415.51968253968255 }], '81': [{ 'duration': 6.961473922902495, 'start': 457.3984807256236 }, { 'duration': 6.865555555555556, 'start': 485.3062811791383 }, { 'duration': 10.537120181405896, 'start': 492.1718367346939 }, { 'duration': 10.377256235827664, 'start': 464.35995464852607 }, { 'duration': 10.56907029478458, 'start': 474.7372108843537 }], '87': [{ 'duration': 6.908185941043084, 'start': 1511.006485260771 }, { 'duration': 6.570907029478458, 'start': 1531.191700680272 }, { 'duration': 6.699478458049887, 'start': 1537.7626077097505 }, { 'duration': 6.821791383219955, 'start': 1517.9146712018141 }, { 'duration': 6.455238095238095, 'start': 1524.736462585034 }], '84': [{ 'duration': 5.213628117913832, 'start': 1005.6419727891157 }, { 'duration': 5.442766439909297, 'start': 1023.2971428571428 }, { 'duration': 6.22609977324263, 'start': 1028.7399092970522 }, { 'duration': 6.252743764172336, 'start': 1010.8556009070295 }, { 'duration': 6.188798185941043, 'start': 1017.1083446712018 }], '24': [{ 'duration': 23.864421768707484, 'start': 552.7069841269841 }, { 'duration': 23.60331065759637, 'start': 623.5648752834467 }, { 'duration': 23.619297052154195, 'start': 647.1681859410431 }, { 'duration': 23.523378684807255, 'start': 576.5714058956916 }, { 'duration': 23.470090702947846, 'start': 600.0947845804989 }], '27': [{ 'duration': 19.04718820861678, 'start': 1073.103537414966 }, { 'duration': 22.06328798185941, 'start': 1140.4444217687076 }, { 'duration': 24.274739229024945, 'start': 1162.5077097505668 }, { 'duration': 24.018956916099775, 'start': 1092.1507256235827 }, { 'duration': 24.274739229024945, 'start': 1116.1696825396825 }], '21': [{ 'duration': 21.114761904761906, 'start': 0.0 }, { 'duration': 24.77031746031746, 'start': 72.66904761904762 }, { 'duration': 24.999455782312925, 'start': 97.43936507936507 }, { 'duration': 25.691655328798188, 'start': 21.114761904761906 }, { 'duration': 25.862630385487527, 'start': 46.80641723356009 }], '48': [{ 'duration': 15.87122448979592, 'start': 776.0943537414965 }, { 'duration': 15.860566893424036, 'start': 824.0490702947845 }, { 'duration': 15.999115646258504, 'start': 839.9096371882086 }, { 'duration': 15.807278911564627, 'start': 791.9655782312925 }, { 'duration': 16.276213151927436, 'start': 807.7728571428571 }], '45': [{ 'duration': 16.0897052154195, 'start': 232.49866213151927 }, { 'duration': 16.19628117913832, 'start': 281.03954648526076 }, { 'duration': 15.935170068027212, 'start': 297.2358276643991 }, { 'duration': 16.16963718820862, 'start': 248.58836734693878 }, { 'duration': 16.28154195011338, 'start': 264.7580045351474 }], '42': [{ 'duration': 17.347301587301587, 'start': 1679.3013151927437 }, { 'duration': 19.51079365079365, 'start': 1737.6685034013606 }, { 'duration': 20.448662131519274, 'start': 1757.1792970521542 }, { 'duration': 20.374058956916098, 'start': 1696.6486167800454 }, { 'duration': 20.645827664399093, 'start': 1717.0226757369614 }], '105': [{ 'duration': 2.6238321995464853, 'start': 534.8771655328799 }, { 'duration': 3.8547845804988663, 'start': 544.8268934240363 }, { 'duration': 4.0253061224489795, 'start': 548.6816780045351 }, { 'duration': 3.7695238095238097, 'start': 537.5009977324263 }, { 'duration': 3.5563718820861676, 'start': 541.2705215419501 }], '75': [{ 'duration': 12.471451247165533, 'start': 1445.958185941043 }, { 'duration': 12.972358276643991, 'start': 1485.0884126984126 }, { 'duration': 12.945714285714285, 'start': 1498.0607709750566 }, { 'duration': 13.37734693877551, 'start': 1458.4296371882085 }, { 'duration': 13.281428571428572, 'start': 1471.8069841269842 }], '78': [{ 'duration': 11.171224489795918, 'start': 1926.370022675737 }, { 'duration': 11.634829931972789, 'start': 1961.290498866213 }, { 'duration': 11.911927437641724, 'start': 1972.925328798186 }, { 'duration': 11.752063492063492, 'start': 1937.541247165533 }, { 'duration': 11.99718820861678, 'start': 1949.2933106575963 }], '99': [{ 'duration': 5.053764172335601, 'start': 1544.4620861678004 }, { 'duration': 4.829954648526077, 'start': 1559.6660090702949 }, { 'duration': 4.872585034013605, 'start': 1564.4959637188208 }, { 'duration': 5.027120181405896, 'start': 1549.515850340136 }, { 'duration': 5.1230385487528345, 'start': 1554.542970521542 }], '108': [{ 'duration': 3.098095238095238, 'start': 1056.0783673469389 }, { 'duration': 2.8103401360544216, 'start': 1066.411768707483 }, { 'duration': 3.8814285714285712, 'start': 1069.2221088435374 }, { 'duration': 3.5936734693877552, 'start': 1059.176462585034 }, { 'duration': 3.6416326530612246, 'start': 1062.7701360544218 }], '72': [{ 'duration': 13.403990929705216, 'start': 931.0977551020408 }, { 'duration': 15.333015873015873, 'start': 974.7414739229025 }, { 'duration': 15.56748299319728, 'start': 990.0744897959183 }, { 'duration': 15.514195011337868, 'start': 944.501746031746 }, { 'duration': 14.725532879818594, 'start': 960.0159410430839 }], '102': [{ 'duration': 4.835283446712018, 'start': 2012.6212698412699 }, { 'duration': 4.755351473922903, 'start': 2026.75410430839 }, { 'duration': 4.829954648526077, 'start': 2031.509455782313 }, { 'duration': 4.79265306122449, 'start': 2017.456553287982 }, { 'duration': 4.5048979591836735, 'start': 2022.2492063492064 }], '90': [{ 'duration': 4.297074829931973, 'start': 1984.8372562358277 }, { 'duration': 5.533356009070295, 'start': 2001.2401587301588 }, { 'duration': 5.847755102040816, 'start': 2006.773514739229 }, { 'duration': 6.124852607709751, 'start': 1989.1343310657596 }, { 'duration': 5.980975056689342, 'start': 1995.2591836734694 }], '93': [{ 'duration': 5.453424036281179, 'start': 502.7089569160998 }, { 'duration': 6.343219954648526, 'start': 521.7270068027211 }, { 'duration': 6.806938775510204, 'start': 528.0702267573696 }, { 'duration': 6.731043083900227, 'start': 508.16238095238094 }, { 'duration': 6.83358276643991, 'start': 514.8934240362812 }], '96': [{ 'duration': 4.137210884353742, 'start': 1034.9660090702948 }, { 'duration': 4.051950113378685, 'start': 1047.9478231292517 }, { 'duration': 4.07859410430839, 'start': 1051.9997732426305 }, { 'duration': 4.483582766439909, 'start': 1039.1032199546485 }, { 'duration': 4.361020408163266, 'start': 1043.5868027210884 }], '39': [{ 'duration': 18.913968253968253, 'start': 1186.782448979592 }, { 'duration': 22.233809523809523, 'start': 1249.8549659863945 }, { 'duration': 22.105918367346938, 'start': 1272.0887755102042 }, { 'duration': 21.940725623582768, 'start': 1205.6964172335602 }, { 'duration': 22.217823129251702, 'start': 1227.6371428571429 }], '33': [{ 'duration': 20.192879818594104, 'start': 122.43882086167801 }, { 'duration': 19.765759637188207, 'start': 189.42800453514738 }, { 'duration': 23.304897959183673, 'start': 209.1937641723356 }, { 'duration': 23.39015873015873, 'start': 142.6317006802721 }, { 'duration': 23.406145124716552, 'start': 166.02185941043084 }], '54': [{ 'duration': 15.498208616780046, 'start': 1777.6279591836735 }, { 'duration': 16.07371882086168, 'start': 1824.4796145124717 }, { 'duration': 16.127006802721088, 'start': 1840.5533333333333 }, { 'duration': 15.940498866213153, 'start': 1793.1261678004535 }, { 'duration': 15.412947845804988, 'start': 1809.0666666666666 }], '57': [{ 'duration': 13.01498866213152, 'start': 313.1709977324263 }, { 'duration': 15.578140589569161, 'start': 357.38489795918366 }, { 'duration': 15.615442176870749, 'start': 372.9630385487528 }, { 'duration': 15.311700680272109, 'start': 326.1859863945578 }, { 'duration': 15.887210884353742, 'start': 341.4976870748299 }], '30': [{ 'duration': 16.713174603174604, 'start': 1569.3685487528344 }, { 'duration': 23.251609977324264, 'start': 1632.7021768707482 }, { 'duration': 23.3475283446712, 'start': 1655.9537868480725 }, { 'duration': 23.3475283446712, 'start': 1586.081723356009 }, { 'duration': 23.272925170068028, 'start': 1609.4292517006802 }], '51': [{ 'duration': 13.116235827664399, 'start': 1294.1946938775511 }, { 'duration': 15.924512471655328, 'start': 1339.261201814059 }, { 'duration': 16.079047619047618, 'start': 1355.1857142857143 }, { 'duration': 15.844580498866213, 'start': 1307.3109297052154 }, { 'duration': 16.105691609977324, 'start': 1323.1555102040816 }], '36': [{ 'duration': 18.668843537414965, 'start': 670.7874829931973 }, { 'duration': 19.7181179138322, 'start': 734.0571655328798 }, { 'duration': 22.31907029478458, 'start': 753.775283446712 }, { 'duration': 22.281768707482993, 'start': 689.4563265306123 }, { 'duration': 22.31907029478458, 'start': 711.7380952380952 }] }, 'hammers': { '60': { 'duration': 0.45501133786848075, 'start': 2107.1161904761907 }, '63': { 'duration': 0.45501133786848075, 'start': 2107.571201814059 }, '66': { 'duration': 0.45501133786848075, 'start': 2108.0262131519275 }, '69': { 'duration': 0.45501133786848075, 'start': 2108.4812244897957 }, '81': { 'duration': 0.45501133786848075, 'start': 2110.30126984127 }, '87': { 'duration': 0.45501133786848075, 'start': 2111.2112925170068 }, '84': { 'duration': 0.45501133786848075, 'start': 2110.756281179138 }, '24': { 'duration': 0.45501133786848075, 'start': 2101.6560544217687 }, '27': { 'duration': 0.45501133786848075, 'start': 2102.1110657596373 }, '21': { 'duration': 0.45501133786848075, 'start': 2101.2010430839 }, '48': { 'duration': 0.45501133786848075, 'start': 2105.2961451247165 }, '108': { 'duration': 0.45501133786848075, 'start': 2114.3419501133785 }, '45': { 'duration': 0.45501133786848075, 'start': 2104.841133786848 }, '42': { 'duration': 0.45501133786848075, 'start': 2104.3861224489797 }, '105': { 'duration': 0.45501133786848075, 'start': 2113.8869387755103 }, '96': { 'duration': 0.40058956916099775, 'start': 2112.5763265306123 }, '99': { 'duration': 0.45501133786848075, 'start': 2112.9769160997735 }, '75': { 'duration': 0.45501133786848075, 'start': 2109.391247165533 }, '72': { 'duration': 0.45501133786848075, 'start': 2108.9362358276644 }, '102': { 'duration': 0.45501133786848075, 'start': 2113.4319274376417 }, '90': { 'duration': 0.45501133786848075, 'start': 2111.6663038548754 }, '93': { 'duration': 0.45501133786848075, 'start': 2112.1213151927436 }, '78': { 'duration': 0.45501133786848075, 'start': 2109.8462585034013 }, '39': { 'duration': 0.45501133786848075, 'start': 2103.931111111111 }, '33': { 'duration': 0.45501133786848075, 'start': 2103.021088435374 }, '54': { 'duration': 0.45501133786848075, 'start': 2106.2061678004534 }, '57': { 'duration': 0.45501133786848075, 'start': 2106.661179138322 }, '30': { 'duration': 0.45501133786848075, 'start': 2102.5660770975055 }, '51': { 'duration': 0.45501133786848075, 'start': 2105.751156462585 }, '36': { 'duration': 0.45501133786848075, 'start': 2103.476099773243 } }, 'harmonics': { '60': { 'duration': 2.836984126984127, 'start': 2061.7337188208617 }, '63': { 'duration': 2.831655328798186, 'start': 2078.622403628118 }, '66': { 'duration': 2.7730385487528344, 'start': 2095.5697052154196 }, '69': { 'duration': 2.842312925170068, 'start': 2047.5967573696146 }, '81': { 'duration': 2.874285714285714, 'start': 2050.4390702947844 }, '87': { 'duration': 2.7783673469387753, 'start': 2084.301700680272 }, '84': { 'duration': 2.7730385487528344, 'start': 2067.3490702947847 }, '24': { 'duration': 2.815668934240363, 'start': 2053.3133560090705 }, '27': { 'duration': 2.815668934240363, 'start': 2070.1221088435373 }, '21': { 'duration': 2.7783673469387753, 'start': 2036.339410430839 }, '48': { 'duration': 2.7890249433106575, 'start': 2058.944693877551 }, '45': { 'duration': 2.85297052154195, 'start': 2041.9814058956915 }, '42': { 'duration': 2.868956916099773, 'start': 2089.911723356009 }, '75': { 'duration': 2.847641723356009, 'start': 2081.454058956916 }, '72': { 'duration': 2.7783673469387753, 'start': 2064.570702947846 }, '78': { 'duration': 2.858299319727891, 'start': 2098.342743764172 }, '39': { 'duration': 2.8636281179138323, 'start': 2072.9377777777777 }, '33': { 'duration': 2.8636281179138323, 'start': 2039.1177777777777 }, '54': { 'duration': 2.7890249433106575, 'start': 2092.780680272109 }, '57': { 'duration': 2.762380952380952, 'start': 2044.8343764172337 }, '30': { 'duration': 2.831655328798186, 'start': 2087.080068027211 }, '51': { 'duration': 2.820997732426304, 'start': 2075.8014058956915 }, '36': { 'duration': 2.815668934240363, 'start': 2056.1290249433105 } } };\n\nfunction midiToNote(midi) {\n\tvar mod = midi % 3;\n\tif (mod === 1) {\n\t\treturn [midi - 1, _Tone2.default.prototype.intervalToFrequencyRatio(1)];\n\t} else if (mod === 2) {\n\t\treturn [midi + 1, _Tone2.default.prototype.intervalToFrequencyRatio(-1)];\n\t} else {\n\t\treturn [midi, 1];\n\t}\n}\n\nfunction clone(obj) {\n\tvar ret = {};\n\tfor (var attr in obj) {\n\t\tret[attr] = obj[attr];\n\t}\n\treturn ret;\n}\n\nexports.default = {\n\n\tvelocityCount: timeMapping.notes['21'].length,\n\n\tbuffer: null,\n\n\tnewSource: function newSource() {\n\t\treturn new _BufferSource2.default(this.buffer);\n\t},\n\tload: function load(url) {\n\t\tvar _this = this;\n\n\t\treturn new Promise(function (success) {\n\t\t\t_this.buffer = new _Buffer2.default(url, success);\n\t\t});\n\t},\n\tgetNote: function getNote(midi, velocity) {\n\t\tvar _midiToNote = midiToNote(midi);\n\n\t\tvar _midiToNote2 = _slicedToArray(_midiToNote, 2);\n\n\t\tvar note = _midiToNote2[0];\n\t\tvar rate = _midiToNote2[1];\n\n\t\tvar timing = clone(timeMapping.notes[note][velocity]);\n\t\ttiming.duration /= rate;\n\t\treturn { timing: timing, rate: rate };\n\t},\n\tgetPedal: function getPedal(direction) {\n\t\treturn clone(timeMapping.pedals[direction]);\n\t},\n\thasHarmonics: function hasHarmonics(midi) {\n\t\tvar _midiToNote3 = midiToNote(midi);\n\n\t\tvar _midiToNote4 = _slicedToArray(_midiToNote3, 2);\n\n\t\tvar note = _midiToNote4[0];\n\t\tvar rate = _midiToNote4[1];\n\n\t\treturn timeMapping.harmonics.hasOwnProperty(note);\n\t},\n\tgetHarmonics: function getHarmonics(midi) {\n\t\tvar _midiToNote5 = midiToNote(midi);\n\n\t\tvar _midiToNote6 = _slicedToArray(_midiToNote5, 2);\n\n\t\tvar note = _midiToNote6[0];\n\t\tvar rate = _midiToNote6[1];\n\n\t\tvar timing = clone(timeMapping.harmonics[note]);\n\t\ttiming.duration /= rate;\n\t\treturn { timing: timing, rate: rate };\n\t},\n\tgetRelease: function getRelease(midi) {\n\t\tvar _midiToNote7 = midiToNote(midi);\n\n\t\tvar _midiToNote8 = _slicedToArray(_midiToNote7, 2);\n\n\t\tvar note = _midiToNote8[0];\n\t\tvar rate = _midiToNote8[1];\n\n\t\tvar timing = clone(timeMapping.hammers[note]);\n\t\ttiming.duration /= rate;\n\t\treturn { timing: timing, rate: rate };\n\t}\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvU2FsYW1hbmRlci5qcz85YTgzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNLGNBQWMsRUFBQyxVQUFVLEVBQUMsUUFBUSxFQUFDLFlBQVksZ0JBQWIsRUFBK0IsU0FBUyxpQkFBeEMsRUFBVCxFQUFxRSxNQUFNLEVBQUMsWUFBWSxrQkFBYixFQUFpQyxTQUFTLGlCQUExQyxFQUEzRSxFQUFYLEVBQXFKLFNBQVMsRUFBQyxNQUFNLENBQUMsRUFBQyxZQUFZLGlCQUFiLEVBQWdDLFNBQVMsaUJBQXpDLEVBQUQsRUFBOEQsRUFBQyxZQUFZLGlCQUFiLEVBQWdDLFNBQVMsaUJBQXpDLEVBQTlELEVBQTJILEVBQUMsWUFBWSxpQkFBYixFQUFnQyxTQUFTLGlCQUF6QyxFQUEzSCxFQUF3TCxFQUFDLFlBQVksa0JBQWIsRUFBaUMsU0FBUyxpQkFBMUMsRUFBeEwsRUFBc1AsRUFBQyxZQUFZLGtCQUFiLEVBQWlDLFNBQVMsZ0JBQTFDLEVBQXRQLENBQVAsRUFBMlQsTUFBTSxDQUFDLEVBQUMsWUFBWSxrQkFBYixFQUFpQyxTQUFTLGtCQUExQyxFQUFELEVBQWdFLEVBQUMsWUFBWSxrQkFBYixFQUFpQyxTQUFTLGtCQUExQyxFQUFoRSxFQUErSCxFQUFDLFlBQVksa0JBQWIsRUFBaUMsU0FBUyxrQkFBMUMsRUFBL0gsRUFBOEwsRUFBQyxZQUFZLGtCQUFiLEVBQWlDLFNBQVMsa0JBQTFDLEVBQTlMLEVBQTZQLEVBQUMsWUFBWSxrQkFBYixFQUFpQyxTQUFTLGtCQUExQyxFQUE3UCxDQUFqVSxFQUE4bkIsTUFBTSxDQUFDLEVBQUMsWUFBWSxrQkFBYixFQUFpQyxTQUFTLGtCQUExQyxFQUFELEVBQWdFLEVBQUMsWUFBWSxrQkFBYixFQUFpQyxTQUFTLGtCQUExQyxFQUFoRSxFQUErSCxFQUFDLFlBQVksa0JBQWIsRUFBaUMsU0FBUyxnQkFBMUMsRUFBL0gsRUFB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Q0FBc0IsY0FBdEIsQ0FBcUMsSUFBckMsQ0FBUDtBQUNBLEVBOUJhO0FBZ0NkLGFBaENjLHdCQWdDRCxJQWhDQyxFQWdDSTtBQUFBLHFCQUNFLFdBQVcsSUFBWCxDQURGOztBQUFBOztBQUFBLE1BQ1osSUFEWTtBQUFBLE1BQ04sSUFETTs7QUFFakIsTUFBSSxTQUFTLE1BQU0sWUFBWSxTQUFaLENBQXNCLElBQXRCLENBQU4sQ0FBYjtBQUNBLFNBQU8sUUFBUCxJQUFtQixJQUFuQjtBQUNBLFNBQU8sRUFBQyxjQUFELEVBQVMsVUFBVCxFQUFQO0FBQ0EsRUFyQ2E7QUF1Q2QsV0F2Q2Msc0JBdUNILElBdkNHLEVBdUNFO0FBQUEscUJBQ0ksV0FBVyxJQUFYLENBREo7O0FBQUE7O0FBQUEsTUFDVixJQURVO0FBQUEsTUFDSixJQURJOztBQUVmLE1BQUksU0FBUyxNQUFNLFlBQVksT0FBWixDQUFvQixJQUFwQixDQUFOLENBQWI7QUFDQSxTQUFPLFFBQVAsSUFBbUIsSUFBbkI7QUFDQSxTQUFPLEVBQUMsY0FBRCxFQUFTLFVBQVQsRUFBUDtBQUNBO0FBNUNhLEMiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVG9uZSBmcm9tICdUb25lL2NvcmUvVG9uZSdcbmltcG9ydCBCdWZmZXIgZnJvbSAnVG9uZS9jb3JlL0J1ZmZlcidcbmltcG9ydCBCdWZmZXJTb3VyY2UgZnJvbSAnVG9uZS9zb3VyY2UvQnVmZmVyU291cmNlJ1xuXG5jb25zdCB0aW1lTWFwcGluZyA9IHsncGVkYWxzJzogeydkb3duJzogeydkdXJhdGlvbic6IDYuMzc1MzA2MTIyNDQ4OTgsICdzdGFydCc6IDIxMTQuNzk2OTYxNDUxMjQ3fSwgJ3VwJzogeydkdXJhdGlvbic6IDAuNjk0ODA3MjU2MjM1ODI3NiwgJ3N0YXJ0JzogMjEyMS4xNzIyNjc1NzM2OTZ9fSwgJ25vdGVzJzogeyc2MCc6IFt7J2R1cmF0aW9uJzogMTIuMDQ1MTQ3MzkyMjkwMjUsICdzdGFydCc6IDg1NS45MDg3NTI4MzQ0NjcxfSwgeydkdXJhdGlvbic6IDE1LjcyNzM0NjkzODc3NTUxLCAnc3RhcnQnOiA4OTkuMTg0Nzg0NTgwNDk4OX0sIHsnZHVyYXRpb24nOiAxNi4xODU2MjM1ODI3NjY0NCwgJ3N0YXJ0JzogOTE0LjkxMjEzMTUxOTI3NDN9LCB7J2R1cmF0aW9uJzogMTUuNzE2Njg5MzQyNDAzNjI4LCAnc3RhcnQnOiA4NjcuOTUzOTAwMjI2NzU3NH0sIHsnZHVyYXRpb24nOiAxNS41MTQxOTUwMTEzMzc4NjgsICdzdGFydCc6IDg4My42NzA1ODk1NjkxNjF9XSwgJzYzJzogW3snZHVyYXRpb24nOiAxMy4zNTA3MDI5NDc4NDU4MDUsICdzdGFydCc6IDEzNzEuMjY0NzYxOTA0NzYxOH0sIHsnZHVyYXRpb24nOiAxNS4xNDExNzkxMzgzMjE5OTUsICdzdGFydCc6IDE0MTQuOTk5MDcwMjk0Nzg0Nn0sIHsnZHVyYXRpb24nOiAxNS44MTc5MzY1MDc5MzY1MDgsICdzdGFydCc6IDE0MzAuMTQwMjQ5NDMzMTA2Nn0sIHsnZHVyYXRpb24nOiAxNS41NTY4MjUzOTY4MjUzOTcsICdzdGFydCc6IDEzODQuNjE1NDY0ODUyNjA3Nn0sIHsnZHVyYXRpb24nOiAxNC44MjY3ODAwNDUzNTE0NzMsICdzdGFydCc6IDE0MDAuMTcyMjkwMjQ5NDMzMn1dLCAnNjYnOiBbeydkdXJhdGlvbic6IDEyLjM5Njg0ODA3MjU2MjM1OCwgJ3N0YXJ0JzogMTg1Ni42ODAzNDAxMzYwNTQ0fSwgeydkdXJhdGlvbic6IDEzLjEzNzU1MTAyMDQwODE2MiwgJ3N0YXJ0JzogMTg5OC41NDQyNDAzNjI4MTE3fSwgeydkdXJhdGlvbic6IDE0LjY4ODIzMTI5MjUxNzAwNiwgJ3N0YXJ0JzogMTkxMS42ODE3OTEzODMyMn0sIHsnZHVyYXRpb24nOiAxNC45NzA2NTc1OTYzNzE4ODMsICdzdGFydCc6IDE4NjkuMDc3MTg4MjA4NjE2N30sIHsnZHVyYXRpb24nOiAxNC40OTYzOTQ1NTc4MjMxMjksICdzdGFydCc6IDE4ODQuMDQ3ODQ1ODA0OTg4Nn1dLCAnNjknOiBbeydkdXJhdGlvbic6IDEzLjIwMTQ5NjU5ODYzOTQ1NSwgJ3N0YXJ0JzogMzg4LjU3ODQ4MDcyNTYyMzZ9LCB7J2R1cmF0aW9uJzogMTMuNjI3ODAwNDUzNTE0NzQsICdzdGFydCc6IDQzMC40NDc3MDk3NTA1NjY5fSwgeydkdXJhdGlvbic6IDEzLjMyMjk3MDUyMTU0MTk1LCAnc3RhcnQnOiA0NDQuMDc1NTEwMjA0MDgxNjR9LCB7J2R1cmF0aW9uJzogMTMuNzM5NzA1MjE1NDE5NTAyLCAnc3RhcnQnOiA0MDEuNzc5OTc3MzI0MjYzMDN9LCB7J2R1cmF0aW9uJzogMTQuOTI4MDI3MjEwODg0MzU0LCAnc3RhcnQnOiA0MTUuNTE5NjgyNTM5NjgyNTV9XSwgJzgxJzogW3snZHVyYXRpb24nOiA2Ljk2MTQ3MzkyMjkwMjQ5NSwgJ3N0YXJ0JzogNDU3LjM5ODQ4MDcyNTYyMzZ9LCB7J2R1cmF0aW9uJzogNi44NjU1NTU1NTU1NTU1NTYsICdzdGFydCc6IDQ4NS4zMDYyODExNzkxMzgzfSwgeydkdXJhdGlvbic6IDEwLjUzNzEyMDE4MTQwNTg5NiwgJ3N0YXJ0JzogNDkyLjE3MTgzNjczNDY5Mzl9LCB7J2R1cmF0aW9uJzogMTAuMzc3MjU2MjM1ODI3NjY0LCAnc3RhcnQnOiA0NjQuMzU5OTU0NjQ4NTI2MDd9LCB7J2R1cmF0aW9uJzogMTAuNTY5MDcwMjk0Nzg0NTgsICdzdGFydCc6IDQ3NC43MzcyMTA4ODQzNTM3fV0sICc4Nyc6IFt7J2R1cmF0aW9uJzogNi45MDgxODU5NDEwNDMwODQsICdzdGFydCc6IDE1MTEuMDA2NDg1MjYwNzcxfSwgeydkdXJhdGlvbic6IDYuNTcwOTA3MDI5NDc4NDU4LCAnc3RhcnQnOiAxNTMxLjE5MTcwMDY4MDI3Mn0sIHsnZHVyYXRpb24nOiA2LjY5OTQ3ODQ1ODA0OTg4NywgJ3N0YXJ0JzogMTUzNy43NjI2MDc3MDk3NTA1fSwgeydkdXJhdGlvbic6IDYuODIxNzkxMzgzMjE5OTU1LCAnc3RhcnQnOiAxNTE3LjkxNDY3MTIwMTgxNDF9LCB7J2R1cmF0aW9uJzogNi40NTUyMzgwOTUyMzgwOTUsICdzdGFydCc6IDE1MjQuNzM2NDYyNTg1MDM0fV0sICc4NCc6IFt7J2R1cmF0aW9uJzogNS4yMTM2MjgxMTc5MTM4MzIsICdzdGFydCc6IDEwMDUuNjQxOTcyNzg5MTE1N30sIHsnZHVyYXRpb24nOiA1LjQ0Mjc2NjQzOTkwOTI5NywgJ3N0YXJ0JzogMTAyMy4yOTcxNDI4NTcxNDI4fSwgeydkdXJhdGlvbic6IDYuMjI2MDk5NzczMjQyNjMsICdzdGFydCc6IDEwMjguNzM5OTA5Mjk3MDUyMn0sIHsnZHVyYXRpb24nOiA2LjI1Mjc0Mzc2NDE3MjMzNiwgJ3N0YXJ0JzogMTAxMC44NTU2MDA5MDcwMjk1fSwgeydkdXJhdGlvbic6IDYuMTg4Nzk4MTg1OTQxMDQzLCAnc3RhcnQnOiAxMDE3LjEwODM0NDY3MTIwMTh9XSwgJzI0JzogW3snZHVyYXRpb24nOiAyMy44NjQ0MjE3Njg3MDc0ODQsICdzdGFydCc6IDU1Mi43MDY5ODQxMjY5ODQxfSwgeydkdXJhdGlvbic6IDIzLjYwMzMxMDY1NzU5NjM3LCAnc3RhcnQnOiA2MjMuNTY0ODc1MjgzNDQ2N30sIHsnZHVyYXRpb24nOiAyMy42MTkyOTcwNTIxNTQxOTUsICdzdGFydCc6IDY0Ny4xNjgxODU5NDEwNDMxfSwgeydkdXJhdGlvbic6IDIzLjUyMzM3ODY4NDgwNzI1NSwgJ3N0YXJ0JzogNTc2LjU3MTQwNTg5NTY5MTZ9LCB7J2R1cmF0aW9uJzogMjMuNDcwMDkwNzAyOTQ3ODQ2LCAnc3RhcnQnOiA2MDAuMDk0Nzg0NTgwNDk4OX1dLCAnMjcnOiBbeydkdXJhdGlvbic6IDE5LjA0NzE4ODIwODYxNjc4LCAnc3RhcnQnOiAxMDczLjEwMzUzNzQxNDk2Nn0sIHsnZHVyYXRpb24nOiAyMi4wNjMyODc5ODE4NTk0MSwgJ3N0YXJ0JzogMTE0MC40NDQ0MjE3Njg3MDc2fSwgeydkdXJhdGlvbic6IDI0LjI3NDczOTIyOTAyNDk0NSwgJ3N0YXJ0JzogMTE2Mi41MDc3MDk3NTA1NjY4fSwgeydkdXJhdGlvbic6IDI0LjAxODk1NjkxNjA5OTc3NSwgJ3N0YXJ0JzogMTA5Mi4xNTA3MjU2MjM1ODI3fSwgeydkdXJhdGlvbic6IDI0LjI3NDczOTIyOTAyNDk0NSwgJ3N0YXJ0JzogMTExNi4xNjk2ODI1Mzk2ODI1fV0sICcyMSc6IFt7J2R1cmF0aW9uJzogMjEuMTE0NzYxOTA0NzYxOTA2LCAnc3RhcnQnOiAwLjB9LCB7J2R1cmF0aW9uJzogMjQuNzcwMzE3NDYwMzE3NDYsICdzdGFydCc6IDcyLjY2OTA0NzYxOTA0NzYyfSwgeydkdXJhdGlvbic6IDI0Ljk5OTQ1NTc4MjMxMjkyNSwgJ3N0YXJ0JzogOTcuNDM5MzY1MDc5MzY1MDd9LCB7J2R1cmF0aW9uJzogMjUuNjkxNjU1MzI4Nzk4MTg4LCAnc3RhcnQnOiAyMS4xMTQ3NjE5MDQ3NjE5MDZ9LCB7J2R1cmF0aW9uJzogMjUuODYyNjMwMzg1NDg3NTI3LCAnc3RhcnQnOiA0Ni44MDY0MTcyMzM1NjAwOX1dLCAnNDgnOiBbeydkdXJhdGlvbic6IDE1Ljg3MTIyNDQ4OTc5NTkyLCAnc3RhcnQnOiA3NzYuMDk0MzUzNzQxNDk2NX0sIHsnZHVyYXRpb24nOiAxNS44NjA1NjY4OTM0MjQwMzYsICdzdGFydCc6IDgyNC4wNDkwNzAyOTQ3ODQ1fSwgeydkdXJhdGlvbic6IDE1Ljk5OTExNTY0NjI1ODUwNCwgJ3N0YXJ0JzogODM5LjkwOTYzNzE4ODIwODZ9LCB7J2R1cmF0aW9uJzogMTUuODA3Mjc4OTExNTY0NjI3LCAnc3RhcnQnOiA3OTEuOTY1NTc4MjMxMjkyNX0sIHsnZHVyYXRpb24nOiAxNi4yNzYyMTMxNTE5Mjc0MzYsICdzdGFydCc6IDgwNy43NzI4NTcxNDI4NTcxfV0sICc0NSc6IFt7J2R1cmF0aW9uJzogMTYuMDg5NzA1MjE1NDE5NSwgJ3N0YXJ0JzogMjMyLjQ5ODY2MjEzMTUxOTI3fSwgeydkdXJhdGlvbic6IDE2LjE5NjI4MTE3OTEzODMyLCAnc3RhcnQnOiAyODEuMDM5NTQ2NDg1MjYwNzZ9LCB7J2R1cmF0aW9uJzogMTUuOTM1MTcwMDY4MDI3MjEyLCAnc3RhcnQnOiAyOTcuMjM1ODI3NjY0Mzk5MX0sIHsnZHVyYXRpb24nOiAxNi4xNjk2MzcxODgyMDg2MiwgJ3N0YXJ0JzogMjQ4LjU4ODM2NzM0NjkzODc4fSwgeydkdXJhdGlvbic6IDE2LjI4MTU0MTk1MDExMzM4LCAnc3RhcnQnOiAyNjQuNzU4MDA0NTM1MTQ3NH1dLCAnNDInOiBbeydkdXJhdGlvbic6IDE3LjM0NzMwMTU4NzMwMTU4NywgJ3N0YXJ0JzogMTY3OS4zMDEzMTUxOTI3NDM3fSwgeydkdXJhdGlvbic6IDE5LjUxMDc5MzY1MDc5MzY1LCAnc3RhcnQnOiAxNzM3LjY2ODUwMzQwMTM2MDZ9LCB7J2R1cmF0aW9uJzogMjAuNDQ4NjYyMTMxNTE5Mjc0LCAnc3RhcnQnOiAxNzU3LjE3OTI5NzA1MjE1NDJ9LCB7J2R1cmF0aW9uJzogMjAuMzc0MDU4OTU2OTE2MDk4LCAnc3RhcnQnOiAxNjk2LjY0ODYxNjc4MDA0NTR9LCB7J2R1cmF0aW9uJzogMjAuNjQ1ODI3NjY0Mzk5MDkzLCAnc3RhcnQnOiAxNzE3LjAyMjY3NTczNjk2MTR9XSwgJzEwNSc6IFt7J2R1cmF0aW9uJzogMi42MjM4MzIxOTk1NDY0ODUzLCAnc3RhcnQnOiA1MzQuODc3MTY1NTMyODc5OX0sIHsnZHVyYXRpb24nOiAzLjg1NDc4NDU4MDQ5ODg2NjMsICdzdGFydCc6IDU0NC44MjY4OTM0MjQwMzYzfSwgeydkdXJhdGlvbic6IDQuMDI1MzA2MTIyNDQ4OTc5NSwgJ3N0YXJ0JzogNTQ4LjY4MTY3ODAwNDUzNTF9LCB7J2R1cmF0aW9uJzogMy43Njk1MjM4MDk1MjM4MDk3LCAnc3RhcnQnOiA1MzcuNTAwOTk3NzMyNDI2M30sIHsnZHVyYXRpb24nOiAzLjU1NjM3MTg4MjA4NjE2NzYsICdzdGFydCc6IDU0MS4yNzA1MjE1NDE5NTAxfV0sICc3NSc6IFt7J2R1cmF0aW9uJzogMTIuNDcxNDUxMjQ3MTY1NTMzLCAnc3RhcnQnOiAxNDQ1Ljk1ODE4NTk0MTA0M30sIHsnZHVyYXRpb24nOiAxMi45NzIzNTgyNzY2NDM5OTEsICdzdGFydCc6IDE0ODUuMDg4NDEyNjk4NDEyNn0sIHsnZHVyYXRpb24nOiAxMi45NDU3MTQyODU3MTQyODUsICdzdGFydCc6IDE0OTguMDYwNzcwOTc1MDU2Nn0sIHsnZHVyYXRpb24nOiAxMy4zNzczNDY5Mzg3NzU1MSwgJ3N0YXJ0JzogMTQ1OC40Mjk2MzcxODgyMDg1fSwgeydkdXJhdGlvbic6IDEzLjI4MTQyODU3MTQyODU3MiwgJ3N0YXJ0JzogMTQ3MS44MDY5ODQxMjY5ODQyfV0sICc3OCc6IFt7J2R1cmF0aW9uJzogMTEuMTcxMjI0NDg5Nzk1OTE4LCAnc3RhcnQnOiAxOTI2LjM3MDAyMjY3NTczN30sIHsnZHVyYXRpb24nOiAxMS42MzQ4Mjk5MzE5NzI3ODksICdzdGFydCc6IDE5NjEuMjkwNDk4ODY2MjEzfSwgeydkdXJhdGlvbic6IDExLjkxMTkyNzQzNzY0MTcyNCwgJ3N0YXJ0JzogMTk3Mi45MjUzMjg3OTgxODZ9LCB7J2R1cmF0aW9uJzogMTEuNzUyMDYzNDkyMDYzNDkyLCAnc3RhcnQnOiAxOTM3LjU0MTI0NzE2NTUzM30sIHsnZHVyYXRpb24nOiAxMS45OTcxODgyMDg2MTY3OCwgJ3N0YXJ0JzogMTk0OS4yOTMzMTA2NTc1OTYzfV0sICc5OSc6IFt7J2R1cmF0aW9uJzogNS4wNTM3NjQxNzIzMzU2MDEsICdzdGFydCc6IDE1NDQuNDYyMDg2MTY3ODAwNH0sIHsnZHVyYXRpb24nOiA0LjgyOTk1NDY0ODUyNjA3NywgJ3N0YXJ0JzogMTU1OS42NjYwMDkwNzAyOTQ5fSwgeydkdXJhdGlvbic6IDQuODcyNTg1MDM0MDEzNjA1LCAnc3RhcnQnOiAxNTY0LjQ5NTk2MzcxODgyMDh9LCB7J2R1cmF0aW9uJzogNS4wMjcxMjAxODE0MDU4OTYsICdzdGFydCc6IDE1NDkuNTE1ODUwMzQwMTM2fSwgeydkdXJhdGlvbic6IDUuMTIzMDM4NTQ4NzUyODM0NSwgJ3N0YXJ0JzogMTU1NC41NDI5NzA1MjE1NDJ9XSwgJzEwOCc6IFt7J2R1cmF0aW9uJzogMy4wOTgwOTUyMzgwOTUyMzgsICdzdGFydCc6IDEwNTYuMDc4MzY3MzQ2OTM4OX0sIHsnZHVyYXRpb24nOiAyLjgxMDM0MDEzNjA1NDQyMTYsICdzdGFydCc6IDEwNjYuNDExNzY4NzA3NDgzfSwgeydkdXJhdGlvbic6IDMuODgxNDI4NTcxNDI4NTcxMiwgJ3N0YXJ0JzogMTA2OS4yMjIxMDg4NDM1Mzc0fSwgeydkdXJhdGlvbic6IDMuNTkzNjczNDY5Mzg3NzU1MiwgJ3N0YXJ0JzogMTA1OS4xNzY0NjI1ODUwMzR9LCB7J2R1cmF0aW9uJzogMy42NDE2MzI2NTMwNjEyMjQ2LCAnc3RhcnQnOiAxMDYyLjc3MDEzNjA1NDQyMTh9XSwgJzcyJzogW3snZHVyYXRpb24nOiAxMy40MDM5OTA5Mjk3MDUyMTYsICdzdGFydCc6IDkzMS4wOTc3NTUxMDIwNDA4fSwgeydkdXJhdGlvbic6IDE1LjMzMzAxNTg3MzAxNTg3MywgJ3N0YXJ0JzogOTc0Ljc0MTQ3MzkyMjkwMjV9LCB7J2R1cmF0aW9uJzogMTUuNTY3NDgyOTkzMTk3MjgsICdzdGFydCc6IDk5MC4wNzQ0ODk3OTU5MTgzfSwgeydkdXJhdGlvbic6IDE1LjUxNDE5NTAxMTMzNzg2OCwgJ3N0YXJ0JzogOTQ0LjUwMTc0NjAzMTc0Nn0sIHsnZHVyYXRpb24nOiAxNC43MjU1MzI4Nzk4MTg1OTQsICdzdGFydCc6IDk2MC4wMTU5NDEwNDMwODM5fV0sICcxMDInOiBbeydkdXJhdGlvbic6IDQuODM1MjgzNDQ2NzEyMDE4LCAnc3RhcnQnOiAyMDEyLjYyMTI2OTg0MTI2OTl9LCB7J2R1cmF0aW9uJzogNC43NTUzNTE0NzM5MjI5MDMsICdzdGFydCc6IDIwMjYuNzU0MTA0MzA4Mzl9LCB7J2R1cmF0aW9uJzogNC44Mjk5NTQ2NDg1MjYwNzcsICdzdGFydCc6IDIwMzEuNTA5NDU1NzgyMzEzfSwgeydkdXJhdGlvbic6IDQuNzkyNjUzMDYxMjI0NDksICdzdGFydCc6IDIwMTcuNDU2NTUzMjg3OTgyfSwgeydkdXJhdGlvbic6IDQuNTA0ODk3OTU5MTgzNjczNSwgJ3N0YXJ0JzogMjAyMi4yNDkyMDYzNDkyMDY0fV0sICc5MCc6IFt7J2R1cmF0aW9uJzogNC4yOTcwNzQ4Mjk5MzE5NzMsICdzdGFydCc6IDE5ODQuODM3MjU2MjM1ODI3N30sIHsnZHVyYXRpb24nOiA1LjUzMzM1NjAwOTA3MDI5NSwgJ3N0YXJ0JzogMjAwMS4yNDAxNTg3MzAxNTg4fSwgeydkdXJhdGlvbic6IDUuODQ3NzU1MTAyMDQwODE2LCAnc3RhcnQnOiAyMDA2Ljc3MzUxNDczOTIyOX0sIHsnZHVyYXRpb24nOiA2LjEyNDg1MjYwNzcwOTc1MSwgJ3N0YXJ0JzogMTk4OS4xMzQzMzEwNjU3NTk2fSwgeydkdXJhdGlvbic6IDUuOTgwOTc1MDU2Njg5MzQyLCAnc3RhcnQnOiAxOTk1LjI1OTE4MzY3MzQ2OTR9XSwgJzkzJzogW3snZHVyYXRpb24nOiA1LjQ1MzQyNDAzNjI4MTE3OSwgJ3N0YXJ0JzogNTAyLjcwODk1NjkxNjA5OTh9LCB7J2R1cmF0aW9uJzogNi4zNDMyMTk5NTQ2NDg1MjYsICdzdGFydCc6IDUyMS43MjcwMDY4MDI3MjExfSwgeydkdXJhdGlvbic6IDYuODA2OTM4Nzc1NTEwMjA0LCAnc3RhcnQnOiA1MjguMDcwMjI2NzU3MzY5Nn0sIHsnZHVyYXRpb24nOiA2LjczMTA0MzA4MzkwMDIyNywgJ3N0YXJ0JzogNTA4LjE2MjM4MDk1MjM4MDk0fSwgeydkdXJhdGlvbic6IDYuODMzNTgyNzY2NDM5OTEsICdzdGFydCc6IDUxNC44OTM0MjQwMzYyODEyfV0sICc5Nic6IFt7J2R1cmF0aW9uJzogNC4xMzcyMTA4ODQzNTM3NDIsICdzdGFydCc6IDEwMzQuOTY2MDA5MDcwMjk0OH0sIHsnZHVyYXRpb24nOiA0LjA1MTk1MDExMzM3ODY4NSwgJ3N0YXJ0JzogMTA0Ny45NDc4MjMxMjkyNTE3fSwgeydkdXJhdGlvbic6IDQuMDc4NTk0MTA0MzA4MzksICdzdGFydCc6IDEwNTEuOTk5NzczMjQyNjMwNX0sIHsnZHVyYXRpb24nOiA0LjQ4MzU4Mjc2NjQzOTkwOSwgJ3N0YXJ0JzogMTAzOS4xMDMyMTk5NTQ2NDg1fSwgeydkdXJhdGlvbic6IDQuMzYxMDIwNDA4MTYzMjY2LCAnc3RhcnQnOiAxMDQzLjU4NjgwMjcyMTA4ODR9XSwgJzM5JzogW3snZHVyYXRpb24nOiAxOC45MTM5NjgyNTM5NjgyNTMsICdzdGFydCc6IDExODYuNzgyNDQ4OTc5NTkyfSwgeydkdXJhdGlvbic6IDIyLjIzMzgwOTUyMzgwOTUyMywgJ3N0YXJ0JzogMTI0OS44NTQ5NjU5ODYzOTQ1fSwgeydkdXJhdGlvbic6IDIyLjEwNTkxODM2NzM0NjkzOCwgJ3N0YXJ0JzogMTI3Mi4wODg3NzU1MTAyMDQyfSwgeydkdXJhdGlvbic6IDIxLjk0MDcyNTYyMzU4Mjc2OCwgJ3N0YXJ0JzogMTIwNS42OTY0MTcyMzM1NjAyfSwgeydkdXJhdGlvbic6IDIyLjIxNzgyMzEyOTI1MTcwMiwgJ3N0YXJ0JzogMTIyNy42MzcxNDI4NTcxNDI5fV0sICczMyc6IFt7J2R1cmF0aW9uJzogMjAuMTkyODc5ODE4NTk0MTA0LCAnc3RhcnQnOiAxMjIuNDM4ODIwODYxNjc4MDF9LCB7J2R1cmF0aW9uJzogMTkuNzY1NzU5NjM3MTg4MjA3LCAnc3RhcnQnOiAxODkuNDI4MDA0NTM1MTQ3Mzh9LCB7J2R1cmF0aW9uJzogMjMuMzA0ODk3OTU5MTgzNjczLCAnc3RhcnQnOiAyMDkuMTkzNzY0MTcyMzM1Nn0sIHsnZHVyYXRpb24nOiAyMy4zOTAxNTg3MzAxNTg3MywgJ3N0YXJ0JzogMTQyLjYzMTcwMDY4MDI3MjF9LCB7J2R1cmF0aW9uJzogMjMuNDA2MTQ1MTI0NzE2NTUyLCAnc3RhcnQnOiAxNjYuMDIxODU5NDEwNDMwODR9XSwgJzU0JzogW3snZHVyYXRpb24nOiAxNS40OTgyMDg2MTY3ODAwNDYsICdzdGFydCc6IDE3NzcuNjI3OTU5MTgzNjczNX0sIHsnZHVyYXRpb24nOiAxNi4wNzM3MTg4MjA4NjE2OCwgJ3N0YXJ0JzogMTgyNC40Nzk2MTQ1MTI0NzE3fSwgeydkdXJhdGlvbic6IDE2LjEyNzAwNjgwMjcyMTA4OCwgJ3N0YXJ0JzogMTg0MC41NTMzMzMzMzMzMzMzfSwgeydkdXJhdGlvbic6IDE1Ljk0MDQ5ODg2NjIxMzE1MywgJ3N0YXJ0JzogMTc5My4xMjYxNjc4MDA0NTM1fSwgeydkdXJhdGlvbic6IDE1LjQxMjk0Nzg0NTgwNDk4OCwgJ3N0YXJ0JzogMTgwOS4wNjY2NjY2NjY2NjY2fV0sICc1Nyc6IFt7J2R1cmF0aW9uJzogMTMuMDE0OTg4NjYyMTMxNTIsICdzdGFydCc6IDMxMy4xNzA5OTc3MzI0MjYzfSwgeydkdXJhdGlvbic6IDE1LjU3ODE0MDU4OTU2OTE2MSwgJ3N0YXJ0JzogMzU3LjM4NDg5Nzk1OTE4MzY2fSwgeydkdXJhdGlvbic6IDE1LjYxNTQ0MjE3Njg3MDc0OSwgJ3N0YXJ0JzogMzcyLjk2MzAzODU0ODc1Mjh9LCB7J2R1cmF0aW9uJzogMTUuMzExNzAwNjgwMjcyMTA5LCAnc3RhcnQnOiAzMjYuMTg1OTg2Mzk0NTU3OH0sIHsnZHVyYXRpb24nOiAxNS44ODcyMTA4ODQzNTM3NDIsICdzdGFydCc6IDM0MS40OTc2ODcwNzQ4Mjk5fV0sICczMCc6IFt7J2R1cmF0aW9uJzogMTYuNzEzMTc0NjAzMTc0NjA0LCAnc3RhcnQnOiAxNTY5LjM2ODU0ODc1MjgzNDR9LCB7J2R1cmF0aW9uJzogMjMuMjUxNjA5OTc3MzI0MjY0LCAnc3RhcnQnOiAxNjMyLjcwMjE3Njg3MDc0ODJ9LCB7J2R1cmF0aW9uJzogMjMuMzQ3NTI4MzQ0NjcxMiwgJ3N0YXJ0JzogMTY1NS45NTM3ODY4NDgwNzI1fSwgeydkdXJhdGlvbic6IDIzLjM0NzUyODM0NDY3MTIsICdzdGFydCc6IDE1ODYuMDgxNzIzMzU2MDA5fSwgeydkdXJhdGlvbic6IDIzLjI3MjkyNTE3MDA2ODAyOCwgJ3N0YXJ0JzogMTYwOS40MjkyNTE3MDA2ODAyfV0sICc1MSc6IFt7J2R1cmF0aW9uJzogMTMuMTE2MjM1ODI3NjY0Mzk5LCAnc3RhcnQnOiAxMjk0LjE5NDY5Mzg3NzU1MTF9LCB7J2R1cmF0aW9uJzogMTUuOTI0NTEyNDcxNjU1MzI4LCAnc3RhcnQnOiAxMzM5LjI2MTIwMTgxNDA1OX0sIHsnZHVyYXRpb24nOiAxNi4wNzkwNDc2MTkwNDc2MTgsICdzdGFydCc6IDEzNTUuMTg1NzE0Mjg1NzE0M30sIHsnZHVyYXRpb24nOiAxNS44NDQ1ODA0OTg4NjYyMTMsICdzdGFydCc6IDEzMDcuMzEwOTI5NzA1MjE1NH0sIHsnZHVyYXRpb24nOiAxNi4xMDU2OTE2MDk5NzczMjQsICdzdGFydCc6IDEzMjMuMTU1NTEwMjA0MDgxNn1dLCAnMzYnOiBbeydkdXJhdGlvbic6IDE4LjY2ODg0MzUzNzQxNDk2NSwgJ3N0YXJ0JzogNjcwLjc4NzQ4Mjk5MzE5NzN9LCB7J2R1cmF0aW9uJzogMTkuNzE4MTE3OTEzODMyMiwgJ3N0YXJ0JzogNzM0LjA1NzE2NTUzMjg3OTh9LCB7J2R1cmF0aW9uJzogMjIuMzE5MDcwMjk0Nzg0NTgsICdzdGFydCc6IDc1My43NzUyODM0NDY3MTJ9LCB7J2R1cmF0aW9uJzogMjIuMjgxNzY4NzA3NDgyOTkzLCAnc3RhcnQnOiA2ODkuNDU2MzI2NTMwNjEyM30sIHsnZHVyYXRpb24nOiAyMi4zMTkwNzAyOTQ3ODQ1OCwgJ3N0YXJ0JzogNzExLjczODA5NTIzODA5NTJ9XX0sICdoYW1tZXJzJzogeyc2MCc6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTA3LjExNjE5MDQ3NjE5MDd9LCAnNjMnOiB7J2R1cmF0aW9uJzogMC40NTUwMTEzMzc4Njg0ODA3NSwgJ3N0YXJ0JzogMjEwNy41NzEyMDE4MTQwNTl9LCAnNjYnOiB7J2R1cmF0aW9uJzogMC40NTUwMTEzMzc4Njg0ODA3NSwgJ3N0YXJ0JzogMjEwOC4wMjYyMTMxNTE5Mjc1fSwgJzY5JzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMDguNDgxMjI0NDg5Nzk1N30sICc4MSc6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTEwLjMwMTI2OTg0MTI3fSwgJzg3JzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMTEuMjExMjkyNTE3MDA2OH0sICc4NCc6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTEwLjc1NjI4MTE3OTEzOH0sICcyNCc6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTAxLjY1NjA1NDQyMTc2ODd9LCAnMjcnOiB7J2R1cmF0aW9uJzogMC40NTUwMTEzMzc4Njg0ODA3NSwgJ3N0YXJ0JzogMjEwMi4xMTEwNjU3NTk2MzczfSwgJzIxJzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMDEuMjAxMDQzMDgzOX0sICc0OCc6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTA1LjI5NjE0NTEyNDcxNjV9LCAnMTA4JzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMTQuMzQxOTUwMTEzMzc4NX0sICc0NSc6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTA0Ljg0MTEzMzc4Njg0OH0sICc0Mic6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTA0LjM4NjEyMjQ0ODk3OTd9LCAnMTA1JzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMTMuODg2OTM4Nzc1NTEwM30sICc5Nic6IHsnZHVyYXRpb24nOiAwLjQwMDU4OTU2OTE2MDk5Nzc1LCAnc3RhcnQnOiAyMTEyLjU3NjMyNjUzMDYxMjN9LCAnOTknOiB7J2R1cmF0aW9uJzogMC40NTUwMTEzMzc4Njg0ODA3NSwgJ3N0YXJ0JzogMjExMi45NzY5MTYwOTk3NzM1fSwgJzc1JzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMDkuMzkxMjQ3MTY1NTMzfSwgJzcyJzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMDguOTM2MjM1ODI3NjY0NH0sICcxMDInOiB7J2R1cmF0aW9uJzogMC40NTUwMTEzMzc4Njg0ODA3NSwgJ3N0YXJ0JzogMjExMy40MzE5Mjc0Mzc2NDE3fSwgJzkwJzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMTEuNjY2MzAzODU0ODc1NH0sICc5Myc6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTEyLjEyMTMxNTE5Mjc0MzZ9LCAnNzgnOiB7J2R1cmF0aW9uJzogMC40NTUwMTEzMzc4Njg0ODA3NSwgJ3N0YXJ0JzogMjEwOS44NDYyNTg1MDM0MDEzfSwgJzM5JzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMDMuOTMxMTExMTExMTExfSwgJzMzJzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMDMuMDIxMDg4NDM1Mzc0fSwgJzU0JzogeydkdXJhdGlvbic6IDAuNDU1MDExMzM3ODY4NDgwNzUsICdzdGFydCc6IDIxMDYuMjA2MTY3ODAwNDUzNH0sICc1Nyc6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTA2LjY2MTE3OTEzODMyMn0sICczMCc6IHsnZHVyYXRpb24nOiAwLjQ1NTAxMTMzNzg2ODQ4MDc1LCAnc3RhcnQnOiAyMTAyLjU2NjA3NzA5NzUwNTV9LCAnNTEnOiB7J2R1cmF0aW9uJzogMC40NTUwMTEzMzc4Njg0ODA3NSwgJ3N0YXJ0JzogMjEwNS43NTExNTY0NjI1ODV9LCAnMzYnOiB7J2R1cmF0aW9uJzogMC40NTUwMTEzMzc4Njg0ODA3NSwgJ3N0YXJ0JzogMjEwMy40NzYwOTk3NzMyNDN9fSwgJ2hhcm1vbmljcyc6IHsnNjAnOiB7J2R1cmF0aW9uJzogMi44MzY5ODQxMjY5ODQxMjcsICdzdGFydCc6IDIwNjEuNzMzNzE4ODIwODYxN30sICc2Myc6IHsnZHVyYXRpb24nOiAyLjgzMTY1NTMyODc5ODE4NiwgJ3N0YXJ0JzogMjA3OC42MjI0MDM2MjgxMTh9LCAnNjYnOiB7J2R1cmF0aW9uJzogMi43NzMwMzg1NDg3NTI4MzQ0LCAnc3RhcnQnOiAyMDk1LjU2OTcwNTIxNTQxOTZ9LCAnNjknOiB7J2R1cmF0aW9uJzogMi44NDIzMTI5MjUxNzAwNjgsICdzdGFydCc6IDIwNDcuNTk2NzU3MzY5NjE0Nn0sICc4MSc6IHsnZHVyYXRpb24nOiAyLjg3NDI4NTcxNDI4NTcxNCwgJ3N0YXJ0JzogMjA1MC40MzkwNzAyOTQ3ODQ0fSwgJzg3JzogeydkdXJhdGlvbic6IDIuNzc4MzY3MzQ2OTM4Nzc1MywgJ3N0YXJ0JzogMjA4NC4zMDE3MDA2ODAyNzJ9LCAnODQnOiB7J2R1cmF0aW9uJzogMi43NzMwMzg1NDg3NTI4MzQ0LCAnc3RhcnQnOiAyMDY3LjM0OTA3MDI5NDc4NDd9LCAnMjQnOiB7J2R1cmF0aW9uJzogMi44MTU2Njg5MzQyNDAzNjMsICdzdGFydCc6IDIwNTMuMzEzMzU2MDA5MDcwNX0sICcyNyc6IHsnZHVyYXRpb24nOiAyLjgxNTY2ODkzNDI0MDM2MywgJ3N0YXJ0JzogMjA3MC4xMjIxMDg4NDM1MzczfSwgJzIxJzogeydkdXJhdGlvbic6IDIuNzc4MzY3MzQ2OTM4Nzc1MywgJ3N0YXJ0JzogMjAzNi4zMzk0MTA0MzA4Mzl9LCAnNDgnOiB7J2R1cmF0aW9uJzogMi43ODkwMjQ5NDMzMTA2NTc1LCAnc3RhcnQnOiAyMDU4Ljk0NDY5Mzg3NzU1MX0sICc0NSc6IHsnZHVyYXRpb24nOiAyLjg1Mjk3MDUyMTU0MTk1LCAnc3RhcnQnOiAyMDQxLjk4MTQwNTg5NTY5MTV9LCAnNDInOiB7J2R1cmF0aW9uJzogMi44Njg5NTY5MTYwOTk3NzMsICdzdGFydCc6IDIwODkuOTExNzIzMzU2MDA5fSwgJzc1JzogeydkdXJhdGlvbic6IDIuODQ3NjQxNzIzMzU2MDA5LCAnc3RhcnQnOiAyMDgxLjQ1NDA1ODk1NjkxNn0sICc3Mic6IHsnZHVyYXRpb24nOiAyLjc3ODM2NzM0NjkzODc3NTMsICdzdGFydCc6IDIwNjQuNTcwNzAyOTQ3ODQ2fSwgJzc4JzogeydkdXJhdGlvbic6IDIuODU4Mjk5MzE5NzI3ODkxLCAnc3RhcnQnOiAyMDk4LjM0Mjc0Mzc2NDE3Mn0sICczOSc6IHsnZHVyYXRpb24nOiAyLjg2MzYyODExNzkxMzgzMjMsICdzdGFydCc6IDIwNzIuOTM3Nzc3Nzc3Nzc3N30sICczMyc6IHsnZHVyYXRpb24nOiAyLjg2MzYyODExNzkxMzgzMjMsICdzdGFydCc6IDIwMzkuMTE3Nzc3Nzc3Nzc3N30sICc1NCc6IHsnZHVyYXRpb24nOiAyLjc4OTAyNDk0MzMxMDY1NzUsICdzdGFydCc6IDIwOTIuNzgwNjgwMjcyMTA5fSwgJzU3JzogeydkdXJhdGlvbic6IDIuNzYyMzgwOTUyMzgwOTUyLCAnc3RhcnQnOiAyMDQ0LjgzNDM3NjQxNzIzMzd9LCAnMzAnOiB7J2R1cmF0aW9uJzogMi44MzE2NTUzMjg3OTgxODYsICdzdGFydCc6IDIwODcuMDgwMDY4MDI3MjExfSwgJzUxJzogeydkdXJhdGlvbic6IDIuODIwOTk3NzMyNDI2MzA0LCAnc3RhcnQnOiAyMDc1LjgwMTQwNTg5NTY5MTV9LCAnMzYnOiB7J2R1cmF0aW9uJzogMi44MTU2Njg5MzQyNDAzNjMsICdzdGFydCc6IDIwNTYuMTI5MDI0OTQzMzEwNX19fVxuXG5mdW5jdGlvbiBtaWRpVG9Ob3RlKG1pZGkpe1xuXHRsZXQgbW9kID0gbWlkaSAlIDNcblx0aWYgKG1vZCA9PT0gMSl7XG5cdFx0cmV0dXJuIFttaWRpIC0gMSwgVG9uZS5wcm90b3R5cGUuaW50ZXJ2YWxUb0ZyZXF1ZW5jeVJhdGlvKDEpXVxuXHR9IGVsc2UgaWYgKG1vZCA9PT0gMil7XG5cdFx0cmV0dXJuIFttaWRpICsgMSwgVG9uZS5wcm90b3R5cGUuaW50ZXJ2YWxUb0ZyZXF1ZW5jeVJhdGlvKC0xKV1cblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gW21pZGksIDFdXG5cdH1cbn1cblxuZnVuY3Rpb24gY2xvbmUob2JqKXtcblx0bGV0IHJldCA9IHt9XG5cdGZvciAobGV0IGF0dHIgaW4gb2JqKXtcblx0XHRyZXRbYXR0cl0gPSBvYmpbYXR0cl1cblx0fVxuXHRyZXR1cm4gcmV0XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuXHR2ZWxvY2l0eUNvdW50IDogdGltZU1hcHBpbmcubm90ZXNbJzIxJ10ubGVuZ3RoLFxuXG5cdGJ1ZmZlciA6IG51bGwsXG5cblx0bmV3U291cmNlKCl7XG5cdFx0cmV0dXJuIG5ldyBCdWZmZXJTb3VyY2UodGhpcy5idWZmZXIpXG5cdH0sXG5cblx0bG9hZCh1cmwpe1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgoc3VjY2VzcykgPT4ge1xuXHRcdFx0dGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyKHVybCwgc3VjY2Vzcylcblx0XHR9KVxuXHR9LFxuXG5cdGdldE5vdGUobWlkaSwgdmVsb2NpdHkpe1xuXHRcdGxldCBbbm90ZSwgcmF0ZV0gPSBtaWRpVG9Ob3RlKG1pZGkpXG5cdFx0bGV0IHRpbWluZyA9IGNsb25lKHRpbWVNYXBwaW5nLm5vdGVzW25vdGVdW3ZlbG9jaXR5XSlcblx0XHR0aW1pbmcuZHVyYXRpb24gLz0gcmF0ZVxuXHRcdHJldHVybiB7dGltaW5nLCByYXRlfVxuXHR9LFxuXG5cdGdldFBlZGFsKGRpcmVjdGlvbil7XG5cdFx0cmV0dXJuIGNsb25lKHRpbWVNYXBwaW5nLnBlZGFsc1tkaXJlY3Rpb25dKVxuXHR9LFxuXG5cdGhhc0hhcm1vbmljcyhtaWRpKXtcblx0XHRsZXQgW25vdGUsIHJhdGVdID0gbWlkaVRvTm90ZShtaWRpKVxuXHRcdHJldHVybiB0aW1lTWFwcGluZy5oYXJtb25pY3MuaGFzT3duUHJvcGVydHkobm90ZSlcblx0fSxcblxuXHRnZXRIYXJtb25pY3MobWlkaSl7XG5cdFx0bGV0IFtub3RlLCByYXRlXSA9IG1pZGlUb05vdGUobWlkaSlcblx0XHRsZXQgdGltaW5nID0gY2xvbmUodGltZU1hcHBpbmcuaGFybW9uaWNzW25vdGVdKVxuXHRcdHRpbWluZy5kdXJhdGlvbiAvPSByYXRlXG5cdFx0cmV0dXJuIHt0aW1pbmcsIHJhdGV9XG5cdH0sXG5cblx0Z2V0UmVsZWFzZShtaWRpKXtcblx0XHRsZXQgW25vdGUsIHJhdGVdID0gbWlkaVRvTm90ZShtaWRpKVxuXHRcdGxldCB0aW1pbmcgPSBjbG9uZSh0aW1lTWFwcGluZy5oYW1tZXJzW25vdGVdKVxuXHRcdHRpbWluZy5kdXJhdGlvbiAvPSByYXRlXG5cdFx0cmV0dXJuIHt0aW1pbmcsIHJhdGV9XG5cdH1cbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9TYWxhbWFuZGVyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Tone2 = __webpack_require__(3);\n\nvar _Tone3 = _interopRequireDefault(_Tone2);\n\nvar _Salamander = __webpack_require__(27);\n\nvar _Salamander2 = _interopRequireDefault(_Salamander);\n\nvar _PianoBase2 = __webpack_require__(26);\n\nvar _PianoBase3 = _interopRequireDefault(_PianoBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n *  Internal class\n */\nvar Note = function (_Tone) {\n\t_inherits(Note, _Tone);\n\n\tfunction Note(time, timing, rate, velocity, gain) {\n\t\t_classCallCheck(this, Note);\n\n\t\t//round the velocity\n\t\tvar _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Note).call(this, 0, 0));\n\n\t\t_this._velocity = velocity;\n\t\t_this._startTime = time;\n\t\t_this._timing = timing;\n\n\t\t_this.output = _Salamander2.default.newSource();\n\t\t_this.output.playbackRate.value = rate;\n\t\t_this.output.start(time, timing.start, timing.duration, gain, 0);\n\t\treturn _this;\n\t}\n\n\t_createClass(Note, [{\n\t\tkey: 'stop',\n\t\tvalue: function stop(time) {\n\t\t\tif (this.output.buffer) {\n\n\t\t\t\t// return the amplitude of the damper playback\n\t\t\t\tvar progress = (time - this._startTime) / this._timing.duration;\n\t\t\t\tprogress = (1 - progress) * this._velocity;\n\t\t\t\t// stop the buffer\n\t\t\t\tthis.output.stop(time, 0.2);\n\n\t\t\t\treturn Math.pow(progress, 0.5);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn Note;\n}(_Tone3.default);\n\n/**\n *  Manages all of the hammered string sounds\n */\n\n\nvar Strings = function (_PianoBase) {\n\t_inherits(Strings, _PianoBase);\n\n\tfunction Strings() {\n\t\t_classCallCheck(this, Strings);\n\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Strings).apply(this, arguments));\n\t}\n\n\t_createClass(Strings, [{\n\t\tkey: 'start',\n\t\tvalue: function start(note, velocity, time) {\n\n\t\t\tvar velPos = velocity * (_Salamander2.default.velocityCount - 1);\n\t\t\tvar roundedVel = Math.round(velPos);\n\t\t\tvar diff = roundedVel - velPos;\n\t\t\tvar gain = 1 - diff * 0.5;\n\n\t\t\tvar _Salamander$getNote = _Salamander2.default.getNote(note, roundedVel);\n\n\t\t\tvar timing = _Salamander$getNote.timing;\n\t\t\tvar rate = _Salamander$getNote.rate;\n\n\n\t\t\tvar retNote = new Note(time, timing, rate, velocity, gain).connect(this.output);\n\n\t\t\treturn retNote;\n\t\t}\n\t}]);\n\n\treturn Strings;\n}(_PianoBase3.default);\n\nexports.default = Strings;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvTm90ZS5qcz9iNDAwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7QUFFQTs7O0lBR00sSTs7O0FBQ0wsZUFBWSxJQUFaLEVBQWtCLE1BQWxCLEVBQTBCLElBQTFCLEVBQWdDLFFBQWhDLEVBQTBDLElBQTFDLEVBQStDO0FBQUE7O0FBRTlDO0FBRjhDLHNGQUN4QyxDQUR3QyxFQUNyQyxDQURxQzs7QUFHOUMsUUFBSyxTQUFMLEdBQWlCLFFBQWpCO0FBQ0EsUUFBSyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsUUFBSyxPQUFMLEdBQWUsTUFBZjs7QUFFQSxRQUFLLE1BQUwsR0FBYyxxQkFBVyxTQUFYLEVBQWQ7QUFDQSxRQUFLLE1BQUwsQ0FBWSxZQUFaLENBQXlCLEtBQXpCLEdBQWlDLElBQWpDO0FBQ0EsUUFBSyxNQUFMLENBQVksS0FBWixDQUFrQixJQUFsQixFQUF3QixPQUFPLEtBQS9CLEVBQXNDLE9BQU8sUUFBN0MsRUFBdUQsSUFBdkQsRUFBNkQsQ0FBN0Q7QUFUOEM7QUFVOUM7Ozs7dUJBRUksSSxFQUFLO0FBQ1QsT0FBSSxLQUFLLE1BQUwsQ0FBWSxNQUFoQixFQUF1Qjs7QUFFdEI7QUFDQSxRQUFJLFdBQVcsQ0FBQyxPQUFPLEtBQUssVUFBYixJQUEyQixLQUFLLE9BQUwsQ0FBYSxRQUF2RDtBQUNBLGVBQVcsQ0FBQyxJQUFJLFFBQUwsSUFBaUIsS0FBSyxTQUFqQztBQUNBO0FBQ0EsU0FBSyxNQUFMLENBQVksSUFBWixDQUFpQixJQUFqQixFQUF1QixHQUF2Qjs7QUFFQSxXQUFPLEtBQUssR0FBTCxDQUFTLFFBQVQsRUFBbUIsR0FBbkIsQ0FBUDtBQUNBLElBVEQsTUFTTztBQUNOLFdBQU8sQ0FBUDtBQUNBO0FBQ0Q7Ozs7OztBQUdGOzs7OztJQUdxQixPOzs7Ozs7Ozs7Ozt3QkFFZCxJLEVBQU0sUSxFQUFVLEksRUFBSzs7QUFFMUIsT0FBSSxTQUFTLFlBQVkscUJBQVcsYUFBWCxHQUEyQixDQUF2QyxDQUFiO0FBQ0EsT0FBSSxhQUFhLEtBQUssS0FBTCxDQUFXLE1BQVgsQ0FBakI7QUFDQSxPQUFJLE9BQU8sYUFBYSxNQUF4QjtBQUNBLE9BQUksT0FBTyxJQUFJLE9BQU8sR0FBdEI7O0FBTDBCLDZCQU9MLHFCQUFXLE9BQVgsQ0FBbUIsSUFBbkIsRUFBeUIsVUFBekIsQ0FQSzs7QUFBQSxPQU9yQixNQVBxQix1QkFPckIsTUFQcUI7QUFBQSxPQU9iLElBUGEsdUJBT2IsSUFQYTs7O0FBUzFCLE9BQUksVUFBVSxJQUFJLElBQUosQ0FBUyxJQUFULEVBQWUsTUFBZixFQUF1QixJQUF2QixFQUE2QixRQUE3QixFQUF1QyxJQUF2QyxFQUE2QyxPQUE3QyxDQUFxRCxLQUFLLE1BQTFELENBQWQ7O0FBRUEsVUFBTyxPQUFQO0FBQ0E7Ozs7OztrQkFkbUIsTyIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUb25lIGZyb20gJ1RvbmUvY29yZS9Ub25lJ1xuaW1wb3J0IFNhbGFtYW5kZXIgZnJvbSAnLi9TYWxhbWFuZGVyJ1xuaW1wb3J0IFBpYW5vQmFzZSBmcm9tICcuL1BpYW5vQmFzZSdcblxuLyoqXG4gKiAgSW50ZXJuYWwgY2xhc3NcbiAqL1xuY2xhc3MgTm90ZSBleHRlbmRzIFRvbmV7XG5cdGNvbnN0cnVjdG9yKHRpbWUsIHRpbWluZywgcmF0ZSwgdmVsb2NpdHksIGdhaW4pe1xuXHRcdHN1cGVyKDAsIDApXG5cdFx0Ly9yb3VuZCB0aGUgdmVsb2NpdHlcblx0XHR0aGlzLl92ZWxvY2l0eSA9IHZlbG9jaXR5XG5cdFx0dGhpcy5fc3RhcnRUaW1lID0gdGltZVxuXHRcdHRoaXMuX3RpbWluZyA9IHRpbWluZ1xuXG5cdFx0dGhpcy5vdXRwdXQgPSBTYWxhbWFuZGVyLm5ld1NvdXJjZSgpXG5cdFx0dGhpcy5vdXRwdXQucGxheWJhY2tSYXRlLnZhbHVlID0gcmF0ZVxuXHRcdHRoaXMub3V0cHV0LnN0YXJ0KHRpbWUsIHRpbWluZy5zdGFydCwgdGltaW5nLmR1cmF0aW9uLCBnYWluLCAwKVxuXHR9XG5cblx0c3RvcCh0aW1lKXtcblx0XHRpZiAodGhpcy5vdXRwdXQuYnVmZmVyKXtcblxuXHRcdFx0Ly8gcmV0dXJuIHRoZSBhbXBsaXR1ZGUgb2YgdGhlIGRhbXBlciBwbGF5YmFja1xuXHRcdFx0bGV0IHByb2dyZXNzID0gKHRpbWUgLSB0aGlzLl9zdGFydFRpbWUpIC8gdGhpcy5fdGltaW5nLmR1cmF0aW9uXG5cdFx0XHRwcm9ncmVzcyA9ICgxIC0gcHJvZ3Jlc3MpICogdGhpcy5fdmVsb2NpdHlcblx0XHRcdC8vIHN0b3AgdGhlIGJ1ZmZlclxuXHRcdFx0dGhpcy5vdXRwdXQuc3RvcCh0aW1lLCAwLjIpXG5cblx0XHRcdHJldHVybiBNYXRoLnBvdyhwcm9ncmVzcywgMC41KVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gMFxuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqICBNYW5hZ2VzIGFsbCBvZiB0aGUgaGFtbWVyZWQgc3RyaW5nIHNvdW5kc1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdHJpbmdzIGV4dGVuZHMgUGlhbm9CYXNlIHtcblxuXHRzdGFydChub3RlLCB2ZWxvY2l0eSwgdGltZSl7XG5cblx0XHRsZXQgdmVsUG9zID0gdmVsb2NpdHkgKiAoU2FsYW1hbmRlci52ZWxvY2l0eUNvdW50IC0gMSlcblx0XHRsZXQgcm91bmRlZFZlbCA9IE1hdGgucm91bmQodmVsUG9zKVxuXHRcdGxldCBkaWZmID0gcm91bmRlZFZlbCAtIHZlbFBvc1xuXHRcdGxldCBnYWluID0gMSAtIGRpZmYgKiAwLjVcblxuXHRcdGxldCB7dGltaW5nLCByYXRlfSA9IFNhbGFtYW5kZXIuZ2V0Tm90ZShub3RlLCByb3VuZGVkVmVsKVxuXG5cdFx0bGV0IHJldE5vdGUgPSBuZXcgTm90ZSh0aW1lLCB0aW1pbmcsIHJhdGUsIHZlbG9jaXR5LCBnYWluKS5jb25uZWN0KHRoaXMub3V0cHV0KVxuXG5cdFx0cmV0dXJuIHJldE5vdGVcblx0fVxufVxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL05vdGUuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	eval("!function(e,t){ true?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.MidiConvert=t():e.MidiConvert=t()}(this,function(){return function(e){function t(n){if(r[n])return r[n].exports;var a=r[n]={exports:{},id:n,loaded:!1};return e[n].call(a.exports,a,a.exports,t),a.loaded=!0,a.exports}var r={};return t.m=e,t.c=r,t.p=\"\",t(0)}([function(e,t,r){var n,a;n=[r(1),r(2),r(3)],a=function(e,t,r){return{parse:function(n){var a=e(n),o=t(a);return{transport:o,tracks:r(a,o)}},load:function(e,t){var r=new XMLHttpRequest;return r.open(\"GET\",e),r.overrideMimeType(\"text/plain; charset=x-user-defined\"),r.onload=function(){if(4===r.readyState&&200===r.status){for(var e=r.responseText||\"\",n=[],a=0;a<e.length;a++)n[a]=String.fromCharCode(255&e.charCodeAt(a));var o=this.parse(n.join(\"\"));t&&t(o)}}.bind(this),r.send(),r}}}.apply(t,n),!(void 0!==a&&(e.exports=a))},function(e,t){function r(e){function t(e){var t=e.read(4),r=e.readInt32();return{id:t,length:r,data:e.read(r)}}function r(e){var t={};t.deltaTime=e.readVarInt();var r=e.readInt8();if(240==(240&r)){if(255==r){t.type=\"meta\";var n=e.readInt8(),o=e.readVarInt();switch(n){case 0:if(t.subtype=\"sequenceNumber\",2!=o)throw\"Expected length for sequenceNumber event is 2, got \"+o;return t.number=e.readInt16(),t;case 1:return t.subtype=\"text\",t.text=e.read(o),t;case 2:return t.subtype=\"copyrightNotice\",t.text=e.read(o),t;case 3:return t.subtype=\"trackName\",t.text=e.read(o),t;case 4:return t.subtype=\"instrumentName\",t.text=e.read(o),t;case 5:return t.subtype=\"lyrics\",t.text=e.read(o),t;case 6:return t.subtype=\"marker\",t.text=e.read(o),t;case 7:return t.subtype=\"cuePoint\",t.text=e.read(o),t;case 32:if(t.subtype=\"midiChannelPrefix\",1!=o)throw\"Expected length for midiChannelPrefix event is 1, got \"+o;return t.channel=e.readInt8(),t;case 47:if(t.subtype=\"endOfTrack\",0!=o)throw\"Expected length for endOfTrack event is 0, got \"+o;return t;case 81:if(t.subtype=\"setTempo\",3!=o)throw\"Expected length for setTempo event is 3, got \"+o;return t.microsecondsPerBeat=(e.readInt8()<<16)+(e.readInt8()<<8)+e.readInt8(),t;case 84:if(t.subtype=\"smpteOffset\",5!=o)throw\"Expected length for smpteOffset event is 5, got \"+o;var i=e.readInt8();return t.frameRate={0:24,32:25,64:29,96:30}[96&i],t.hour=31&i,t.min=e.readInt8(),t.sec=e.readInt8(),t.frame=e.readInt8(),t.subframe=e.readInt8(),t;case 88:if(t.subtype=\"timeSignature\",4!=o)throw\"Expected length for timeSignature event is 4, got \"+o;return t.numerator=e.readInt8(),t.denominator=Math.pow(2,e.readInt8()),t.metronome=e.readInt8(),t.thirtyseconds=e.readInt8(),t;case 89:if(t.subtype=\"keySignature\",2!=o)throw\"Expected length for keySignature event is 2, got \"+o;return t.key=e.readInt8(!0),t.scale=e.readInt8(),t;case 127:return t.subtype=\"sequencerSpecific\",t.data=e.read(o),t;default:return t.subtype=\"unknown\",t.data=e.read(o),t}return t.data=e.read(o),t}if(240==r){t.type=\"sysEx\";var o=e.readVarInt();return t.data=e.read(o),t}if(247==r){t.type=\"dividedSysEx\";var o=e.readVarInt();return t.data=e.read(o),t}throw\"Unrecognised MIDI event type byte: \"+r}var u;0==(128&r)?(u=r,r=a):(u=e.readInt8(),a=r);var c=r>>4;switch(t.channel=15&r,t.type=\"channel\",c){case 8:return t.subtype=\"noteOff\",t.noteNumber=u,t.velocity=e.readInt8(),t;case 9:return t.noteNumber=u,t.velocity=e.readInt8(),0==t.velocity?t.subtype=\"noteOff\":t.subtype=\"noteOn\",t;case 10:return t.subtype=\"noteAftertouch\",t.noteNumber=u,t.amount=e.readInt8(),t;case 11:return t.subtype=\"controller\",t.controllerType=u,t.value=e.readInt8(),t;case 12:return t.subtype=\"programChange\",t.programNumber=u,t;case 13:return t.subtype=\"channelAftertouch\",t.amount=u,t;case 14:return t.subtype=\"pitchBend\",t.value=u+(e.readInt8()<<7),t;default:throw\"Unrecognised MIDI event type: \"+c}}var a;stream=n(e);var o=t(stream);if(\"MThd\"!=o.id||6!=o.length)throw\"Bad .mid file - header not found\";var i=n(o.data),u=i.readInt16(),c=i.readInt16(),s=i.readInt16();if(32768&s)throw\"Expressing time division in SMTPE frames is not supported yet\";ticksPerBeat=s;for(var d={formatType:u,trackCount:c,ticksPerBeat:ticksPerBeat},f=[],p=0;p<d.trackCount;p++){f[p]=[];var m=t(stream);if(\"MTrk\"!=m.id)throw\"Unexpected chunk - expected MTrk, got \"+m.id;for(var v=n(m.data);!v.eof();){var l=r(v);f[p].push(l)}}return{header:d,tracks:f}}function n(e){function t(t){var r=e.substr(u,t);return u+=t,r}function r(){var t=(e.charCodeAt(u)<<24)+(e.charCodeAt(u+1)<<16)+(e.charCodeAt(u+2)<<8)+e.charCodeAt(u+3);return u+=4,t}function n(){var t=(e.charCodeAt(u)<<8)+e.charCodeAt(u+1);return u+=2,t}function a(t){var r=e.charCodeAt(u);return t&&r>127&&(r-=256),u+=1,r}function o(){return u>=e.length}function i(){for(var e=0;;){var t=a();if(!(128&t))return e+t;e+=127&t,e<<=7}}var u=0;return{eof:o,read:t,readInt32:r,readInt16:n,readInt8:a,readVarInt:i}}e.exports=function(e){return r(e)}},function(e,t,r){var n;n=function(){return function(e){for(var t={midiPPQ:e.header.ticksPerBeat},r=0;r<e.tracks.length;r++)for(var n=e.tracks[r],a=0;a<n.length;a++){var o=n[a];\"meta\"===o.type&&(\"timeSignature\"===o.subtype?t.timeSignature=[o.numerator,o.denominator]:\"setTempo\"===o.subtype&&(t.bpm||(t.bpm=6e7/o.microsecondsPerBeat)))}return t.bpm=t.bpm||120,t}}.call(t,r,t,e),!(void 0!==n&&(e.exports=n))},function(e,t,r){var n,a;n=[r(4),r(5),r(6),r(7)],a=function(e,t,r,n){function a(e,a){var o=n(e,a),i={},u=t(e);u&&(i.name=u);var c=r(e,a);c&&(i.notes=c[0],i.noteOffs=c[1]);for(var s in o)i[s]=o[s];return i}return function(t,r){for(var n=(t.header.ticksPerBeat,[]),o=0;o<t.tracks.length;o++){var i=t.tracks[o];i=e.absoluteTime(i,r),n.push(a(i,r))}return n}}.apply(t,n),!(void 0!==a&&(e.exports=a))},function(e,t,r){var n;n=function(){return{midiToFloat:function(e){return parseFloat((e/127).toFixed(4))},ticksToTime:function(e,t){var r=60/t.bpm*(e/t.midiPPQ);return r},absoluteTime:function(e,t){for(var r=0,n=0;n<e.length;n++){var a=e[n];r+=a.deltaTime,a.time=this.ticksToTime(r,t),a.ticks=r,delete a.deltaTime}return e},defaults:function(e,t){e=e||{};for(var r in t)\"undefined\"==typeof e[r]&&(e[r]=t[r]);return e}}}.call(t,r,t,e),!(void 0!==n&&(e.exports=n))},function(e,t,r){var n;n=function(){return function(e){var t;return e.forEach(function(e){\"meta\"===e.type&&\"trackName\"===e.subtype&&(t=e.text,t=t.replace(/\\u0000/g,\"\"))}),t}}.call(t,r,t,e),!(void 0!==n&&(e.exports=n))},function(e,t,r){var n,a;n=[r(4)],a=function(e){function t(e){var t=[\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"],r=Math.floor(e/12)-1,n=e%12;return t[n]+r}return function(r){for(var n=[],a=[],o=0;o<r.length;o++){var i=r[o];if(\"noteOn\"===i.subtype){var u={ticks:i.ticks,time:i.time,midi:i.noteNumber,noteNumber:i.noteNumber,note:t(i.noteNumber),velocity:e.midiToFloat(i.velocity)};n.push(u)}else if(\"noteOff\"===i.subtype){a.push({ticks:i.ticks,time:i.time,midi:i.noteNumber,note:t(i.noteNumber)});for(var c=0;c<n.length;c++){var s=n[c];if(s.noteNumber===i.noteNumber&&\"undefined\"==typeof s.duration){s.duration=i.time-s.time,delete s.noteNumber;break}}}}return n.length?[n,a]:void 0}}.apply(t,n),!(void 0!==a&&(e.exports=a))},function(e,t,r){var n,a;n=[r(4)],a=function(e){function t(e){var t={};return e.forEach(function(e){\"controller\"===e.subtype&&(t[e.controllerType]=1)}),t}function r(t,r){var n=[];return t.forEach(function(t){\"controller\"===t.subtype&&t.controllerType===r&&n.push({ticks:t.ticks,time:t.time,value:e.midiToFloat(t.value)})}),n}var n={1:\"modulationWheel\",2:\"breath\",4:\"footController\",5:\"portamentoTime\",7:\"volume\",8:\"balance\",10:\"pan\",64:\"sustain\",65:\"portamentoTime\",66:\"sostenuto\",67:\"softPedal\",68:\"legatoFootswitch\",84:\"portamentoContro\"};return function(e){var a=t(e),o={};for(var i in a){i=parseInt(i);var u=r(e,i);n[i]&&(o[n[i]]=u),o[\"cc_\"+i]=u}return o}}.apply(t,n),!(void 0!==a&&(e.exports=a))}])});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(34), __webpack_require__(5), __webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t\"use strict\";\n\t\n\t/**\n\t *  @class Tone.Part is a collection Tone.Events which can be\n\t *         started/stoped and looped as a single unit.\n\t *\n\t *  @extends {Tone.Event}\n\t *  @param {Function} callback The callback to invoke on each event\n\t *  @param {Array} events the array of events\n\t *  @example\n\t * var part = new Tone.Part(function(time, note){\n\t * \t//the notes given as the second element in the array\n\t * \t//will be passed in as the second argument\n\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t *  @example\n\t * //use an array of objects as long as the object has a \"time\" attribute\n\t * var part = new Tone.Part(function(time, value){\n\t * \t//the value is an object which contains both the note and the velocity\n\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t * ]).start(0);\n\t */\n\tTone.Part = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"callback\", \"events\"], Tone.Part.defaults);\n\n\t\t/**\n\t\t *  If the part is looping or not\n\t\t *  @type  {Boolean|Positive}\n\t\t *  @private\n\t\t */\n\t\tthis._loop = options.loop;\n\n\t\t/**\n\t\t *  When the note is scheduled to start.\n\t\t *  @type  {Ticks}\n\t\t *  @private\n\t\t */\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\n\t\t/**\n\t\t *  When the note is scheduled to start.\n\t\t *  @type  {Ticks}\n\t\t *  @private\n\t\t */\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\n\t\t/**\n\t\t *  The playback rate of the part\n\t\t *  @type  {Positive}\n\t\t *  @private\n\t\t */\n\t\tthis._playbackRate = options.playbackRate;\n\n\t\t/**\n\t\t *  private holder of probability value\n\t\t *  @type {NormalRange}\n\t\t *  @private\n\t\t */\n\t\tthis._probability = options.probability;\n\n\t\t/**\n\t\t *  the amount of variation from the\n\t\t *  given time. \n\t\t *  @type {Boolean|Time}\n\t\t *  @private\n\t\t */\n\t\tthis._humanize = options.humanize;\n\n\t\t/**\n\t\t *  The start offset\n\t\t *  @type {Ticks}\n\t\t *  @private\n\t\t */\n\t\tthis._startOffset = 0;\n\n\t\t/**\n\t\t *  Keeps track of the current state\n\t\t *  @type {Tone.TimelineState}\n\t\t *  @private\n\t\t */\n\t\tthis._state = new Tone.TimelineState(Tone.State.Stopped);\n\n\t\t/**\n\t\t *  An array of Objects. \n\t\t *  @type  {Array}\n\t\t *  @private\n\t\t */\n\t\tthis._events = [];\n\n\t\t/**\n\t\t *  The callback to invoke at all the scheduled events.\n\t\t *  @type {Function}\n\t\t */\n\t\tthis.callback = options.callback;\n\n\t\t/**\n\t\t *  If mute is true, the callback won't be\n\t\t *  invoked.\n\t\t *  @type {Boolean}\n\t\t */\n\t\tthis.mute = options.mute;\n\n\t\t//add the events\n\t\tvar events = this.defaultArg(options.events, []);\n\t\tif (!this.isUndef(options.events)){\n\t\t\tfor (var i = 0; i < events.length; i++){\n\t\t\t\tif (Array.isArray(events[i])){\n\t\t\t\t\tthis.add(events[i][0], events[i][1]);\n\t\t\t\t} else {\n\t\t\t\t\tthis.add(events[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tTone.extend(Tone.Part, Tone.Event);\n\n\t/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @const\n\t */\n\tTone.Part.defaults = {\n\t\t\"callback\" : Tone.noOp,\n\t\t\"loop\" : false,\n\t\t\"loopEnd\" : \"1m\",\n\t\t\"loopStart\" : 0,\n\t\t\"playbackRate\" : 1,\n\t\t\"probability\" : 1,\n\t\t\"humanize\" : false,\n\t\t\"mute\" : false,\n\t};\n\n\t/**\n\t *  Start the part at the given time. \n\t *  @param  {TransportTime}  time    When to start the part.\n\t *  @param  {Time=}  offset  The offset from the start of the part\n\t *                           to begin playing at.\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.start = function(time, offset){\n\t\tvar ticks = this.toTicks(time);\n\t\tif (this._state.getStateAtTime(ticks) !== Tone.State.Started){\n\t\t\tif (this._loop){\n\t\t\t\toffset = this.defaultArg(offset, this._loopStart);\n\t\t\t} else {\n\t\t\t\toffset = this.defaultArg(offset, 0);\n\t\t\t}\n\t\t\toffset = this.toTicks(offset);\n\t\t\tthis._state.addEvent({\n\t\t\t\t\"state\" : Tone.State.Started, \n\t\t\t\t\"time\" : ticks, \n\t\t\t\t\"offset\" : offset\n\t\t\t});\n\t\t\tthis._forEach(function(event){\n\t\t\t\tthis._startNote(event, ticks, offset);\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Start the event in the given event at the correct time given\n\t *  the ticks and offset and looping.\n\t *  @param  {Tone.Event}  event \n\t *  @param  {Ticks}  ticks\n\t *  @param  {Ticks}  offset\n\t *  @private\n\t */\n\tTone.Part.prototype._startNote = function(event, ticks, offset){\n\t\tticks -= offset;\n\t\tif (this._loop){\n\t\t\tif (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd){\n\t\t\t\tif (event.startOffset < offset){\n\t\t\t\t\t//start it on the next loop\n\t\t\t\t\tticks += this._getLoopDuration();\n\t\t\t\t}\n\t\t\t\tevent.start(Tone.TransportTime(ticks,\"i\"));\n\t\t\t} else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t\t\t\tevent.loop = false;\n\t\t\t\tevent.start(Tone.TransportTime(ticks,\"i\"));\n\t\t\t}\n\t\t} else {\n\t\t\tif (event.startOffset >= offset){\n\t\t\t\tevent.start(Tone.TransportTime(ticks,\"i\"));\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  The start from the scheduled start time\n\t *  @type {Ticks}\n\t *  @memberOf Tone.Part#\n\t *  @name startOffset\n\t *  @private\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"startOffset\", {\n\t\tget : function(){\n\t\t\treturn this._startOffset;\n\t\t},\n\t\tset : function(offset){\n\t\t\tthis._startOffset = offset;\n\t\t\tthis._forEach(function(event){\n\t\t\t\tevent.startOffset += this._startOffset;\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t *  Stop the part at the given time.\n\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.stop = function(time){\n\t\tvar ticks = this.toTicks(time);\n\t\tthis._state.cancel(ticks);\n\t\tthis._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t\tthis._forEach(function(event){\n\t\t\tevent.stop(time);\n\t\t});\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Get/Set an Event's value at the given time. \n\t *  If a value is passed in and no event exists at\n\t *  the given time, one will be created with that value. \n\t *  If two events are at the same time, the first one will\n\t *  be returned.\n\t *  @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t *\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t * //if an event didn't exist at that time, it will be created.\n\t *  @param {TransportTime} time The time of the event to get or set.\n\t *  @param {*=} value If a value is passed in, the value of the\n\t *                    event at the given time will be set to it.\n\t *  @return {Tone.Event} the event at the time\n\t */\n\tTone.Part.prototype.at = function(time, value){\n\t\ttime = Tone.TransportTime(time);\n\t\tvar tickTime = Tone.Time(1, \"i\").toSeconds();\n\t\tfor (var i = 0; i < this._events.length; i++){\n\t\t\tvar event = this._events[i];\n\t\t\tif (Math.abs(time.toTicks() - event.startOffset) < tickTime){\n\t\t\t\tif (!this.isUndef(value)){\n\t\t\t\t\tevent.value = value;\n\t\t\t\t}\n\t\t\t\treturn event;\n\t\t\t}\n\t\t}\n\t\t//if there was no event at that time, create one\n\t\tif (!this.isUndef(value)){\n\t\t\tthis.add(time, value);\n\t\t\t//return the new event\n\t\t\treturn this._events[this._events.length - 1];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\n\t/**\n\t *  Add a an event to the part. \n\t *  @param {Time} time The time the note should start.\n\t *                            If an object is passed in, it should\n\t *                            have a 'time' attribute and the rest\n\t *                            of the object will be used as the 'value'.\n\t *  @param  {Tone.Event|*}  value \n\t *  @returns {Tone.Part} this\n\t *  @example\n\t * part.add(\"1m\", \"C#+11\");\n\t */\n\tTone.Part.prototype.add = function(time, value){\n\t\t//extract the parameters\n\t\tif (this.isObject(time) && time.hasOwnProperty(\"time\")){\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t\tdelete value.time;\n\t\t} \n\t\ttime = this.toTicks(time);\n\t\tvar event;\n\t\tif (value instanceof Tone.Event){\n\t\t\tevent = value;\n\t\t\tevent.callback = this._tick.bind(this);\n\t\t} else {\n\t\t\tevent = new Tone.Event({\n\t\t\t\t\"callback\" : this._tick.bind(this), \n\t\t\t\t\"value\" : value,\n\t\t\t});\n\t\t}\n\t\t//the start offset\n\t\tevent.startOffset = time;\n\n\t\t//initialize the values\n\t\tevent.set({\n\t\t\t\"loopEnd\" : this.loopEnd,\n\t\t\t\"loopStart\" : this.loopStart,\n\t\t\t\"loop\" : this.loop,\n\t\t\t\"humanize\" : this.humanize,\n\t\t\t\"playbackRate\" : this.playbackRate,\n\t\t\t\"probability\" : this.probability\n\t\t});\n\n\t\tthis._events.push(event);\n\n\t\t//start the note if it should be played right now\n\t\tthis._restartEvent(event);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Restart the given event\n\t *  @param  {Tone.Event}  event \n\t *  @private\n\t */\n\tTone.Part.prototype._restartEvent = function(event){\n\t\tvar stateEvent = this._state.getEvent(this.now());\n\t\tif (stateEvent && stateEvent.state === Tone.State.Started){\n\t\t\tthis._startNote(event, stateEvent.time, stateEvent.offset);\n\t\t}\t\n\t};\n\n\t/**\n\t *  Remove an event from the part. Will recursively iterate\n\t *  into nested parts to find the event.\n\t *  @param {Time} time The time of the event\n\t *  @param {*} value Optionally select only a specific event value\n\t */\n\tTone.Part.prototype.remove = function(time, value){\n\t\t//extract the parameters\n\t\tif (this.isObject(time) && time.hasOwnProperty(\"time\")){\n\t\t\tvalue = time;\n\t\t\ttime = value.time;\n\t\t} \n\t\ttime = this.toTicks(time);\n\t\tfor (var i = this._events.length - 1; i >= 0; i--){\n\t\t\tvar event = this._events[i];\n\t\t\tif (event instanceof Tone.Part){\n\t\t\t\tevent.remove(time, value);\n\t\t\t} else {\n\t\t\t\tif (event.startOffset === time){\n\t\t\t\t\tif (this.isUndef(value) || (!this.isUndef(value) && event.value === value)){\n\t\t\t\t\t\tthis._events.splice(i, 1);\n\t\t\t\t\t\tevent.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Remove all of the notes from the group. \n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.removeAll = function(){\n\t\tthis._forEach(function(event){\n\t\t\tevent.dispose();\n\t\t});\n\t\tthis._events = [];\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.cancel = function(after){\n\t\tthis._forEach(function(event){\n\t\t\tevent.cancel(after);\n\t\t});\n\t\tthis._state.cancel(after);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Iterate over all of the events\n\t *  @param {Function} callback\n\t *  @param {Object} ctx The context\n\t *  @private\n\t */\n\tTone.Part.prototype._forEach = function(callback, ctx){\n\t\tctx = this.defaultArg(ctx, this);\n\t\tfor (var i = this._events.length - 1; i >= 0; i--){\n\t\t\tvar e = this._events[i];\n\t\t\tif (e instanceof Tone.Part){\n\t\t\t\te._forEach(callback, ctx);\n\t\t\t} else {\n\t\t\t\tcallback.call(ctx, e);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Set the attribute of all of the events\n\t *  @param  {String}  attr  the attribute to set\n\t *  @param  {*}  value      The value to set it to\n\t *  @private\n\t */\n\tTone.Part.prototype._setAll = function(attr, value){\n\t\tthis._forEach(function(event){\n\t\t\tevent[attr] = value;\n\t\t});\n\t};\n\n\t/**\n\t *  Internal tick method\n\t *  @param  {Number}  time  The time of the event in seconds\n\t *  @private\n\t */\n\tTone.Part.prototype._tick = function(time, value){\n\t\tif (!this.mute){\n\t\t\tthis.callback(time, value);\n\t\t}\n\t};\n\n\t/**\n\t *  Determine if the event should be currently looping\n\t *  given the loop boundries of this Part.\n\t *  @param  {Tone.Event}  event  The event to test\n\t *  @private\n\t */\n\tTone.Part.prototype._testLoopBoundries = function(event){\n\t\tif (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd){\n\t\t\tevent.cancel();\n\t\t} else {\n\t\t\t//reschedule it if it's stopped\n\t\t\tif (event.state === Tone.State.Stopped){\n\t\t\t\tthis._restartEvent(event);\n\t\t\t}\n\t\t}\n\t};\n\n\t/**\n\t *  The probability of the notes being triggered.\n\t *  @memberOf Tone.Part#\n\t *  @type {NormalRange}\n\t *  @name probability\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"probability\", {\n\t\tget : function(){\n\t\t\treturn this._probability;\n\t\t},\n\t\tset : function(prob){\n\t\t\tthis._probability = prob;\n\t\t\tthis._setAll(\"probability\", prob);\n\t\t}\n\t});\n\n\t/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t *  @example\n\t * event.humanize = true;\n\t *  @type {Boolean|Time}\n\t *  @name humanize\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"humanize\", {\n\t\tget : function(){\n\t\t\treturn this._humanize;\n\t\t},\n\t\tset : function(variation){\n\t\t\tthis._humanize = variation;\n\t\t\tthis._setAll(\"humanize\", variation);\n\t\t}\n\t});\n\n\t/**\n\t *  If the part should loop or not\n\t *  between Tone.Part.loopStart and \n\t *  Tone.Part.loopEnd. An integer\n\t *  value corresponds to the number of\n\t *  loops the Part does after it starts.\n\t *  @memberOf Tone.Part#\n\t *  @type {Boolean|Positive}\n\t *  @name loop\n\t *  @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"loop\", {\n\t\tget : function(){\n\t\t\treturn this._loop;\n\t\t},\n\t\tset : function(loop){\n\t\t\tthis._loop = loop;\n\t\t\tthis._forEach(function(event){\n\t\t\t\tevent._loopStart = this._loopStart;\n\t\t\t\tevent._loopEnd = this._loopEnd;\n\t\t\t\tevent.loop = loop;\n\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t *  The loopEnd point determines when it will \n\t *  loop if Tone.Part.loop is true.\n\t *  @memberOf Tone.Part#\n\t *  @type {TransportTime}\n\t *  @name loopEnd\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn Tone.TransportTime(this._loopEnd, \"i\").toNotation();\n\t\t},\n\t\tset : function(loopEnd){\n\t\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\t\tif (this._loop){\n\t\t\t\tthis._forEach(function(event){\n\t\t\t\t\tevent.loopEnd = this.loopEnd;\n\t\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The loopStart point determines when it will \n\t *  loop if Tone.Part.loop is true.\n\t *  @memberOf Tone.Part#\n\t *  @type {TransportTime}\n\t *  @name loopStart\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn Tone.TransportTime(this._loopStart, \"i\").toNotation();\n\t\t},\n\t\tset : function(loopStart){\n\t\t\tthis._loopStart = this.toTicks(loopStart);\n\t\t\tif (this._loop){\n\t\t\t\tthis._forEach(function(event){\n\t\t\t\t\tevent.loopStart = this.loopStart;\n\t\t\t\t\tthis._testLoopBoundries(event);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * \tThe playback rate of the part\n\t *  @memberOf Tone.Part#\n\t *  @type {Positive}\n\t *  @name playbackRate\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"playbackRate\", {\n\t\tget : function(){\n\t\t\treturn this._playbackRate;\n\t\t},\n\t\tset : function(rate){\n\t\t\tthis._playbackRate = rate;\n\t\t\tthis._setAll(\"playbackRate\", rate);\n\t\t}\n\t});\n\n\t/**\n\t * \tThe number of scheduled notes in the part. \n\t *  @memberOf Tone.Part#\n\t *  @type {Positive}\n\t *  @name length\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Part.prototype, \"length\", {\n\t\tget : function(){\n\t\t\treturn this._events.length;\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Part}  this\n\t */\n\tTone.Part.prototype.dispose = function(){\n\t\tthis.removeAll();\n\t\tthis._state.dispose();\n\t\tthis._state = null;\n\t\tthis.callback = null;\n\t\tthis._events = null;\n\t\treturn this;\n\t};\n\n\treturn Tone.Part;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(15), __webpack_require__(5), __webpack_require__(22)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Tone) {\n\n\t\"use strict\";\n\n\t/**\n\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t *          callback for a single or repeatable events along the timeline. \n\t *\n\t *  @extends {Tone}\n\t *  @param {function} callback The callback to invoke at the time. \n\t *  @param {*} value The value or values which should be passed to\n\t *                      the callback function on invocation.  \n\t *  @example\n\t * var chord = new Tone.Event(function(time, chord){\n\t * \t//the chord as well as the exact time of the event\n\t * \t//are passed in as arguments to the callback function\n\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t * //start the chord at the beginning of the transport timeline\n\t * chord.start();\n\t * //loop it every measure for 8 measures\n\t * chord.loop = 8;\n\t * chord.loopEnd = \"1m\";\n\t */\n\tTone.Event = function(){\n\n\t\tvar options = this.optionsObject(arguments, [\"callback\", \"value\"], Tone.Event.defaults);\n\n\t\t/**\n\t\t *  Loop value\n\t\t *  @type  {Boolean|Positive}\n\t\t *  @private\n\t\t */\n\t\tthis._loop = options.loop;\n\n\t\t/**\n\t\t *  The callback to invoke. \n\t\t *  @type  {Function}\n\t\t */\n\t\tthis.callback = options.callback;\n\n\t\t/**\n\t\t *  The value which is passed to the\n\t\t *  callback function.\n\t\t *  @type  {*}\n\t\t *  @private\n\t\t */\n\t\tthis.value = options.value;\n\n\t\t/**\n\t\t *  When the note is scheduled to start.\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._loopStart = this.toTicks(options.loopStart);\n\n\t\t/**\n\t\t *  When the note is scheduled to start.\n\t\t *  @type  {Number}\n\t\t *  @private\n\t\t */\n\t\tthis._loopEnd = this.toTicks(options.loopEnd);\n\n\t\t/**\n\t\t *  Tracks the scheduled events\n\t\t *  @type {Tone.TimelineState}\n\t\t *  @private\n\t\t */\n\t\tthis._state = new Tone.TimelineState(Tone.State.Stopped);\n\n\t\t/**\n\t\t *  The playback speed of the note. A speed of 1\n\t\t *  is no change. \n\t\t *  @private\n\t\t *  @type {Positive}\n\t\t */\n\t\tthis._playbackRate = 1;\n\n\t\t/**\n\t\t *  A delay time from when the event is scheduled to start\n\t\t *  @type {Ticks}\n\t\t *  @private\n\t\t */\n\t\tthis._startOffset = 0;\n\n\t\t/**\n\t\t *  The probability that the callback will be invoked\n\t\t *  at the scheduled time. \n\t\t *  @type {NormalRange}\n\t\t *  @example\n\t\t * //the callback will be invoked 50% of the time\n\t\t * event.probability = 0.5;\n\t\t */\n\t\tthis.probability = options.probability;\n\n\t\t/**\n\t\t *  If set to true, will apply small (+/-0.02 seconds) random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t */\n\t\tthis.humanize = options.humanize;\n\n\t\t/**\n\t\t *  If mute is true, the callback won't be\n\t\t *  invoked.\n\t\t *  @type {Boolean}\n\t\t */\n\t\tthis.mute = options.mute;\n\n\t\t//set the initial values\n\t\tthis.playbackRate = options.playbackRate;\n\t};\n\n\tTone.extend(Tone.Event);\n\n\t/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @const\n\t */\n\tTone.Event.defaults = {\n\t\t\"callback\" : Tone.noOp,\n\t\t\"loop\" : false,\n\t\t\"loopEnd\" : \"1m\",\n\t\t\"loopStart\" : 0,\n\t\t\"playbackRate\" : 1,\n\t\t\"value\" : null,\n\t\t\"probability\" : 1,\n\t\t\"mute\" : false,\n\t\t\"humanize\" : false,\n\t};\n\n\t/**\n\t *  Reschedule all of the events along the timeline\n\t *  with the updated values.\n\t *  @param {Time} after Only reschedules events after the given time.\n\t *  @return  {Tone.Event}  this\n\t *  @private\n\t */\n\tTone.Event.prototype._rescheduleEvents = function(after){\n\t\t//if no argument is given, schedules all of the events\n\t\tafter = this.defaultArg(after, -1);\n\t\tthis._state.forEachFrom(after, function(event){\n\t\t\tvar duration;\n\t\t\tif (event.state === Tone.State.Started){\n\t\t\t\tif (!this.isUndef(event.id)){\n\t\t\t\t\tTone.Transport.clear(event.id);\n\t\t\t\t}\n\t\t\t\tvar startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t\t\t\tif (this._loop){\n\t\t\t\t\tduration = Infinity;\n\t\t\t\t\tif (this.isNumber(this._loop)){\n\t\t\t\t\t\tduration =  (this._loop) * this._getLoopDuration();\n\t\t\t\t\t}\n\t\t\t\t\tvar nextEvent = this._state.getEventAfter(startTick);\n\t\t\t\t\tif (nextEvent !== null){\n\t\t\t\t\t\tduration = Math.min(duration, nextEvent.time - startTick);\n\t\t\t\t\t}\n\t\t\t\t\tif (duration !== Infinity){\n\t\t\t\t\t\t//schedule a stop since it's finite duration\n\t\t\t\t\t\tthis._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t\t\t\t\t\tduration = Tone.Time(duration, \"i\");\n\t\t\t\t\t}\n\t\t\t\t\tvar interval = Tone.Time(this._getLoopDuration(), \"i\");\n\t\t\t\t\tevent.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, \"i\"), duration);\n\t\t\t\t} else {\n\t\t\t\t\tevent.id = Tone.Transport.schedule(this._tick.bind(this), startTick + \"i\");\n\t\t\t\t}\n\t\t\t} \n\t\t}.bind(this));\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.Event#\n\t *  @name state\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"state\", {\n\t\tget : function(){\n\t\t\treturn this._state.getStateAtTime(Tone.Transport.ticks);\n\t\t}\n\t});\n\n\t/**\n\t *  The start from the scheduled start time\n\t *  @type {Ticks}\n\t *  @memberOf Tone.Event#\n\t *  @name startOffset\n\t *  @private\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"startOffset\", {\n\t\tget : function(){\n\t\t\treturn this._startOffset;\n\t\t},\n\t\tset : function(offset){\n\t\t\tthis._startOffset = offset;\n\t\t}\n\t});\n\n\t/**\n\t *  Start the note at the given time. \n\t *  @param  {TimelinePosition}  time  When the note should start.\n\t *  @return  {Tone.Event}  this\n\t */\n\tTone.Event.prototype.start = function(time){\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getStateAtTime(time) === Tone.State.Stopped){\n\t\t\tthis._state.addEvent({\n\t\t\t\t\"state\" : Tone.State.Started,\n\t\t\t\t\"time\" : time,\n\t\t\t\t\"id\" : undefined,\n\t\t\t});\n\t\t\tthis._rescheduleEvents(time);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Stop the Event at the given time.\n\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t *  @return  {Tone.Event}  this\n\t */\n\tTone.Event.prototype.stop = function(time){\n\t\tthis.cancel(time);\n\t\ttime = this.toTicks(time);\n\t\tif (this._state.getStateAtTime(time) === Tone.State.Started){\n\t\t\tthis._state.setStateAtTime(Tone.State.Stopped, time);\n\t\t\tvar previousEvent = this._state.getEventBefore(time);\n\t\t\tvar reschedulTime = time;\n\t\t\tif (previousEvent !== null){\n\t\t\t\treschedulTime = previousEvent.time;\n\t\t\t}\n\t\t\tthis._rescheduleEvents(reschedulTime);\n\t\t}\n\t\treturn this;\n\t};\n\n\t/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t *  @return  {Tone.Event}  this\n\t */\n\tTone.Event.prototype.cancel = function(time){\n\t\ttime = this.defaultArg(time, -Infinity);\n\t\ttime = this.toTicks(time);\n\t\tthis._state.forEachFrom(time, function(event){\n\t\t\tTone.Transport.clear(event.id);\n\t\t});\n\t\tthis._state.cancel(time);\n\t\treturn this;\n\t};\n\n\t/**\n\t *  The callback function invoker. Also \n\t *  checks if the Event is done playing\n\t *  @param  {Number}  time  The time of the event in seconds\n\t *  @private\n\t */\n\tTone.Event.prototype._tick = function(time){\n\t\tif (!this.mute && this._state.getStateAtTime(Tone.Transport.ticks) === Tone.State.Started){\n\t\t\tif (this.probability < 1 && Math.random() > this.probability){\n\t\t\t\treturn;\n\t\t\t} \n\t\t\tif (this.humanize){\n\t\t\t\tvar variation = 0.02;\n\t\t\t\tif (!this.isBoolean(this.humanize)){\n\t\t\t\t\tvariation = this.toSeconds(this.humanize);\n\t\t\t\t}\n\t\t\t\ttime += (Math.random() * 2 - 1) * variation;\n\t\t\t}\n\t\t\tthis.callback(time, this.value);\n\t\t}\n\t};\n\n\t/**\n\t *  Get the duration of the loop.\n\t *  @return  {Ticks}\n\t *  @private\n\t */\n\tTone.Event.prototype._getLoopDuration = function(){\n\t\treturn Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t};\n\n\t/**\n\t *  If the note should loop or not\n\t *  between Tone.Event.loopStart and \n\t *  Tone.Event.loopEnd. An integer\n\t *  value corresponds to the number of\n\t *  loops the Event does after it starts.\n\t *  @memberOf Tone.Event#\n\t *  @type {Boolean|Positive}\n\t *  @name loop\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"loop\", {\n\t\tget : function(){\n\t\t\treturn this._loop;\n\t\t},\n\t\tset : function(loop){\n\t\t\tthis._loop = loop;\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t});\n\n\t/**\n\t * \tThe playback rate of the note. Defaults to 1.\n\t *  @memberOf Tone.Event#\n\t *  @type {Positive}\n\t *  @name playbackRate\n\t *  @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"playbackRate\", {\n\t\tget : function(){\n\t\t\treturn this._playbackRate;\n\t\t},\n\t\tset : function(rate){\n\t\t\tthis._playbackRate = rate;\n\t\t\tthis._rescheduleEvents();\n\t\t}\n\t});\n\n\t/**\n\t *  The loopEnd point is the time the event will loop\n\t *  if Tone.Event.loop is true.\n\t *  @memberOf Tone.Event#\n\t *  @type {TransportTime}\n\t *  @name loopEnd\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"loopEnd\", {\n\t\tget : function(){\n\t\t\treturn Tone.TransportTime(this._loopEnd, \"i\").toNotation();\n\t\t},\n\t\tset : function(loopEnd){\n\t\t\tthis._loopEnd = this.toTicks(loopEnd);\n\t\t\tif (this._loop){\n\t\t\t\tthis._rescheduleEvents();\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The time when the loop should start. \n\t *  @memberOf Tone.Event#\n\t *  @type {TransportTime}\n\t *  @name loopStart\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"loopStart\", {\n\t\tget : function(){\n\t\t\treturn Tone.TransportTime(this._loopStart, \"i\").toNotation();\n\t\t},\n\t\tset : function(loopStart){\n\t\t\tthis._loopStart = this.toTicks(loopStart);\n\t\t\tif (this._loop){\n\t\t\t\tthis._rescheduleEvents();\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t *  @memberOf Tone.Event#\n\t *  @type {NormalRange}\n\t *  @name progress\n\t *  @readOnly\n\t */\n\tObject.defineProperty(Tone.Event.prototype, \"progress\", {\n\t\tget : function(){\n\t\t\tif (this._loop){\n\t\t\t\tvar ticks = Tone.Transport.ticks;\n\t\t\t\tvar lastEvent = this._state.getEvent(ticks);\n\t\t\t\tif (lastEvent !== null && lastEvent.state === Tone.State.Started){\n\t\t\t\t\tvar loopDuration = this._getLoopDuration();\n\t\t\t\t\tvar progress = (ticks - lastEvent.time) % loopDuration;\n\t\t\t\t\treturn progress / loopDuration;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t *  Clean up\n\t *  @return  {Tone.Event}  this\n\t */\n\tTone.Event.prototype.dispose = function(){\n\t\tthis.cancel();\n\t\tthis._state.dispose();\n\t\tthis._state = null;\n\t\tthis.callback = null;\n\t\tthis.value = null;\n\t};\n\n\treturn Tone.Event;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Salamander = __webpack_require__(27);\n\nvar _Salamander2 = _interopRequireDefault(_Salamander);\n\nvar _PianoBase2 = __webpack_require__(26);\n\nvar _PianoBase3 = _interopRequireDefault(_PianoBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Harmonics = function (_PianoBase) {\n\t_inherits(Harmonics, _PianoBase);\n\n\tfunction Harmonics() {\n\t\t_classCallCheck(this, Harmonics);\n\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Harmonics).call(this));\n\t}\n\n\t_createClass(Harmonics, [{\n\t\tkey: 'start',\n\t\tvalue: function start(note, gain, time) {\n\t\t\tif (_Salamander2.default.hasHarmonics(note)) {\n\t\t\t\tvar source = _Salamander2.default.newSource().connect(this.output);\n\n\t\t\t\tvar _Salamander$getHarmon = _Salamander2.default.getHarmonics(note);\n\n\t\t\t\tvar timing = _Salamander$getHarmon.timing;\n\t\t\t\tvar rate = _Salamander$getHarmon.rate;\n\n\t\t\t\tsource.playbackRate.value = rate;\n\t\t\t\tsource.start(time, timing.start, timing.duration, gain, 0);\n\t\t\t}\n\t\t}\n\t}]);\n\n\treturn Harmonics;\n}(_PianoBase3.default);\n\nexports.default = Harmonics;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSGFybW9uaWNzLmpzP2YwZGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7SUFFcUIsUzs7O0FBRXBCLHNCQUFhO0FBQUE7O0FBQUE7QUFFWjs7Ozt3QkFFSyxJLEVBQU0sSSxFQUFNLEksRUFBSztBQUN0QixPQUFJLHFCQUFXLFlBQVgsQ0FBd0IsSUFBeEIsQ0FBSixFQUFrQztBQUNqQyxRQUFJLFNBQVMscUJBQVcsU0FBWCxHQUF1QixPQUF2QixDQUErQixLQUFLLE1BQXBDLENBQWI7O0FBRGlDLGdDQUVaLHFCQUFXLFlBQVgsQ0FBd0IsSUFBeEIsQ0FGWTs7QUFBQSxRQUU1QixNQUY0Qix5QkFFNUIsTUFGNEI7QUFBQSxRQUVwQixJQUZvQix5QkFFcEIsSUFGb0I7O0FBR2pDLFdBQU8sWUFBUCxDQUFvQixLQUFwQixHQUE0QixJQUE1QjtBQUNBLFdBQU8sS0FBUCxDQUFhLElBQWIsRUFBbUIsT0FBTyxLQUExQixFQUFpQyxPQUFPLFFBQXhDLEVBQWtELElBQWxELEVBQXdELENBQXhEO0FBQ0E7QUFDRDs7Ozs7O2tCQWJtQixTIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNhbGFtYW5kZXIgZnJvbSAnLi9TYWxhbWFuZGVyJ1xuaW1wb3J0IFBpYW5vQmFzZSBmcm9tICcuL1BpYW5vQmFzZSdcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGFybW9uaWNzIGV4dGVuZHMgUGlhbm9CYXNlIHtcblxuXHRjb25zdHJ1Y3Rvcigpe1xuXHRcdHN1cGVyKClcblx0fVxuXG5cdHN0YXJ0KG5vdGUsIGdhaW4sIHRpbWUpe1xuXHRcdGlmIChTYWxhbWFuZGVyLmhhc0hhcm1vbmljcyhub3RlKSl7XG5cdFx0XHRsZXQgc291cmNlID0gU2FsYW1hbmRlci5uZXdTb3VyY2UoKS5jb25uZWN0KHRoaXMub3V0cHV0KVxuXHRcdFx0bGV0IHt0aW1pbmcsIHJhdGV9ID0gU2FsYW1hbmRlci5nZXRIYXJtb25pY3Mobm90ZSlcblx0XHRcdHNvdXJjZS5wbGF5YmFja1JhdGUudmFsdWUgPSByYXRlXG5cdFx0XHRzb3VyY2Uuc3RhcnQodGltZSwgdGltaW5nLnN0YXJ0LCB0aW1pbmcuZHVyYXRpb24sIGdhaW4sIDApXG5cdFx0fVxuXHR9XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvSGFybW9uaWNzLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Salamander = __webpack_require__(27);\n\nvar _Salamander2 = _interopRequireDefault(_Salamander);\n\nvar _PianoBase2 = __webpack_require__(26);\n\nvar _PianoBase3 = _interopRequireDefault(_PianoBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Release = function (_PianoBase) {\n\t_inherits(Release, _PianoBase);\n\n\tfunction Release() {\n\t\t_classCallCheck(this, Release);\n\n\t\treturn _possibleConstructorReturn(this, Object.getPrototypeOf(Release).apply(this, arguments));\n\t}\n\n\t_createClass(Release, [{\n\t\tkey: 'start',\n\t\tvalue: function start(note, time) {\n\n\t\t\tvar source = _Salamander2.default.newSource().connect(this.output);\n\n\t\t\tvar _Salamander$getReleas = _Salamander2.default.getRelease(note);\n\n\t\t\tvar timing = _Salamander$getReleas.timing;\n\t\t\tvar rate = _Salamander$getReleas.rate;\n\n\t\t\tsource.playbackRate.value = rate;\n\t\t\tsource.start(time, timing.start, timing.duration, 0.01, 0);\n\t\t}\n\t}]);\n\n\treturn Release;\n}(_PianoBase3.default);\n\nexports.default = Release;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvUmVsZWFzZS5qcz84MjlhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7Ozs7Ozs7Ozs7O0lBRXFCLE87Ozs7Ozs7Ozs7O3dCQUVkLEksRUFBTSxJLEVBQUs7O0FBRWhCLE9BQUksU0FBUyxxQkFBVyxTQUFYLEdBQXVCLE9BQXZCLENBQStCLEtBQUssTUFBcEMsQ0FBYjs7QUFGZ0IsK0JBR0sscUJBQVcsVUFBWCxDQUFzQixJQUF0QixDQUhMOztBQUFBLE9BR1gsTUFIVyx5QkFHWCxNQUhXO0FBQUEsT0FHSCxJQUhHLHlCQUdILElBSEc7O0FBSWhCLFVBQU8sWUFBUCxDQUFvQixLQUFwQixHQUE0QixJQUE1QjtBQUNBLFVBQU8sS0FBUCxDQUFhLElBQWIsRUFBbUIsT0FBTyxLQUExQixFQUFpQyxPQUFPLFFBQXhDLEVBQWtELElBQWxELEVBQXdELENBQXhEO0FBQ0E7Ozs7OztrQkFSbUIsTyIsImZpbGUiOiIzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTYWxhbWFuZGVyIGZyb20gJy4vU2FsYW1hbmRlcidcbmltcG9ydCBQaWFub0Jhc2UgZnJvbSAnLi9QaWFub0Jhc2UnXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbGVhc2UgZXh0ZW5kcyBQaWFub0Jhc2Uge1xuXHRcblx0c3RhcnQobm90ZSwgdGltZSl7XG5cblx0XHRsZXQgc291cmNlID0gU2FsYW1hbmRlci5uZXdTb3VyY2UoKS5jb25uZWN0KHRoaXMub3V0cHV0KVxuXHRcdGxldCB7dGltaW5nLCByYXRlfSA9IFNhbGFtYW5kZXIuZ2V0UmVsZWFzZShub3RlKVxuXHRcdHNvdXJjZS5wbGF5YmFja1JhdGUudmFsdWUgPSByYXRlXG5cdFx0c291cmNlLnN0YXJ0KHRpbWUsIHRpbWluZy5zdGFydCwgdGltaW5nLmR1cmF0aW9uLCAwLjAxLCAwKVxuXHR9XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvUmVsZWFzZS5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }
/******/ ]);